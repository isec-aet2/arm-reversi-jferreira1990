
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ecc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029b0  0800a0cc  0800a0cc  0001a0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca7c  0800ca7c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca7c  0800ca7c  0001ca7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca84  0800ca84  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca84  0800ca84  0001ca84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca88  0800ca88  0001ca88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800ca8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  2000010c  0800cb98  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  0800cb98  00020774  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffaf  00000000  00000000  0002013a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003af0  00000000  00000000  000400e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001958  00000000  00000000  00043be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001780  00000000  00000000  00045538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f96c  00000000  00000000  00046cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000152da  00000000  00000000  00076624  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012356f  00000000  00000000  0008b8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aee6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e74  00000000  00000000  001aeee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000010c 	.word	0x2000010c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a0b4 	.word	0x0800a0b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000110 	.word	0x20000110
 800023c:	0800a0b4 	.word	0x0800a0b4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f90d 	bl	800080c <ft6x06_GetInstance>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d10e      	bne.n	800061a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f905 	bl	800080c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d806      	bhi.n	800061a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	88fa      	ldrh	r2, [r7, #6]
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <ft6x06_Init+0x44>)
 8000614:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000616:	f000 fd6f 	bl	80010f8 <TS_IO_Init>
    }
  }
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000128 	.word	0x20000128

08000628 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000648:	f000 fd56 	bl	80010f8 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	21a8      	movs	r1, #168	; 0xa8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fd74 	bl	8001140 <TS_IO_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	b29b      	uxth	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f8bc 	bl	80007ee <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f88d 	bl	8000798 <ft6x06_TS_DisableIT>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fd4f 	bl	8001140 <TS_IO_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d901      	bls.n	80006be <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	b2db      	uxtb	r3, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000012c 	.word	0x2000012c

080006dc <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d234      	bcs.n	8000764 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <ft6x06_TS_GetXY+0x2c>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d003      	beq.n	800070e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000706:	e005      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000708:	2303      	movs	r3, #3
 800070a:	75fb      	strb	r3, [r7, #23]
      break;
 800070c:	e002      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800070e:	2309      	movs	r3, #9
 8000710:	75fb      	strb	r3, [r7, #23]
      break;
 8000712:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	7df9      	ldrb	r1, [r7, #23]
 800071e:	2304      	movs	r3, #4
 8000720:	f000 fd2c 	bl	800117c <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000724:	7c3b      	ldrb	r3, [r7, #16]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21b      	sxth	r3, r3
 800072a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800072e:	b21a      	sxth	r2, r3
 8000730:	7c7b      	ldrb	r3, [r7, #17]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800073e:	7cbb      	ldrb	r3, [r7, #18]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b21b      	sxth	r3, r3
 8000744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000748:	b21a      	sxth	r2, r3
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	b29a      	uxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <ft6x06_TS_GetXY+0x90>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <ft6x06_TS_GetXY+0x90>)
 8000762:	709a      	strb	r2, [r3, #2]
  }
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000012c 	.word	0x2000012c

08000770 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	21a4      	movs	r1, #164	; 0xa4
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fcbe 	bl	800110c <TS_IO_Write>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	21a4      	movs	r1, #164	; 0xa4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fcaa 	bl	800110c <TS_IO_Write>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80007fc:	68fb      	ldr	r3, [r7, #12]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00b      	b.n	8000838 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <ft6x06_GetInstance+0x40>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	b29b      	uxth	r3, r3
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	429a      	cmp	r2, r3
 800082c:	d101      	bne.n	8000832 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	e006      	b.n	8000840 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d9f0      	bls.n	8000820 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800083e:	23ff      	movs	r3, #255	; 0xff
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	20000128 	.word	0x20000128

08000850 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800085a:	49be      	ldr	r1, [pc, #760]	; (8000b54 <OTM8009A_Init+0x304>)
 800085c:	2000      	movs	r0, #0
 800085e:	f001 facb 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000862:	49bd      	ldr	r1, [pc, #756]	; (8000b58 <OTM8009A_Init+0x308>)
 8000864:	2003      	movs	r0, #3
 8000866:	f001 fac7 	bl	8001df8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800086a:	49bc      	ldr	r1, [pc, #752]	; (8000b5c <OTM8009A_Init+0x30c>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fac3 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000872:	49bb      	ldr	r1, [pc, #748]	; (8000b60 <OTM8009A_Init+0x310>)
 8000874:	2002      	movs	r0, #2
 8000876:	f001 fabf 	bl	8001df8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800087a:	49b8      	ldr	r1, [pc, #736]	; (8000b5c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fabb 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000882:	49b8      	ldr	r1, [pc, #736]	; (8000b64 <OTM8009A_Init+0x314>)
 8000884:	2000      	movs	r0, #0
 8000886:	f001 fab7 	bl	8001df8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f000 fc94 	bl	80011b8 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000890:	49b5      	ldr	r1, [pc, #724]	; (8000b68 <OTM8009A_Init+0x318>)
 8000892:	2000      	movs	r0, #0
 8000894:	f001 fab0 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000898:	49b4      	ldr	r1, [pc, #720]	; (8000b6c <OTM8009A_Init+0x31c>)
 800089a:	2000      	movs	r0, #0
 800089c:	f001 faac 	bl	8001df8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fc89 	bl	80011b8 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008a6:	49b2      	ldr	r1, [pc, #712]	; (8000b70 <OTM8009A_Init+0x320>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 faa5 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008ae:	49b1      	ldr	r1, [pc, #708]	; (8000b74 <OTM8009A_Init+0x324>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 faa1 	bl	8001df8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008b6:	49b0      	ldr	r1, [pc, #704]	; (8000b78 <OTM8009A_Init+0x328>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fa9d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008be:	49af      	ldr	r1, [pc, #700]	; (8000b7c <OTM8009A_Init+0x32c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fa99 	bl	8001df8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008c6:	49ae      	ldr	r1, [pc, #696]	; (8000b80 <OTM8009A_Init+0x330>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fa95 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008ce:	49ad      	ldr	r1, [pc, #692]	; (8000b84 <OTM8009A_Init+0x334>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fa91 	bl	8001df8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008d6:	499f      	ldr	r1, [pc, #636]	; (8000b54 <OTM8009A_Init+0x304>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fa8d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008de:	49aa      	ldr	r1, [pc, #680]	; (8000b88 <OTM8009A_Init+0x338>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 fa89 	bl	8001df8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008e6:	49a9      	ldr	r1, [pc, #676]	; (8000b8c <OTM8009A_Init+0x33c>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fa85 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008ee:	49a8      	ldr	r1, [pc, #672]	; (8000b90 <OTM8009A_Init+0x340>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fa81 	bl	8001df8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008f6:	49a7      	ldr	r1, [pc, #668]	; (8000b94 <OTM8009A_Init+0x344>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa7d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80008fe:	49a6      	ldr	r1, [pc, #664]	; (8000b98 <OTM8009A_Init+0x348>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa79 	bl	8001df8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000906:	49a5      	ldr	r1, [pc, #660]	; (8000b9c <OTM8009A_Init+0x34c>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa75 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800090e:	49a4      	ldr	r1, [pc, #656]	; (8000ba0 <OTM8009A_Init+0x350>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa71 	bl	8001df8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000916:	49a3      	ldr	r1, [pc, #652]	; (8000ba4 <OTM8009A_Init+0x354>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa6d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800091e:	4997      	ldr	r1, [pc, #604]	; (8000b7c <OTM8009A_Init+0x32c>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa69 	bl	8001df8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000926:	498b      	ldr	r1, [pc, #556]	; (8000b54 <OTM8009A_Init+0x304>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa65 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800092e:	499e      	ldr	r1, [pc, #632]	; (8000ba8 <OTM8009A_Init+0x358>)
 8000930:	2002      	movs	r0, #2
 8000932:	f001 fa61 	bl	8001df8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000936:	499d      	ldr	r1, [pc, #628]	; (8000bac <OTM8009A_Init+0x35c>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa5d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800093e:	499c      	ldr	r1, [pc, #624]	; (8000bb0 <OTM8009A_Init+0x360>)
 8000940:	2000      	movs	r0, #0
 8000942:	f001 fa59 	bl	8001df8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000946:	499b      	ldr	r1, [pc, #620]	; (8000bb4 <OTM8009A_Init+0x364>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa55 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800094e:	499a      	ldr	r1, [pc, #616]	; (8000bb8 <OTM8009A_Init+0x368>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa51 	bl	8001df8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000956:	4999      	ldr	r1, [pc, #612]	; (8000bbc <OTM8009A_Init+0x36c>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa4d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800095e:	4998      	ldr	r1, [pc, #608]	; (8000bc0 <OTM8009A_Init+0x370>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa49 	bl	8001df8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000966:	4989      	ldr	r1, [pc, #548]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa45 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800096e:	4995      	ldr	r1, [pc, #596]	; (8000bc4 <OTM8009A_Init+0x374>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa41 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000976:	4987      	ldr	r1, [pc, #540]	; (8000b94 <OTM8009A_Init+0x344>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fa3d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800097e:	4992      	ldr	r1, [pc, #584]	; (8000bc8 <OTM8009A_Init+0x378>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa39 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000986:	4991      	ldr	r1, [pc, #580]	; (8000bcc <OTM8009A_Init+0x37c>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa35 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800098e:	4990      	ldr	r1, [pc, #576]	; (8000bd0 <OTM8009A_Init+0x380>)
 8000990:	2002      	movs	r0, #2
 8000992:	f001 fa31 	bl	8001df8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000996:	4971      	ldr	r1, [pc, #452]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa2d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800099e:	498d      	ldr	r1, [pc, #564]	; (8000bd4 <OTM8009A_Init+0x384>)
 80009a0:	2006      	movs	r0, #6
 80009a2:	f001 fa29 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009a6:	498c      	ldr	r1, [pc, #560]	; (8000bd8 <OTM8009A_Init+0x388>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa25 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009ae:	498b      	ldr	r1, [pc, #556]	; (8000bdc <OTM8009A_Init+0x38c>)
 80009b0:	200e      	movs	r0, #14
 80009b2:	f001 fa21 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009b6:	498a      	ldr	r1, [pc, #552]	; (8000be0 <OTM8009A_Init+0x390>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa1d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009be:	4989      	ldr	r1, [pc, #548]	; (8000be4 <OTM8009A_Init+0x394>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa19 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009c6:	4988      	ldr	r1, [pc, #544]	; (8000be8 <OTM8009A_Init+0x398>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fa15 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009ce:	4987      	ldr	r1, [pc, #540]	; (8000bec <OTM8009A_Init+0x39c>)
 80009d0:	200a      	movs	r0, #10
 80009d2:	f001 fa11 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009d6:	4986      	ldr	r1, [pc, #536]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa0d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009de:	4985      	ldr	r1, [pc, #532]	; (8000bf4 <OTM8009A_Init+0x3a4>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fa09 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009e6:	495d      	ldr	r1, [pc, #372]	; (8000b5c <OTM8009A_Init+0x30c>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fa05 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009ee:	4982      	ldr	r1, [pc, #520]	; (8000bf8 <OTM8009A_Init+0x3a8>)
 80009f0:	200a      	movs	r0, #10
 80009f2:	f001 fa01 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009f6:	4981      	ldr	r1, [pc, #516]	; (8000bfc <OTM8009A_Init+0x3ac>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f9fd 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80009fe:	4980      	ldr	r1, [pc, #512]	; (8000c00 <OTM8009A_Init+0x3b0>)
 8000a00:	200f      	movs	r0, #15
 8000a02:	f001 f9f9 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a06:	4974      	ldr	r1, [pc, #464]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 f9f5 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <OTM8009A_Init+0x3b4>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 f9f1 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a16:	4972      	ldr	r1, [pc, #456]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f9ed 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a1e:	497a      	ldr	r1, [pc, #488]	; (8000c08 <OTM8009A_Init+0x3b8>)
 8000a20:	200a      	movs	r0, #10
 8000a22:	f001 f9e9 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a26:	4970      	ldr	r1, [pc, #448]	; (8000be8 <OTM8009A_Init+0x398>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f9e5 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a2e:	4977      	ldr	r1, [pc, #476]	; (8000c0c <OTM8009A_Init+0x3bc>)
 8000a30:	200f      	movs	r0, #15
 8000a32:	f001 f9e1 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a36:	496e      	ldr	r1, [pc, #440]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f9dd 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a3e:	4974      	ldr	r1, [pc, #464]	; (8000c10 <OTM8009A_Init+0x3c0>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f9d9 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a46:	4973      	ldr	r1, [pc, #460]	; (8000c14 <OTM8009A_Init+0x3c4>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f9d5 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a4e:	4972      	ldr	r1, [pc, #456]	; (8000c18 <OTM8009A_Init+0x3c8>)
 8000a50:	200a      	movs	r0, #10
 8000a52:	f001 f9d1 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a56:	4971      	ldr	r1, [pc, #452]	; (8000c1c <OTM8009A_Init+0x3cc>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f9cd 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a5e:	4970      	ldr	r1, [pc, #448]	; (8000c20 <OTM8009A_Init+0x3d0>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f9c9 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a66:	493d      	ldr	r1, [pc, #244]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f9c5 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a6e:	496d      	ldr	r1, [pc, #436]	; (8000c24 <OTM8009A_Init+0x3d4>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f9c1 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a76:	4961      	ldr	r1, [pc, #388]	; (8000bfc <OTM8009A_Init+0x3ac>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f9bd 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a7e:	496a      	ldr	r1, [pc, #424]	; (8000c28 <OTM8009A_Init+0x3d8>)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f001 f9b9 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a86:	4954      	ldr	r1, [pc, #336]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f9b5 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a8e:	4967      	ldr	r1, [pc, #412]	; (8000c2c <OTM8009A_Init+0x3dc>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f9b1 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a96:	4952      	ldr	r1, [pc, #328]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f9ad 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000a9e:	4964      	ldr	r1, [pc, #400]	; (8000c30 <OTM8009A_Init+0x3e0>)
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f001 f9a9 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000aa6:	4950      	ldr	r1, [pc, #320]	; (8000be8 <OTM8009A_Init+0x398>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f9a5 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000aae:	4961      	ldr	r1, [pc, #388]	; (8000c34 <OTM8009A_Init+0x3e4>)
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f001 f9a1 	bl	8001df8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ab6:	494e      	ldr	r1, [pc, #312]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f99d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000abe:	495e      	ldr	r1, [pc, #376]	; (8000c38 <OTM8009A_Init+0x3e8>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f999 	bl	8001df8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ac6:	4931      	ldr	r1, [pc, #196]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f995 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ace:	495b      	ldr	r1, [pc, #364]	; (8000c3c <OTM8009A_Init+0x3ec>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f001 f991 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ad6:	495a      	ldr	r1, [pc, #360]	; (8000c40 <OTM8009A_Init+0x3f0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f98d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000ade:	4959      	ldr	r1, [pc, #356]	; (8000c44 <OTM8009A_Init+0x3f4>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f989 	bl	8001df8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000ae6:	4958      	ldr	r1, [pc, #352]	; (8000c48 <OTM8009A_Init+0x3f8>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f985 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000aee:	4957      	ldr	r1, [pc, #348]	; (8000c4c <OTM8009A_Init+0x3fc>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f981 	bl	8001df8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000af6:	4917      	ldr	r1, [pc, #92]	; (8000b54 <OTM8009A_Init+0x304>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f97d 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000afe:	4954      	ldr	r1, [pc, #336]	; (8000c50 <OTM8009A_Init+0x400>)
 8000b00:	2003      	movs	r0, #3
 8000b02:	f001 f979 	bl	8001df8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4913      	ldr	r1, [pc, #76]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f975 	bl	8001df8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b0e:	4911      	ldr	r1, [pc, #68]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f001 f971 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b16:	494f      	ldr	r1, [pc, #316]	; (8000c54 <OTM8009A_Init+0x404>)
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f001 f96d 	bl	8001df8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f969 	bl	8001df8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b26:	494c      	ldr	r1, [pc, #304]	; (8000c58 <OTM8009A_Init+0x408>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f965 	bl	8001df8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b2e:	494b      	ldr	r1, [pc, #300]	; (8000c5c <OTM8009A_Init+0x40c>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f961 	bl	8001df8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b36:	2078      	movs	r0, #120	; 0x78
 8000b38:	f000 fb3e 	bl	80011b8 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8090 	beq.w	8000c64 <OTM8009A_Init+0x414>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d000      	beq.n	8000b4a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b48:	e091      	b.n	8000c6e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b4a:	4945      	ldr	r1, [pc, #276]	; (8000c60 <OTM8009A_Init+0x410>)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f001 f953 	bl	8001df8 <DSI_IO_WriteCmd>
    break;
 8000b52:	e08c      	b.n	8000c6e <OTM8009A_Init+0x41e>
 8000b54:	0800a2cc 	.word	0x0800a2cc
 8000b58:	0800a184 	.word	0x0800a184
 8000b5c:	0800a2d0 	.word	0x0800a2d0
 8000b60:	0800a188 	.word	0x0800a188
 8000b64:	0800a2d4 	.word	0x0800a2d4
 8000b68:	0800a2d8 	.word	0x0800a2d8
 8000b6c:	0800a2dc 	.word	0x0800a2dc
 8000b70:	0800a2e0 	.word	0x0800a2e0
 8000b74:	0800a2e4 	.word	0x0800a2e4
 8000b78:	0800a2e8 	.word	0x0800a2e8
 8000b7c:	0800a2ec 	.word	0x0800a2ec
 8000b80:	0800a2f0 	.word	0x0800a2f0
 8000b84:	0800a2f4 	.word	0x0800a2f4
 8000b88:	0800a2f8 	.word	0x0800a2f8
 8000b8c:	0800a2fc 	.word	0x0800a2fc
 8000b90:	0800a300 	.word	0x0800a300
 8000b94:	0800a304 	.word	0x0800a304
 8000b98:	0800a308 	.word	0x0800a308
 8000b9c:	0800a30c 	.word	0x0800a30c
 8000ba0:	0800a310 	.word	0x0800a310
 8000ba4:	0800a314 	.word	0x0800a314
 8000ba8:	0800a1b4 	.word	0x0800a1b4
 8000bac:	0800a318 	.word	0x0800a318
 8000bb0:	0800a31c 	.word	0x0800a31c
 8000bb4:	0800a320 	.word	0x0800a320
 8000bb8:	0800a324 	.word	0x0800a324
 8000bbc:	0800a328 	.word	0x0800a328
 8000bc0:	0800a32c 	.word	0x0800a32c
 8000bc4:	0800a330 	.word	0x0800a330
 8000bc8:	0800a334 	.word	0x0800a334
 8000bcc:	0800a338 	.word	0x0800a338
 8000bd0:	0800a1b8 	.word	0x0800a1b8
 8000bd4:	0800a1bc 	.word	0x0800a1bc
 8000bd8:	0800a33c 	.word	0x0800a33c
 8000bdc:	0800a1c4 	.word	0x0800a1c4
 8000be0:	0800a340 	.word	0x0800a340
 8000be4:	0800a1d4 	.word	0x0800a1d4
 8000be8:	0800a344 	.word	0x0800a344
 8000bec:	0800a1e4 	.word	0x0800a1e4
 8000bf0:	0800a348 	.word	0x0800a348
 8000bf4:	0800a380 	.word	0x0800a380
 8000bf8:	0800a1f0 	.word	0x0800a1f0
 8000bfc:	0800a34c 	.word	0x0800a34c
 8000c00:	0800a1fc 	.word	0x0800a1fc
 8000c04:	0800a20c 	.word	0x0800a20c
 8000c08:	0800a21c 	.word	0x0800a21c
 8000c0c:	0800a228 	.word	0x0800a228
 8000c10:	0800a238 	.word	0x0800a238
 8000c14:	0800a350 	.word	0x0800a350
 8000c18:	0800a248 	.word	0x0800a248
 8000c1c:	0800a354 	.word	0x0800a354
 8000c20:	0800a254 	.word	0x0800a254
 8000c24:	0800a260 	.word	0x0800a260
 8000c28:	0800a26c 	.word	0x0800a26c
 8000c2c:	0800a27c 	.word	0x0800a27c
 8000c30:	0800a28c 	.word	0x0800a28c
 8000c34:	0800a298 	.word	0x0800a298
 8000c38:	0800a2a8 	.word	0x0800a2a8
 8000c3c:	0800a384 	.word	0x0800a384
 8000c40:	0800a388 	.word	0x0800a388
 8000c44:	0800a38c 	.word	0x0800a38c
 8000c48:	0800a390 	.word	0x0800a390
 8000c4c:	0800a394 	.word	0x0800a394
 8000c50:	0800a2b8 	.word	0x0800a2b8
 8000c54:	0800a18c 	.word	0x0800a18c
 8000c58:	0800a1a0 	.word	0x0800a1a0
 8000c5c:	0800a358 	.word	0x0800a358
 8000c60:	0800a35c 	.word	0x0800a35c
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c64:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <OTM8009A_Init+0x480>)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f001 f8c6 	bl	8001df8 <DSI_IO_WriteCmd>
    break;
 8000c6c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10b      	bne.n	8000c8c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c74:	4917      	ldr	r1, [pc, #92]	; (8000cd4 <OTM8009A_Init+0x484>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f8be 	bl	8001df8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c7c:	4916      	ldr	r1, [pc, #88]	; (8000cd8 <OTM8009A_Init+0x488>)
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f001 f8ba 	bl	8001df8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <OTM8009A_Init+0x48c>)
 8000c86:	2004      	movs	r0, #4
 8000c88:	f001 f8b6 	bl	8001df8 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c8c:	4914      	ldr	r1, [pc, #80]	; (8000ce0 <OTM8009A_Init+0x490>)
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 f8b2 	bl	8001df8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <OTM8009A_Init+0x494>)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f001 f8ae 	bl	8001df8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000c9c:	4912      	ldr	r1, [pc, #72]	; (8000ce8 <OTM8009A_Init+0x498>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f8aa 	bl	8001df8 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000ca4:	4911      	ldr	r1, [pc, #68]	; (8000cec <OTM8009A_Init+0x49c>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f8a6 	bl	8001df8 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cac:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <OTM8009A_Init+0x4a0>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f8a2 	bl	8001df8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cb4:	490f      	ldr	r1, [pc, #60]	; (8000cf4 <OTM8009A_Init+0x4a4>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f89e 	bl	8001df8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <OTM8009A_Init+0x4a8>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f89a 	bl	8001df8 <DSI_IO_WriteCmd>

  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	0800a360 	.word	0x0800a360
 8000cd4:	0800a364 	.word	0x0800a364
 8000cd8:	0800a2bc 	.word	0x0800a2bc
 8000cdc:	0800a2c4 	.word	0x0800a2c4
 8000ce0:	0800a368 	.word	0x0800a368
 8000ce4:	0800a36c 	.word	0x0800a36c
 8000ce8:	0800a370 	.word	0x0800a370
 8000cec:	0800a374 	.word	0x0800a374
 8000cf0:	0800a378 	.word	0x0800a378
 8000cf4:	0800a2cc 	.word	0x0800a2cc
 8000cf8:	0800a37c 	.word	0x0800a37c

08000cfc <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <BSP_LED_Init+0x58>)
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <BSP_LED_Init+0x5c>)
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	f107 020c 	add.w	r2, r7, #12
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f004 f930 	bl	8004fa8 <HAL_GPIO_Init>

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	20000028 	.word	0x20000028
 8000d58:	20000030 	.word	0x20000030

08000d5c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <BSP_PB_Init+0x9c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <BSP_PB_Init+0x9c>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <BSP_PB_Init+0x9c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d111      	bne.n	8000dae <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <BSP_PB_Init+0xa0>)
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	f107 020c 	add.w	r2, r7, #12
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 f8fd 	bl	8004fa8 <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d11d      	bne.n	8000df0 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000db4:	2301      	movs	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <BSP_PB_Init+0xa4>)
 8000dc2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <BSP_PB_Init+0xa0>)
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	f107 020c 	add.w	r2, r7, #12
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f8e8 	bl	8004fa8 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000dd8:	2306      	movs	r3, #6
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	210f      	movs	r1, #15
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fbd6 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000de6:	2306      	movs	r3, #6
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 fbed 	bl	80035ca <HAL_NVIC_EnableIRQ>
  }
}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	20000038 	.word	0x20000038
 8000e00:	10110000 	.word	0x10110000

08000e04 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <BSP_PB_GetState+0x28>)
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 fb78 	bl	8005510 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000038 	.word	0x20000038

08000e30 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <I2Cx_MspInit+0x16c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d15b      	bne.n	8000ef8 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e40:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a56      	ldr	r2, [pc, #344]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e58:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b4e      	ldr	r3, [pc, #312]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e76:	2312      	movs	r3, #18
 8000e78:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000e82:	2304      	movs	r3, #4
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4845      	ldr	r0, [pc, #276]	; (8000fa4 <I2Cx_MspInit+0x174>)
 8000e8e:	f004 f88b 	bl	8004fa8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000e96:	230b      	movs	r3, #11
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4841      	ldr	r0, [pc, #260]	; (8000fa8 <I2Cx_MspInit+0x178>)
 8000ea2:	f004 f881 	bl	8004fa8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000ea6:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a3d      	ldr	r2, [pc, #244]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000eac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4a37      	ldr	r2, [pc, #220]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ec8:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	4a34      	ldr	r2, [pc, #208]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ed4:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	210f      	movs	r1, #15
 8000eda:	205f      	movs	r0, #95	; 0x5f
 8000edc:	f002 fb59 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000ee0:	205f      	movs	r0, #95	; 0x5f
 8000ee2:	f002 fb72 	bl	80035ca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	210f      	movs	r1, #15
 8000eea:	2060      	movs	r0, #96	; 0x60
 8000eec:	f002 fb51 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000ef0:	2060      	movs	r0, #96	; 0x60
 8000ef2:	f002 fb6a 	bl	80035ca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000ef6:	e04d      	b.n	8000f94 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
 8000f04:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f14:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f16:	2312      	movs	r3, #18
 8000f18:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f22:	2304      	movs	r3, #4
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <I2Cx_MspInit+0x178>)
 8000f2e:	f004 f83b 	bl	8004fa8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <I2Cx_MspInit+0x178>)
 8000f40:	f004 f832 	bl	8004fa8 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f66:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <I2Cx_MspInit+0x170>)
 8000f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f72:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	210f      	movs	r1, #15
 8000f78:	201f      	movs	r0, #31
 8000f7a:	f002 fb0a 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000f7e:	201f      	movs	r0, #31
 8000f80:	f002 fb23 	bl	80035ca <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	210f      	movs	r1, #15
 8000f88:	2020      	movs	r0, #32
 8000f8a:	f002 fb02 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000f8e:	2020      	movs	r0, #32
 8000f90:	f002 fb1b 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 8000f94:	bf00      	nop
 8000f96:	3730      	adds	r7, #48	; 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000130 	.word	0x20000130
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40020400 	.word	0x40020400

08000fac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f004 fdf7 	bl	8005ba8 <HAL_I2C_GetState>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d125      	bne.n	800100c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a14      	ldr	r2, [pc, #80]	; (8001014 <I2Cx_Init+0x68>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d103      	bne.n	8000fd0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <I2Cx_Init+0x6c>)
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e002      	b.n	8000fd6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <I2Cx_Init+0x70>)
 8000fd4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a11      	ldr	r2, [pc, #68]	; (8001020 <I2Cx_Init+0x74>)
 8000fda:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff15 	bl	8000e30 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f004 facc 	bl	80055a4 <HAL_I2C_Init>
  }
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000130 	.word	0x20000130
 8001018:	40006000 	.word	0x40006000
 800101c:	40005400 	.word	0x40005400
 8001020:	40912732 	.word	0x40912732

08001024 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af04      	add	r7, sp, #16
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	4608      	mov	r0, r1
 800102e:	4611      	mov	r1, r2
 8001030:	461a      	mov	r2, r3
 8001032:	4603      	mov	r3, r0
 8001034:	72fb      	strb	r3, [r7, #11]
 8001036:	460b      	mov	r3, r1
 8001038:	813b      	strh	r3, [r7, #8]
 800103a:	4613      	mov	r3, r2
 800103c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001042:	7afb      	ldrb	r3, [r7, #11]
 8001044:	b299      	uxth	r1, r3
 8001046:	88f8      	ldrh	r0, [r7, #6]
 8001048:	893a      	ldrh	r2, [r7, #8]
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	4603      	mov	r3, r0
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f004 fc8a 	bl	8005974 <HAL_I2C_Mem_Read>
 8001060:	4603      	mov	r3, r0
 8001062:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	4619      	mov	r1, r3
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f832 	bl	80010d8 <I2Cx_Error>
  }
  return status;
 8001074:	7dfb      	ldrb	r3, [r7, #23]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b08a      	sub	sp, #40	; 0x28
 8001082:	af04      	add	r7, sp, #16
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	4608      	mov	r0, r1
 8001088:	4611      	mov	r1, r2
 800108a:	461a      	mov	r2, r3
 800108c:	4603      	mov	r3, r0
 800108e:	72fb      	strb	r3, [r7, #11]
 8001090:	460b      	mov	r3, r1
 8001092:	813b      	strh	r3, [r7, #8]
 8001094:	4613      	mov	r3, r2
 8001096:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800109c:	7afb      	ldrb	r3, [r7, #11]
 800109e:	b299      	uxth	r1, r3
 80010a0:	88f8      	ldrh	r0, [r7, #6]
 80010a2:	893a      	ldrh	r2, [r7, #8]
 80010a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a8:	9302      	str	r3, [sp, #8]
 80010aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	4603      	mov	r3, r0
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f004 fb49 	bl	800574c <HAL_I2C_Mem_Write>
 80010ba:	4603      	mov	r3, r0
 80010bc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	4619      	mov	r1, r3
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f805 	bl	80010d8 <I2Cx_Error>
  }
  return status;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f004 faed 	bl	80056c4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff5e 	bl	8000fac <I2Cx_Init>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <TS_IO_Init+0x10>)
 80010fe:	f7ff ff55 	bl	8000fac <I2Cx_Init>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000130 	.word	0x20000130

0800110c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af02      	add	r7, sp, #8
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	460b      	mov	r3, r1
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	4613      	mov	r3, r2
 800111c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	b29a      	uxth	r2, r3
 8001122:	79f9      	ldrb	r1, [r7, #7]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	1d7b      	adds	r3, r7, #5
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <TS_IO_Write+0x30>)
 8001130:	f7ff ffa5 	bl	800107e <I2Cx_WriteMultiple>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000130 	.word	0x20000130

08001140 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af02      	add	r7, sp, #8
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	b29a      	uxth	r2, r3
 8001158:	79f9      	ldrb	r1, [r7, #7]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <TS_IO_Read+0x38>)
 8001168:	f7ff ff5c 	bl	8001024 <I2Cx_ReadMultiple>

  return read_value;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000130 	.word	0x20000130

0800117c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af02      	add	r7, sp, #8
 8001182:	603a      	str	r2, [r7, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	460b      	mov	r3, r1
 800118c:	71bb      	strb	r3, [r7, #6]
 800118e:	4613      	mov	r3, r2
 8001190:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	b29a      	uxth	r2, r3
 8001196:	79f9      	ldrb	r1, [r7, #7]
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	4804      	ldr	r0, [pc, #16]	; (80011b4 <TS_IO_ReadMultiple+0x38>)
 80011a4:	f7ff ff3e 	bl	8001024 <I2Cx_ReadMultiple>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b29b      	uxth	r3, r3
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000130 	.word	0x20000130

080011b8 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f001 fbbd 	bl	8002940 <HAL_Delay>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 f804 	bl	80011e0 <BSP_LCD_InitEx>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b090      	sub	sp, #64	; 0x40
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80011ea:	f646 3325 	movw	r3, #27429	; 0x6b25
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80011f8:	f000 f936 	bl	8001468 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80011fc:	f000 fe26 	bl	8001e4c <LCD_IO_GetID>
 8001200:	4603      	mov	r3, r0
 8001202:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001204:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001206:	2b11      	cmp	r3, #17
 8001208:	d001      	beq.n	800120e <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 800120a:	2301      	movs	r3, #1
 800120c:	e113      	b.n	8001436 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800120e:	f000 fe25 	bl	8001e5c <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001212:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <BSP_LCD_InitEx+0x260>)
 8001214:	4a8b      	ldr	r2, [pc, #556]	; (8001444 <BSP_LCD_InitEx+0x264>)
 8001216:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001218:	4889      	ldr	r0, [pc, #548]	; (8001440 <BSP_LCD_InitEx+0x260>)
 800121a:	f002 ffb7 	bl	800418c <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001222:	2305      	movs	r3, #5
 8001224:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800122a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800122e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001230:	4b83      	ldr	r3, [pc, #524]	; (8001440 <BSP_LCD_InitEx+0x260>)
 8001232:	2201      	movs	r2, #1
 8001234:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	4a83      	ldr	r2, [pc, #524]	; (8001448 <BSP_LCD_InitEx+0x268>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0a9b      	lsrs	r3, r3, #10
 8001242:	4a7f      	ldr	r2, [pc, #508]	; (8001440 <BSP_LCD_InitEx+0x260>)
 8001244:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4619      	mov	r1, r3
 800124c:	487c      	ldr	r0, [pc, #496]	; (8001440 <BSP_LCD_InitEx+0x260>)
 800124e:	f002 fe83 	bl	8003f58 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d108      	bne.n	800126a <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001258:	4b7c      	ldr	r3, [pc, #496]	; (800144c <BSP_LCD_InitEx+0x26c>)
 800125a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800125e:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001260:	4b7b      	ldr	r3, [pc, #492]	; (8001450 <BSP_LCD_InitEx+0x270>)
 8001262:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e007      	b.n	800127a <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800126a:	4b78      	ldr	r3, [pc, #480]	; (800144c <BSP_LCD_InitEx+0x26c>)
 800126c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001270:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001272:	4b77      	ldr	r3, [pc, #476]	; (8001450 <BSP_LCD_InitEx+0x270>)
 8001274:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001278:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 800127a:	4b74      	ldr	r3, [pc, #464]	; (800144c <BSP_LCD_InitEx+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8001280:	4b73      	ldr	r3, [pc, #460]	; (8001450 <BSP_LCD_InitEx+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8001286:	2301      	movs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 800128a:	230f      	movs	r3, #15
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800128e:	2310      	movs	r3, #16
 8001290:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8001292:	2302      	movs	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001296:	2322      	movs	r3, #34	; 0x22
 8001298:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 800129a:	2322      	movs	r3, #34	; 0x22
 800129c:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800129e:	4b6d      	ldr	r3, [pc, #436]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80012a4:	4b6b      	ldr	r3, [pc, #428]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012a6:	2205      	movs	r2, #5
 80012a8:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80012aa:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80012bc:	4b65      	ldr	r3, [pc, #404]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012be:	2202      	movs	r2, #2
 80012c0:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80012c2:	4b64      	ldr	r3, [pc, #400]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012c4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012c8:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80012ca:	4b62      	ldr	r3, [pc, #392]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80012d0:	4a60      	ldr	r2, [pc, #384]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012da:	fb02 f203 	mul.w	r2, r2, r3
 80012de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e4:	4a5b      	ldr	r2, [pc, #364]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012e6:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ec:	fb02 f203 	mul.w	r2, r2, r3
 80012f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4a57      	ldr	r2, [pc, #348]	; (8001454 <BSP_LCD_InitEx+0x274>)
 80012f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80012fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	441a      	add	r2, r3
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	441a      	add	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	4413      	add	r3, r2
 8001308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800130a:	fb02 f203 	mul.w	r2, r2, r3
 800130e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <BSP_LCD_InitEx+0x274>)
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001318:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <BSP_LCD_InitEx+0x274>)
 800131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131c:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800131e:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <BSP_LCD_InitEx+0x274>)
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <BSP_LCD_InitEx+0x274>)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800132a:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <BSP_LCD_InitEx+0x274>)
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001330:	4b48      	ldr	r3, [pc, #288]	; (8001454 <BSP_LCD_InitEx+0x274>)
 8001332:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001336:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <BSP_LCD_InitEx+0x274>)
 800133a:	2210      	movs	r2, #16
 800133c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800133e:	4b45      	ldr	r3, [pc, #276]	; (8001454 <BSP_LCD_InitEx+0x274>)
 8001340:	2200      	movs	r2, #0
 8001342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001344:	4b43      	ldr	r3, [pc, #268]	; (8001454 <BSP_LCD_InitEx+0x274>)
 8001346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134a:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 800134c:	4b41      	ldr	r3, [pc, #260]	; (8001454 <BSP_LCD_InitEx+0x274>)
 800134e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001352:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001354:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <BSP_LCD_InitEx+0x274>)
 8001356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800135a:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 800135c:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <BSP_LCD_InitEx+0x274>)
 800135e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001362:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001364:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <BSP_LCD_InitEx+0x274>)
 8001366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136a:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <BSP_LCD_InitEx+0x274>)
 800136e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001372:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001374:	4937      	ldr	r1, [pc, #220]	; (8001454 <BSP_LCD_InitEx+0x274>)
 8001376:	4832      	ldr	r0, [pc, #200]	; (8001440 <BSP_LCD_InitEx+0x260>)
 8001378:	f003 f860 	bl	800443c <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	3b01      	subs	r3, #1
 8001380:	4a35      	ldr	r2, [pc, #212]	; (8001458 <BSP_LCD_InitEx+0x278>)
 8001382:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4413      	add	r3, r2
 800138a:	3b01      	subs	r3, #1
 800138c:	4a32      	ldr	r2, [pc, #200]	; (8001458 <BSP_LCD_InitEx+0x278>)
 800138e:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <BSP_LCD_InitEx+0x26c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	441a      	add	r2, r3
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	4413      	add	r3, r2
 800139c:	3b01      	subs	r3, #1
 800139e:	4a2e      	ldr	r2, [pc, #184]	; (8001458 <BSP_LCD_InitEx+0x278>)
 80013a0:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <BSP_LCD_InitEx+0x26c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	441a      	add	r2, r3
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	441a      	add	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	4413      	add	r3, r2
 80013b2:	3b01      	subs	r3, #1
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <BSP_LCD_InitEx+0x278>)
 80013b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <BSP_LCD_InitEx+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a26      	ldr	r2, [pc, #152]	; (8001458 <BSP_LCD_InitEx+0x278>)
 80013be:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <BSP_LCD_InitEx+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a24      	ldr	r2, [pc, #144]	; (8001458 <BSP_LCD_InitEx+0x278>)
 80013c6:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <BSP_LCD_InitEx+0x27c>)
 80013ca:	2208      	movs	r2, #8
 80013cc:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <BSP_LCD_InitEx+0x27c>)
 80013d0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013d4:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <BSP_LCD_InitEx+0x27c>)
 80013d8:	2207      	movs	r2, #7
 80013da:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <BSP_LCD_InitEx+0x27c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80013e2:	481e      	ldr	r0, [pc, #120]	; (800145c <BSP_LCD_InitEx+0x27c>)
 80013e4:	f005 fd5e 	bl	8006ea4 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <BSP_LCD_InitEx+0x278>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <BSP_LCD_InitEx+0x278>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <BSP_LCD_InitEx+0x278>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <BSP_LCD_InitEx+0x278>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <BSP_LCD_InitEx+0x278>)
 8001408:	4a15      	ldr	r2, [pc, #84]	; (8001460 <BSP_LCD_InitEx+0x280>)
 800140a:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 800140c:	4911      	ldr	r1, [pc, #68]	; (8001454 <BSP_LCD_InitEx+0x274>)
 800140e:	4812      	ldr	r0, [pc, #72]	; (8001458 <BSP_LCD_InitEx+0x278>)
 8001410:	f005 f89c 	bl	800654c <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001414:	4810      	ldr	r0, [pc, #64]	; (8001458 <BSP_LCD_InitEx+0x278>)
 8001416:	f004 fdf1 	bl	8005ffc <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <BSP_LCD_InitEx+0x260>)
 800141c:	f003 fca0 	bl	8004d60 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001420:	f000 fe9c 	bl	800215c <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001424:	480f      	ldr	r0, [pc, #60]	; (8001464 <BSP_LCD_InitEx+0x284>)
 8001426:	f000 f901 	bl	800162c <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4619      	mov	r1, r3
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff fa0e 	bl	8000850 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3740      	adds	r7, #64	; 0x40
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000045c 	.word	0x2000045c
 8001444:	40016c00 	.word	0x40016c00
 8001448:	43215e57 	.word	0x43215e57
 800144c:	2000004c 	.word	0x2000004c
 8001450:	20000050 	.word	0x20000050
 8001454:	2000017c 	.word	0x2000017c
 8001458:	200003b4 	.word	0x200003b4
 800145c:	20000204 	.word	0x20000204
 8001460:	40016800 	.word	0x40016800
 8001464:	2000003c 	.word	0x2000003c

08001468 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <BSP_LCD_Reset+0x68>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <BSP_LCD_Reset+0x68>)
 8001474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <BSP_LCD_Reset+0x68>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800148a:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001490:	2301      	movs	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <BSP_LCD_Reset+0x6c>)
 800149e:	f003 fd83 	bl	8004fa8 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <BSP_LCD_Reset+0x6c>)
 80014aa:	f004 f849 	bl	8005540 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80014ae:	2014      	movs	r0, #20
 80014b0:	f001 fa46 	bl	8002940 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <BSP_LCD_Reset+0x6c>)
 80014bc:	f004 f840 	bl	8005540 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f001 fa3d 	bl	8002940 <HAL_Delay>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40022400 	.word	0x40022400

080014d8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <BSP_LCD_GetXSize+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000004c 	.word	0x2000004c

080014f0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <BSP_LCD_GetYSize+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000050 	.word	0x20000050

08001508 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b090      	sub	sp, #64	; 0x40
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001518:	f7ff ffde 	bl	80014d8 <BSP_LCD_GetXSize>
 800151c:	4603      	mov	r3, r0
 800151e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001524:	f7ff ffe4 	bl	80014f0 <BSP_LCD_GetYSize>
 8001528:	4603      	mov	r3, r0
 800152a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001534:	23ff      	movs	r3, #255	; 0xff
 8001536:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800154e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001554:	2307      	movs	r3, #7
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001558:	f7ff ffbe 	bl	80014d8 <BSP_LCD_GetXSize>
 800155c:	4603      	mov	r3, r0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001560:	f7ff ffc6 	bl	80014f0 <BSP_LCD_GetYSize>
 8001564:	4603      	mov	r3, r0
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4619      	mov	r1, r3
 8001570:	4812      	ldr	r0, [pc, #72]	; (80015bc <BSP_LCD_LayerDefaultInit+0xb4>)
 8001572:	f004 fe13 	bl	800619c <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	4911      	ldr	r1, [pc, #68]	; (80015c0 <BSP_LCD_LayerDefaultInit+0xb8>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	f04f 32ff 	mov.w	r2, #4294967295
 800158a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800158c:	88fa      	ldrh	r2, [r7, #6]
 800158e:	490c      	ldr	r1, [pc, #48]	; (80015c0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3308      	adds	r3, #8
 800159c:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <BSP_LCD_LayerDefaultInit+0xbc>)
 800159e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80015a0:	88fa      	ldrh	r2, [r7, #6]
 80015a2:	4907      	ldr	r1, [pc, #28]	; (80015c0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	3740      	adds	r7, #64	; 0x40
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200003b4 	.word	0x200003b4
 80015c0:	200001ec 	.word	0x200001ec
 80015c4:	2000003c 	.word	0x2000003c

080015c8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <BSP_LCD_SetTextColor+0x28>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <BSP_LCD_SetTextColor+0x2c>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	200001e8 	.word	0x200001e8
 80015f4:	200001ec 	.word	0x200001ec

080015f8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <BSP_LCD_SetBackColor+0x2c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4908      	ldr	r1, [pc, #32]	; (8001628 <BSP_LCD_SetBackColor+0x30>)
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3304      	adds	r3, #4
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200001e8 	.word	0x200001e8
 8001628:	200001ec 	.word	0x200001ec

0800162c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <BSP_LCD_SetFont+0x2c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <BSP_LCD_SetFont+0x30>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	3308      	adds	r3, #8
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	200001e8 	.word	0x200001e8
 800165c:	200001ec 	.word	0x200001ec

08001660 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	b085      	sub	sp, #20
 8001664:	af02      	add	r7, sp, #8
 8001666:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <BSP_LCD_Clear+0x48>)
 800166a:	681c      	ldr	r4, [r3, #0]
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <BSP_LCD_Clear+0x48>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <BSP_LCD_Clear+0x4c>)
 8001672:	2134      	movs	r1, #52	; 0x34
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	4413      	add	r3, r2
 800167a:	335c      	adds	r3, #92	; 0x5c
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461d      	mov	r5, r3
 8001680:	f7ff ff2a 	bl	80014d8 <BSP_LCD_GetXSize>
 8001684:	4606      	mov	r6, r0
 8001686:	f7ff ff33 	bl	80014f0 <BSP_LCD_GetYSize>
 800168a:	4602      	mov	r2, r0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2300      	movs	r3, #0
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	4632      	mov	r2, r6
 8001698:	4629      	mov	r1, r5
 800169a:	4620      	mov	r0, r4
 800169c:	f000 fd26 	bl	80020ec <LL_FillBuffer>
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a8:	200001e8 	.word	0x200001e8
 80016ac:	200003b4 	.word	0x200003b4

080016b0 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
 80016ba:	460b      	mov	r3, r1
 80016bc:	80bb      	strh	r3, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <BSP_LCD_DisplayChar+0x80>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	491b      	ldr	r1, [pc, #108]	; (8001734 <BSP_LCD_DisplayChar+0x84>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	3308      	adds	r3, #8
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <BSP_LCD_DisplayChar+0x80>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4c14      	ldr	r4, [pc, #80]	; (8001734 <BSP_LCD_DisplayChar+0x84>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4423      	add	r3, r4
 80016ee:	3308      	adds	r3, #8
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80016f4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <BSP_LCD_DisplayChar+0x80>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4c0d      	ldr	r4, [pc, #52]	; (8001734 <BSP_LCD_DisplayChar+0x84>)
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4423      	add	r3, r4
 8001708:	3308      	adds	r3, #8
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	889b      	ldrh	r3, [r3, #4]
 800170e:	3307      	adds	r3, #7
 8001710:	2b00      	cmp	r3, #0
 8001712:	da00      	bge.n	8001716 <BSP_LCD_DisplayChar+0x66>
 8001714:	3307      	adds	r3, #7
 8001716:	10db      	asrs	r3, r3, #3
 8001718:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800171c:	18ca      	adds	r2, r1, r3
 800171e:	88b9      	ldrh	r1, [r7, #4]
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fc2a 	bl	8001f7c <DrawChar>
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	200001e8 	.word	0x200001e8
 8001734:	200001ec 	.word	0x200001ec

08001738 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	461a      	mov	r2, r3
 8001742:	4603      	mov	r3, r0
 8001744:	81fb      	strh	r3, [r7, #14]
 8001746:	460b      	mov	r3, r1
 8001748:	81bb      	strh	r3, [r7, #12]
 800174a:	4613      	mov	r3, r2
 800174c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800174e:	2301      	movs	r3, #1
 8001750:	83fb      	strh	r3, [r7, #30]
 8001752:	2300      	movs	r3, #0
 8001754:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001762:	e002      	b.n	800176a <BSP_LCD_DisplayStringAt+0x32>
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	3301      	adds	r3, #1
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	617a      	str	r2, [r7, #20]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f6      	bne.n	8001764 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001776:	f7ff feaf 	bl	80014d8 <BSP_LCD_GetXSize>
 800177a:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <BSP_LCD_DisplayStringAt+0x180>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	494f      	ldr	r1, [pc, #316]	; (80018bc <BSP_LCD_DisplayStringAt+0x184>)
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	3308      	adds	r3, #8
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	889b      	ldrh	r3, [r3, #4]
 8001790:	fbb0 f3f3 	udiv	r3, r0, r3
 8001794:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d01c      	beq.n	80017d6 <BSP_LCD_DisplayStringAt+0x9e>
 800179c:	2b03      	cmp	r3, #3
 800179e:	d017      	beq.n	80017d0 <BSP_LCD_DisplayStringAt+0x98>
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d12e      	bne.n	8001802 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad1      	subs	r1, r2, r3
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <BSP_LCD_DisplayStringAt+0x180>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4843      	ldr	r0, [pc, #268]	; (80018bc <BSP_LCD_DisplayStringAt+0x184>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4403      	add	r3, r0
 80017ba:	3308      	adds	r3, #8
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	889b      	ldrh	r3, [r3, #4]
 80017c0:	fb03 f301 	mul.w	r3, r3, r1
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	89fb      	ldrh	r3, [r7, #14]
 80017ca:	4413      	add	r3, r2
 80017cc:	83fb      	strh	r3, [r7, #30]
      break;
 80017ce:	e01b      	b.n	8001808 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80017d0:	89fb      	ldrh	r3, [r7, #14]
 80017d2:	83fb      	strh	r3, [r7, #30]
      break;
 80017d4:	e018      	b.n	8001808 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	b299      	uxth	r1, r3
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <BSP_LCD_DisplayStringAt+0x180>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4836      	ldr	r0, [pc, #216]	; (80018bc <BSP_LCD_DisplayStringAt+0x184>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4403      	add	r3, r0
 80017ee:	3308      	adds	r3, #8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	889b      	ldrh	r3, [r3, #4]
 80017f4:	fb11 f303 	smulbb	r3, r1, r3
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001800:	e002      	b.n	8001808 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	83fb      	strh	r3, [r7, #30]
      break;
 8001806:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001808:	8bfb      	ldrh	r3, [r7, #30]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <BSP_LCD_DisplayStringAt+0xde>
 800180e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001812:	2b00      	cmp	r3, #0
 8001814:	da1d      	bge.n	8001852 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800181a:	e01a      	b.n	8001852 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	89b9      	ldrh	r1, [r7, #12]
 8001822:	8bfb      	ldrh	r3, [r7, #30]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff43 	bl	80016b0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <BSP_LCD_DisplayStringAt+0x180>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4923      	ldr	r1, [pc, #140]	; (80018bc <BSP_LCD_DisplayStringAt+0x184>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3308      	adds	r3, #8
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	889a      	ldrh	r2, [r3, #4]
 8001840:	8bfb      	ldrh	r3, [r7, #30]
 8001842:	4413      	add	r3, r2
 8001844:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3301      	adds	r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
    i++;
 800184c:	8bbb      	ldrh	r3, [r7, #28]
 800184e:	3301      	adds	r3, #1
 8001850:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf14      	ite	ne
 800185a:	2301      	movne	r3, #1
 800185c:	2300      	moveq	r3, #0
 800185e:	b2dc      	uxtb	r4, r3
 8001860:	f7ff fe3a 	bl	80014d8 <BSP_LCD_GetXSize>
 8001864:	4605      	mov	r5, r0
 8001866:	8bb9      	ldrh	r1, [r7, #28]
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <BSP_LCD_DisplayStringAt+0x180>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4813      	ldr	r0, [pc, #76]	; (80018bc <BSP_LCD_DisplayStringAt+0x184>)
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4403      	add	r3, r0
 8001878:	3308      	adds	r3, #8
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	889b      	ldrh	r3, [r3, #4]
 800187e:	fb03 f301 	mul.w	r3, r3, r1
 8001882:	1aeb      	subs	r3, r5, r3
 8001884:	b299      	uxth	r1, r3
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <BSP_LCD_DisplayStringAt+0x180>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <BSP_LCD_DisplayStringAt+0x184>)
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4403      	add	r3, r0
 8001896:	3308      	adds	r3, #8
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	889b      	ldrh	r3, [r3, #4]
 800189c:	4299      	cmp	r1, r3
 800189e:	bf2c      	ite	cs
 80018a0:	2301      	movcs	r3, #1
 80018a2:	2300      	movcc	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4023      	ands	r3, r4
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1b6      	bne.n	800181c <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bdb0      	pop	{r4, r5, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200001e8 	.word	0x200001e8
 80018bc:	200001ec 	.word	0x200001ec

080018c0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
 80018ca:	460b      	mov	r3, r1
 80018cc:	80bb      	strh	r3, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <BSP_LCD_DrawHLine+0x70>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a16      	ldr	r2, [pc, #88]	; (8001934 <BSP_LCD_DrawHLine+0x74>)
 80018dc:	2134      	movs	r1, #52	; 0x34
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	335c      	adds	r3, #92	; 0x5c
 80018e6:	681c      	ldr	r4, [r3, #0]
 80018e8:	f7ff fdf6 	bl	80014d8 <BSP_LCD_GetXSize>
 80018ec:	4602      	mov	r2, r0
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	fb03 f202 	mul.w	r2, r3, r2
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4423      	add	r3, r4
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <BSP_LCD_DrawHLine+0x70>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	68fc      	ldr	r4, [r7, #12]
 8001904:	887d      	ldrh	r5, [r7, #2]
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <BSP_LCD_DrawHLine+0x70>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	490b      	ldr	r1, [pc, #44]	; (8001938 <BSP_LCD_DrawHLine+0x78>)
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2301      	movs	r3, #1
 8001920:	462a      	mov	r2, r5
 8001922:	4621      	mov	r1, r4
 8001924:	f000 fbe2 	bl	80020ec <LL_FillBuffer>
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bdb0      	pop	{r4, r5, r7, pc}
 8001930:	200001e8 	.word	0x200001e8
 8001934:	200003b4 	.word	0x200003b4
 8001938:	200001ec 	.word	0x200001ec

0800193c <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193e:	b087      	sub	sp, #28
 8001940:	af02      	add	r7, sp, #8
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
 8001946:	460b      	mov	r3, r1
 8001948:	80bb      	strh	r3, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <BSP_LCD_DrawVLine+0x78>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <BSP_LCD_DrawVLine+0x7c>)
 8001958:	2134      	movs	r1, #52	; 0x34
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	335c      	adds	r3, #92	; 0x5c
 8001962:	681c      	ldr	r4, [r3, #0]
 8001964:	f7ff fdb8 	bl	80014d8 <BSP_LCD_GetXSize>
 8001968:	4602      	mov	r2, r0
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	fb03 f202 	mul.w	r2, r3, r2
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4423      	add	r3, r4
 8001978:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <BSP_LCD_DrawVLine+0x78>)
 800197c:	681c      	ldr	r4, [r3, #0]
 800197e:	68fd      	ldr	r5, [r7, #12]
 8001980:	887e      	ldrh	r6, [r7, #2]
 8001982:	f7ff fda9 	bl	80014d8 <BSP_LCD_GetXSize>
 8001986:	4603      	mov	r3, r0
 8001988:	1e59      	subs	r1, r3, #1
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <BSP_LCD_DrawVLine+0x78>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	480b      	ldr	r0, [pc, #44]	; (80019bc <BSP_LCD_DrawVLine+0x80>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4403      	add	r3, r0
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9100      	str	r1, [sp, #0]
 80019a0:	4633      	mov	r3, r6
 80019a2:	2201      	movs	r2, #1
 80019a4:	4629      	mov	r1, r5
 80019a6:	4620      	mov	r0, r4
 80019a8:	f000 fba0 	bl	80020ec <LL_FillBuffer>
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b4:	200001e8 	.word	0x200001e8
 80019b8:	200003b4 	.word	0x200003b4
 80019bc:	200001ec 	.word	0x200001ec

080019c0 <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4604      	mov	r4, r0
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	80fb      	strh	r3, [r7, #6]
 80019d2:	4603      	mov	r3, r0
 80019d4:	80bb      	strh	r3, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	807b      	strh	r3, [r7, #2]
 80019da:	4613      	mov	r3, r2
 80019dc:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	88b9      	ldrh	r1, [r7, #4]
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff6b 	bl	80018c0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80019ea:	88ba      	ldrh	r2, [r7, #4]
 80019ec:	883b      	ldrh	r3, [r7, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	b299      	uxth	r1, r3
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff62 	bl	80018c0 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80019fc:	883a      	ldrh	r2, [r7, #0]
 80019fe:	88b9      	ldrh	r1, [r7, #4]
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff9a 	bl	800193c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001a08:	88fa      	ldrh	r2, [r7, #6]
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	883a      	ldrh	r2, [r7, #0]
 8001a12:	88b9      	ldrh	r1, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff91 	bl	800193c <BSP_LCD_DrawVLine>
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
	...

08001a24 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	80bb      	strh	r3, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	f1c3 0303 	rsb	r3, r3, #3
 8001a3e:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001a48:	e0cf      	b.n	8001bea <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4413      	add	r3, r2
 8001a52:	b298      	uxth	r0, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	88ba      	ldrh	r2, [r7, #4]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	b29c      	uxth	r4, r3
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <BSP_LCD_DrawCircle+0x1d8>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4967      	ldr	r1, [pc, #412]	; (8001c00 <BSP_LCD_DrawCircle+0x1dc>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4621      	mov	r1, r4
 8001a74:	f000 fa5c 	bl	8001f30 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	b298      	uxth	r0, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	88ba      	ldrh	r2, [r7, #4]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	b29c      	uxth	r4, r3
 8001a8c:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <BSP_LCD_DrawCircle+0x1d8>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	495b      	ldr	r1, [pc, #364]	; (8001c00 <BSP_LCD_DrawCircle+0x1dc>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	f000 fa45 	bl	8001f30 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4413      	add	r3, r2
 8001aae:	b298      	uxth	r0, r3
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	88ba      	ldrh	r2, [r7, #4]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	b29c      	uxth	r4, r3
 8001aba:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <BSP_LCD_DrawCircle+0x1d8>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4950      	ldr	r1, [pc, #320]	; (8001c00 <BSP_LCD_DrawCircle+0x1dc>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4621      	mov	r1, r4
 8001ad0:	f000 fa2e 	bl	8001f30 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	b298      	uxth	r0, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	88ba      	ldrh	r2, [r7, #4]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	b29c      	uxth	r4, r3
 8001ae8:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <BSP_LCD_DrawCircle+0x1d8>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4944      	ldr	r1, [pc, #272]	; (8001c00 <BSP_LCD_DrawCircle+0x1dc>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4621      	mov	r1, r4
 8001afe:	f000 fa17 	bl	8001f30 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	4413      	add	r3, r2
 8001b0a:	b298      	uxth	r0, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	b29c      	uxth	r4, r3
 8001b16:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <BSP_LCD_DrawCircle+0x1d8>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4939      	ldr	r1, [pc, #228]	; (8001c00 <BSP_LCD_DrawCircle+0x1dc>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	f000 fa00 	bl	8001f30 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	88fa      	ldrh	r2, [r7, #6]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b298      	uxth	r0, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	88bb      	ldrh	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	b29c      	uxth	r4, r3
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <BSP_LCD_DrawCircle+0x1d8>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	492d      	ldr	r1, [pc, #180]	; (8001c00 <BSP_LCD_DrawCircle+0x1dc>)
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4621      	mov	r1, r4
 8001b5a:	f000 f9e9 	bl	8001f30 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	4413      	add	r3, r2
 8001b66:	b298      	uxth	r0, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	88bb      	ldrh	r3, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b29c      	uxth	r4, r3
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <BSP_LCD_DrawCircle+0x1d8>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4922      	ldr	r1, [pc, #136]	; (8001c00 <BSP_LCD_DrawCircle+0x1dc>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4621      	mov	r1, r4
 8001b88:	f000 f9d2 	bl	8001f30 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	88fa      	ldrh	r2, [r7, #6]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	b298      	uxth	r0, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	88bb      	ldrh	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29c      	uxth	r4, r3
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <BSP_LCD_DrawCircle+0x1d8>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4916      	ldr	r1, [pc, #88]	; (8001c00 <BSP_LCD_DrawCircle+0x1dc>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	f000 f9bb 	bl	8001f30 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da06      	bge.n	8001bce <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	009a      	lsls	r2, r3, #2
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3306      	adds	r3, #6
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e00a      	b.n	8001be4 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	009a      	lsls	r2, r3, #2
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	4413      	add	r3, r2
 8001bda:	330a      	adds	r3, #10
 8001bdc:	617b      	str	r3, [r7, #20]
      CurY--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	3301      	adds	r3, #1
 8001be8:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	f67f af2b 	bls.w	8001a4a <BSP_LCD_DrawCircle+0x26>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	200001e8 	.word	0x200001e8
 8001c00:	200001ec 	.word	0x200001ec

08001c04 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af02      	add	r7, sp, #8
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	4608      	mov	r0, r1
 8001c10:	4611      	mov	r1, r2
 8001c12:	461a      	mov	r2, r3
 8001c14:	4623      	mov	r3, r4
 8001c16:	80fb      	strh	r3, [r7, #6]
 8001c18:	4603      	mov	r3, r0
 8001c1a:	80bb      	strh	r3, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c28:	4b20      	ldr	r3, [pc, #128]	; (8001cac <BSP_LCD_FillRect+0xa8>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4920      	ldr	r1, [pc, #128]	; (8001cb0 <BSP_LCD_FillRect+0xac>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fcc4 	bl	80015c8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <BSP_LCD_FillRect+0xa8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <BSP_LCD_FillRect+0xb0>)
 8001c46:	2134      	movs	r1, #52	; 0x34
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	335c      	adds	r3, #92	; 0x5c
 8001c50:	681c      	ldr	r4, [r3, #0]
 8001c52:	f7ff fc41 	bl	80014d8 <BSP_LCD_GetXSize>
 8001c56:	4602      	mov	r2, r0
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	fb03 f202 	mul.w	r2, r3, r2
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4423      	add	r3, r4
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <BSP_LCD_FillRect+0xa8>)
 8001c6a:	681c      	ldr	r4, [r3, #0]
 8001c6c:	68fd      	ldr	r5, [r7, #12]
 8001c6e:	887e      	ldrh	r6, [r7, #2]
 8001c70:	f8b7 8000 	ldrh.w	r8, [r7]
 8001c74:	f7ff fc30 	bl	80014d8 <BSP_LCD_GetXSize>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	1ad1      	subs	r1, r2, r3
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <BSP_LCD_FillRect+0xa8>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <BSP_LCD_FillRect+0xac>)
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4403      	add	r3, r0
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	9100      	str	r1, [sp, #0]
 8001c94:	4643      	mov	r3, r8
 8001c96:	4632      	mov	r2, r6
 8001c98:	4629      	mov	r1, r5
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f000 fa26 	bl	80020ec <LL_FillBuffer>
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001caa:	bf00      	nop
 8001cac:	200001e8 	.word	0x200001e8
 8001cb0:	200001ec 	.word	0x200001ec
 8001cb4:	200003b4 	.word	0x200003b4

08001cb8 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	80bb      	strh	r3, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	f1c3 0303 	rsb	r3, r3, #3
 8001cd2:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001cdc:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <BSP_LCD_FillCircle+0x138>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4944      	ldr	r1, [pc, #272]	; (8001df4 <BSP_LCD_FillCircle+0x13c>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fc6a 	bl	80015c8 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001cf4:	e061      	b.n	8001dba <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d021      	beq.n	8001d40 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b298      	uxth	r0, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b299      	uxth	r1, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff fdd1 	bl	80018c0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	88fa      	ldrh	r2, [r7, #6]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	b298      	uxth	r0, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	88ba      	ldrh	r2, [r7, #4]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	b299      	uxth	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f7ff fdc0 	bl	80018c0 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d021      	beq.n	8001d8a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	88fa      	ldrh	r2, [r7, #6]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	b298      	uxth	r0, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	88ba      	ldrh	r2, [r7, #4]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	b299      	uxth	r1, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	f7ff fdac 	bl	80018c0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	b298      	uxth	r0, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	88bb      	ldrh	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b299      	uxth	r1, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	f7ff fd9b 	bl	80018c0 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da06      	bge.n	8001d9e <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	009a      	lsls	r2, r3, #2
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	4413      	add	r3, r2
 8001d98:	3306      	adds	r3, #6
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e00a      	b.n	8001db4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	009a      	lsls	r2, r3, #2
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	4413      	add	r3, r2
 8001daa:	330a      	adds	r3, #10
 8001dac:	617b      	str	r3, [r7, #20]
      CurY--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	3301      	adds	r3, #1
 8001db8:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d999      	bls.n	8001cf6 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <BSP_LCD_FillCircle+0x138>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	490b      	ldr	r1, [pc, #44]	; (8001df4 <BSP_LCD_FillCircle+0x13c>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fbf7 	bl	80015c8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	88b9      	ldrh	r1, [r7, #4]
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fe1f 	bl	8001a24 <BSP_LCD_DrawCircle>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200001e8 	.word	0x200001e8
 8001df4:	200001ec 	.word	0x200001ec

08001df8 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d80d      	bhi.n	8001e24 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	2215      	movs	r2, #21
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	480a      	ldr	r0, [pc, #40]	; (8001e48 <DSI_IO_WriteCmd+0x50>)
 8001e1e:	f002 ffdb 	bl	8004dd8 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001e22:	e00d      	b.n	8001e40 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	9200      	str	r2, [sp, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2239      	movs	r2, #57	; 0x39
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4803      	ldr	r0, [pc, #12]	; (8001e48 <DSI_IO_WriteCmd+0x50>)
 8001e3c:	f002 ffee 	bl	8004e1c <HAL_DSI_LongWrite>
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000045c 	.word	0x2000045c

08001e4c <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001e50:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e62:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001e68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e84:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	4a28      	ldr	r2, [pc, #160]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001e8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e90:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001eb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eb4:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001ebc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ec0:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001ec8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001ee0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ee4:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <BSP_LCD_MspInit+0xd0>)
 8001eec:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ef0:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2103      	movs	r1, #3
 8001ef6:	2058      	movs	r0, #88	; 0x58
 8001ef8:	f001 fb4b 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001efc:	2058      	movs	r0, #88	; 0x58
 8001efe:	f001 fb64 	bl	80035ca <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2103      	movs	r1, #3
 8001f06:	205a      	movs	r0, #90	; 0x5a
 8001f08:	f001 fb43 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f0c:	205a      	movs	r0, #90	; 0x5a
 8001f0e:	f001 fb5c 	bl	80035ca <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2103      	movs	r1, #3
 8001f16:	2062      	movs	r0, #98	; 0x62
 8001f18:	f001 fb3b 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001f1c:	2062      	movs	r0, #98	; 0x62
 8001f1e:	f001 fb54 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800

08001f30 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	603a      	str	r2, [r7, #0]
 8001f3a:	80fb      	strh	r3, [r7, #6]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <BSP_LCD_DrawPixel+0x44>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <BSP_LCD_DrawPixel+0x48>)
 8001f46:	2134      	movs	r1, #52	; 0x34
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	335c      	adds	r3, #92	; 0x5c
 8001f50:	681c      	ldr	r4, [r3, #0]
 8001f52:	88bd      	ldrh	r5, [r7, #4]
 8001f54:	f7ff fac0 	bl	80014d8 <BSP_LCD_GetXSize>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	fb03 f205 	mul.w	r2, r3, r5
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4423      	add	r3, r4
 8001f66:	461a      	mov	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}
 8001f74:	200001e8 	.word	0x200001e8
 8001f78:	200003b4 	.word	0x200003b4

08001f7c <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	603a      	str	r2, [r7, #0]
 8001f86:	80fb      	strh	r3, [r7, #6]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	2300      	movs	r3, #0
 8001f92:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001f94:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <DrawChar+0x168>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4953      	ldr	r1, [pc, #332]	; (80020e8 <DrawChar+0x16c>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3308      	adds	r3, #8
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	88db      	ldrh	r3, [r3, #6]
 8001faa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001fac:	4b4d      	ldr	r3, [pc, #308]	; (80020e4 <DrawChar+0x168>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	494d      	ldr	r1, [pc, #308]	; (80020e8 <DrawChar+0x16c>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	889b      	ldrh	r3, [r3, #4]
 8001fc2:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001fc4:	8a3b      	ldrh	r3, [r7, #16]
 8001fc6:	3307      	adds	r3, #7
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da00      	bge.n	8001fce <DrawChar+0x52>
 8001fcc:	3307      	adds	r3, #7
 8001fce:	10db      	asrs	r3, r3, #3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	8a3b      	ldrh	r3, [r7, #16]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e076      	b.n	80020d2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001fe4:	8a3b      	ldrh	r3, [r7, #16]
 8001fe6:	3307      	adds	r3, #7
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da00      	bge.n	8001fee <DrawChar+0x72>
 8001fec:	3307      	adds	r3, #7
 8001fee:	10db      	asrs	r3, r3, #3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fb03 f302 	mul.w	r3, r3, r2
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001ffe:	8a3b      	ldrh	r3, [r7, #16]
 8002000:	3307      	adds	r3, #7
 8002002:	2b00      	cmp	r3, #0
 8002004:	da00      	bge.n	8002008 <DrawChar+0x8c>
 8002006:	3307      	adds	r3, #7
 8002008:	10db      	asrs	r3, r3, #3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d002      	beq.n	8002014 <DrawChar+0x98>
 800200e:	2b02      	cmp	r3, #2
 8002010:	d004      	beq.n	800201c <DrawChar+0xa0>
 8002012:	e00c      	b.n	800202e <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	617b      	str	r3, [r7, #20]
      break;
 800201a:	e016      	b.n	800204a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	3201      	adds	r2, #1
 8002026:	7812      	ldrb	r2, [r2, #0]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
      break;
 800202c:	e00d      	b.n	800204a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	041a      	lsls	r2, r3, #16
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3301      	adds	r3, #1
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	4313      	orrs	r3, r2
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	3202      	adds	r2, #2
 8002042:	7812      	ldrb	r2, [r2, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
      break;
 8002048:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	e036      	b.n	80020be <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002050:	8a3a      	ldrh	r2, [r7, #16]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	1ad2      	subs	r2, r2, r3
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4413      	add	r3, r2
 800205a:	3b01      	subs	r3, #1
 800205c:	2201      	movs	r2, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	461a      	mov	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d012      	beq.n	8002092 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	b29a      	uxth	r2, r3
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	4413      	add	r3, r2
 8002074:	b298      	uxth	r0, r3
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <DrawChar+0x168>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	491b      	ldr	r1, [pc, #108]	; (80020e8 <DrawChar+0x16c>)
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	88bb      	ldrh	r3, [r7, #4]
 800208a:	4619      	mov	r1, r3
 800208c:	f7ff ff50 	bl	8001f30 <BSP_LCD_DrawPixel>
 8002090:	e012      	b.n	80020b8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	b29a      	uxth	r2, r3
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	4413      	add	r3, r2
 800209a:	b298      	uxth	r0, r3
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <DrawChar+0x168>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4911      	ldr	r1, [pc, #68]	; (80020e8 <DrawChar+0x16c>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3304      	adds	r3, #4
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	88bb      	ldrh	r3, [r7, #4]
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7ff ff3c 	bl	8001f30 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	8a3b      	ldrh	r3, [r7, #16]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3c4      	bcc.n	8002050 <DrawChar+0xd4>
      }
    }
    Ypos++;
 80020c6:	88bb      	ldrh	r3, [r7, #4]
 80020c8:	3301      	adds	r3, #1
 80020ca:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	3301      	adds	r3, #1
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	8a7b      	ldrh	r3, [r7, #18]
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d384      	bcc.n	8001fe4 <DrawChar+0x68>
  }
}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200001e8 	.word	0x200001e8
 80020e8:	200001ec 	.word	0x200001ec

080020ec <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <LL_FillBuffer+0x68>)
 80020fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002100:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <LL_FillBuffer+0x68>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <LL_FillBuffer+0x68>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <LL_FillBuffer+0x68>)
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <LL_FillBuffer+0x6c>)
 8002112:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8002114:	480f      	ldr	r0, [pc, #60]	; (8002154 <LL_FillBuffer+0x68>)
 8002116:	f001 fc2f 	bl	8003978 <HAL_DMA2D_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d115      	bne.n	800214c <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	480c      	ldr	r0, [pc, #48]	; (8002154 <LL_FillBuffer+0x68>)
 8002124:	f001 fd96 	bl	8003c54 <HAL_DMA2D_ConfigLayer>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10e      	bne.n	800214c <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69f9      	ldr	r1, [r7, #28]
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <LL_FillBuffer+0x68>)
 800213a:	f001 fc77 	bl	8003a2c <HAL_DMA2D_Start>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d103      	bne.n	800214c <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002144:	210a      	movs	r1, #10
 8002146:	4803      	ldr	r0, [pc, #12]	; (8002154 <LL_FillBuffer+0x68>)
 8002148:	f001 fc9b 	bl	8003a82 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000035c 	.word	0x2000035c
 8002158:	4002b000 	.word	0x4002b000

0800215c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <BSP_SDRAM_Init+0xac>)
 8002162:	4a2a      	ldr	r2, [pc, #168]	; (800220c <BSP_SDRAM_Init+0xb0>)
 8002164:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <BSP_SDRAM_Init+0xb4>)
 8002168:	2202      	movs	r2, #2
 800216a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <BSP_SDRAM_Init+0xb4>)
 800216e:	2207      	movs	r2, #7
 8002170:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <BSP_SDRAM_Init+0xb4>)
 8002174:	2204      	movs	r2, #4
 8002176:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <BSP_SDRAM_Init+0xb4>)
 800217a:	2207      	movs	r2, #7
 800217c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <BSP_SDRAM_Init+0xb4>)
 8002180:	2202      	movs	r2, #2
 8002182:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <BSP_SDRAM_Init+0xb4>)
 8002186:	2202      	movs	r2, #2
 8002188:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <BSP_SDRAM_Init+0xb4>)
 800218c:	2202      	movs	r2, #2
 800218e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <BSP_SDRAM_Init+0xac>)
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <BSP_SDRAM_Init+0xac>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <BSP_SDRAM_Init+0xac>)
 800219e:	2204      	movs	r2, #4
 80021a0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <BSP_SDRAM_Init+0xac>)
 80021a4:	2220      	movs	r2, #32
 80021a6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <BSP_SDRAM_Init+0xac>)
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <BSP_SDRAM_Init+0xac>)
 80021b0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021b4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <BSP_SDRAM_Init+0xac>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <BSP_SDRAM_Init+0xac>)
 80021be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <BSP_SDRAM_Init+0xac>)
 80021c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <BSP_SDRAM_Init+0xac>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80021d2:	2100      	movs	r1, #0
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <BSP_SDRAM_Init+0xac>)
 80021d6:	f000 f87f 	bl	80022d8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80021da:	490d      	ldr	r1, [pc, #52]	; (8002210 <BSP_SDRAM_Init+0xb4>)
 80021dc:	480a      	ldr	r0, [pc, #40]	; (8002208 <BSP_SDRAM_Init+0xac>)
 80021de:	f005 fa87 	bl	80076f0 <HAL_SDRAM_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <BSP_SDRAM_Init+0xb8>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e002      	b.n	80021f6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <BSP_SDRAM_Init+0xb8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80021f6:	f240 6003 	movw	r0, #1539	; 0x603
 80021fa:	f000 f80d 	bl	8002218 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <BSP_SDRAM_Init+0xb8>)
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000478 	.word	0x20000478
 800220c:	a0000140 	.word	0xa0000140
 8002210:	20000294 	.word	0x20000294
 8002214:	20000054 	.word	0x20000054

08002218 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800222c:	2210      	movs	r2, #16
 800222e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002232:	2201      	movs	r2, #1
 8002234:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800223c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002240:	4923      	ldr	r1, [pc, #140]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002242:	4824      	ldr	r0, [pc, #144]	; (80022d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002244:	f005 fa88 	bl	8007758 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002248:	2001      	movs	r0, #1
 800224a:	f000 fb79 	bl	8002940 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002250:	2202      	movs	r2, #2
 8002252:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002256:	2210      	movs	r2, #16
 8002258:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800225c:	2201      	movs	r2, #1
 800225e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226a:	4919      	ldr	r1, [pc, #100]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800226c:	4819      	ldr	r0, [pc, #100]	; (80022d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800226e:	f005 fa73 	bl	8007758 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002274:	2203      	movs	r2, #3
 8002276:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800227a:	2210      	movs	r2, #16
 800227c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002280:	2208      	movs	r2, #8
 8002282:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800228a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800228e:	4910      	ldr	r1, [pc, #64]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002290:	4810      	ldr	r0, [pc, #64]	; (80022d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002292:	f005 fa61 	bl	8007758 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002296:	f44f 730c 	mov.w	r3, #560	; 0x230
 800229a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800229e:	2204      	movs	r2, #4
 80022a0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a4:	2210      	movs	r2, #16
 80022a6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b8:	4905      	ldr	r1, [pc, #20]	; (80022d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ba:	4806      	ldr	r0, [pc, #24]	; (80022d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022bc:	f005 fa4c 	bl	8007758 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4804      	ldr	r0, [pc, #16]	; (80022d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022c4:	f005 fa73 	bl	80077ae <HAL_SDRAM_ProgramRefreshRate>
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200002b0 	.word	0x200002b0
 80022d4:	20000478 	.word	0x20000478

080022d8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80022d8:	b580      	push	{r7, lr}
 80022da:	b090      	sub	sp, #64	; 0x40
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80022e2:	4b71      	ldr	r3, [pc, #452]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	4a70      	ldr	r2, [pc, #448]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6393      	str	r3, [r2, #56]	; 0x38
 80022ee:	4b6e      	ldr	r3, [pc, #440]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80022fa:	4b6b      	ldr	r3, [pc, #428]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002312:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a64      	ldr	r2, [pc, #400]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800232a:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002330:	f043 0310 	orr.w	r3, r3, #16
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002342:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b56      	ldr	r3, [pc, #344]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800235a:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002372:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a46      	ldr	r2, [pc, #280]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <BSP_SDRAM_MspInit+0x1d0>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80023ae:	230c      	movs	r3, #12
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80023b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80023b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023bc:	4619      	mov	r1, r3
 80023be:	483b      	ldr	r0, [pc, #236]	; (80024ac <BSP_SDRAM_MspInit+0x1d4>)
 80023c0:	f002 fdf2 	bl	8004fa8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80023c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80023ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ce:	4619      	mov	r1, r3
 80023d0:	4837      	ldr	r0, [pc, #220]	; (80024b0 <BSP_SDRAM_MspInit+0x1d8>)
 80023d2:	f002 fde9 	bl	8004fa8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80023d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80023dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e0:	4619      	mov	r1, r3
 80023e2:	4834      	ldr	r0, [pc, #208]	; (80024b4 <BSP_SDRAM_MspInit+0x1dc>)
 80023e4:	f002 fde0 	bl	8004fa8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80023e8:	f248 1337 	movw	r3, #33079	; 0x8137
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f2:	4619      	mov	r1, r3
 80023f4:	4830      	ldr	r0, [pc, #192]	; (80024b8 <BSP_SDRAM_MspInit+0x1e0>)
 80023f6:	f002 fdd7 	bl	8004fa8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80023fa:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002404:	4619      	mov	r1, r3
 8002406:	482d      	ldr	r0, [pc, #180]	; (80024bc <BSP_SDRAM_MspInit+0x1e4>)
 8002408:	f002 fdce 	bl	8004fa8 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800240c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8002412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002416:	4619      	mov	r1, r3
 8002418:	4829      	ldr	r0, [pc, #164]	; (80024c0 <BSP_SDRAM_MspInit+0x1e8>)
 800241a:	f002 fdc5 	bl	8004fa8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 800242c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002430:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 8002434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002438:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 800243c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002440:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 8002444:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002448:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 800244c:	2200      	movs	r2, #0
 800244e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 8002452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002456:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 800245a:	2200      	movs	r2, #0
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 8002460:	2203      	movs	r2, #3
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 8002466:	2200      	movs	r2, #0
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800246a:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 8002472:	4a15      	ldr	r2, [pc, #84]	; (80024c8 <BSP_SDRAM_MspInit+0x1f0>)
 8002474:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002482:	4810      	ldr	r0, [pc, #64]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 8002484:	f001 f96a 	bl	800375c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002488:	480e      	ldr	r0, [pc, #56]	; (80024c4 <BSP_SDRAM_MspInit+0x1ec>)
 800248a:	f001 f8b9 	bl	8003600 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	210f      	movs	r1, #15
 8002492:	2038      	movs	r0, #56	; 0x38
 8002494:	f001 f87d 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002498:	2038      	movs	r0, #56	; 0x38
 800249a:	f001 f896 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3740      	adds	r7, #64	; 0x40
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020c00 	.word	0x40020c00
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40021400 	.word	0x40021400
 80024b8:	40021800 	.word	0x40021800
 80024bc:	40021c00 	.word	0x40021c00
 80024c0:	40022000 	.word	0x40022000
 80024c4:	200002c0 	.word	0x200002c0
 80024c8:	40026410 	.word	0x40026410

080024cc <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	460a      	mov	r2, r1
 80024d6:	80fb      	strh	r3, [r7, #6]
 80024d8:	4613      	mov	r3, r2
 80024da:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <BSP_TS_Init+0xb0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <BSP_TS_Init+0xb4>)
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	b292      	uxth	r2, r2
 80024ee:	4610      	mov	r0, r2
 80024f0:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <BSP_TS_Init+0xb0>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2054      	movs	r0, #84	; 0x54
 80024f8:	4798      	blx	r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80024fe:	7b7b      	ldrb	r3, [r7, #13]
 8002500:	2b11      	cmp	r3, #17
 8002502:	d009      	beq.n	8002518 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <BSP_TS_Init+0xb0>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2070      	movs	r0, #112	; 0x70
 800250a:	4798      	blx	r3
 800250c:	4603      	mov	r3, r0
 800250e:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <BSP_TS_Init+0xb4>)
 8002512:	2270      	movs	r2, #112	; 0x70
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e002      	b.n	800251e <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <BSP_TS_Init+0xb4>)
 800251a:	2254      	movs	r2, #84	; 0x54
 800251c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800251e:	7b7b      	ldrb	r3, [r7, #13]
 8002520:	2b11      	cmp	r3, #17
 8002522:	d002      	beq.n	800252a <BSP_TS_Init+0x5e>
 8002524:	7bbb      	ldrb	r3, [r7, #14]
 8002526:	2b11      	cmp	r3, #17
 8002528:	d121      	bne.n	800256e <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <BSP_TS_Init+0xb8>)
 800252c:	4a13      	ldr	r2, [pc, #76]	; (800257c <BSP_TS_Init+0xb0>)
 800252e:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	88bb      	ldrh	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d203      	bcs.n	8002540 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <BSP_TS_Init+0xbc>)
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e002      	b.n	8002546 <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <BSP_TS_Init+0xbc>)
 8002542:	220c      	movs	r2, #12
 8002544:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d112      	bne.n	8002572 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <BSP_TS_Init+0xb8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <BSP_TS_Init+0xb4>)
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	b292      	uxth	r2, r2
 8002558:	4610      	mov	r0, r2
 800255a:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <BSP_TS_Init+0xb8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <BSP_TS_Init+0xb4>)
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	b292      	uxth	r2, r2
 8002568:	4610      	mov	r0, r2
 800256a:	4798      	blx	r3
    if(ts_status == TS_OK)
 800256c:	e001      	b.n	8002572 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 800256e:	2303      	movs	r3, #3
 8002570:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000000 	.word	0x20000000
 8002580:	20000325 	.word	0x20000325
 8002584:	20000320 	.word	0x20000320
 8002588:	20000324 	.word	0x20000324

0800258c <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 8002596:	f000 f94f 	bl	8002838 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800259a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259e:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025a4:	2302      	movs	r3, #2
 80025a6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <BSP_TS_ITConfig+0x54>)
 80025aa:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80025ac:	463b      	mov	r3, r7
 80025ae:	4619      	mov	r1, r3
 80025b0:	480c      	ldr	r0, [pc, #48]	; (80025e4 <BSP_TS_ITConfig+0x58>)
 80025b2:	f002 fcf9 	bl	8004fa8 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 80025b6:	2200      	movs	r2, #0
 80025b8:	210f      	movs	r1, #15
 80025ba:	2028      	movs	r0, #40	; 0x28
 80025bc:	f000 ffe9 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 80025c0:	2028      	movs	r0, #40	; 0x28
 80025c2:	f001 f802 	bl	80035ca <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <BSP_TS_ITConfig+0x5c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <BSP_TS_ITConfig+0x60>)
 80025ce:	7812      	ldrb	r2, [r2, #0]
 80025d0:	b292      	uxth	r2, r2
 80025d2:	4610      	mov	r0, r2
 80025d4:	4798      	blx	r3

  return (ts_status);
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	10210000 	.word	0x10210000
 80025e4:	40022000 	.word	0x40022000
 80025e8:	20000320 	.word	0x20000320
 80025ec:	20000325 	.word	0x20000325

080025f0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80025fc:	4b89      	ldr	r3, [pc, #548]	; (8002824 <BSP_TS_GetState+0x234>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	4a89      	ldr	r2, [pc, #548]	; (8002828 <BSP_TS_GetState+0x238>)
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	b292      	uxth	r2, r2
 8002608:	4610      	mov	r0, r2
 800260a:	4798      	blx	r3
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80fe 	beq.w	800281a <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e0f3      	b.n	800280c <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8002624:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <BSP_TS_GetState+0x234>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4a7f      	ldr	r2, [pc, #508]	; (8002828 <BSP_TS_GetState+0x238>)
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	b290      	uxth	r0, r2
 8002630:	f107 0110 	add.w	r1, r7, #16
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	0052      	lsls	r2, r2, #1
 8002638:	188c      	adds	r4, r1, r2
 800263a:	f107 010c 	add.w	r1, r7, #12
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	0052      	lsls	r2, r2, #1
 8002642:	440a      	add	r2, r1
 8002644:	4621      	mov	r1, r4
 8002646:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002648:	4b78      	ldr	r3, [pc, #480]	; (800282c <BSP_TS_GetState+0x23c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01d      	beq.n	8002690 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	f107 0220 	add.w	r2, r7, #32
 800265c:	4413      	add	r3, r2
 800265e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002662:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	f107 0220 	add.w	r2, r7, #32
 800266c:	4413      	add	r3, r2
 800266e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	f107 0120 	add.w	r1, r7, #32
 800267a:	440b      	add	r3, r1
 800267c:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	f107 0220 	add.w	r2, r7, #32
 8002688:	4413      	add	r3, r2
 800268a:	8b3a      	ldrh	r2, [r7, #24]
 800268c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002690:	4b66      	ldr	r3, [pc, #408]	; (800282c <BSP_TS_GetState+0x23c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d011      	beq.n	80026c0 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	f107 0220 	add.w	r2, r7, #32
 80026a4:	4413      	add	r3, r2
 80026a6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80026aa:	f240 331f 	movw	r3, #799	; 0x31f
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	f107 0120 	add.w	r1, r7, #32
 80026ba:	440b      	add	r3, r1
 80026bc:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80026c0:	4b5a      	ldr	r3, [pc, #360]	; (800282c <BSP_TS_GetState+0x23c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d011      	beq.n	80026f0 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	f107 0220 	add.w	r2, r7, #32
 80026d4:	4413      	add	r3, r2
 80026d6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80026da:	f240 13df 	movw	r3, #479	; 0x1df
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	f107 0120 	add.w	r1, r7, #32
 80026ea:	440b      	add	r3, r1
 80026ec:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	f107 0220 	add.w	r2, r7, #32
 80026f8:	4413      	add	r3, r2
 80026fa:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80026fe:	4619      	mov	r1, r3
 8002700:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <BSP_TS_GetState+0x240>)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002708:	4299      	cmp	r1, r3
 800270a:	d90e      	bls.n	800272a <BSP_TS_GetState+0x13a>
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	f107 0220 	add.w	r2, r7, #32
 8002714:	4413      	add	r3, r2
 8002716:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800271a:	4945      	ldr	r1, [pc, #276]	; (8002830 <BSP_TS_GetState+0x240>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002722:	b29b      	uxth	r3, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	b29b      	uxth	r3, r3
 8002728:	e00d      	b.n	8002746 <BSP_TS_GetState+0x156>
 800272a:	4a41      	ldr	r2, [pc, #260]	; (8002830 <BSP_TS_GetState+0x240>)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	b29a      	uxth	r2, r3
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	f107 0120 	add.w	r1, r7, #32
 800273c:	440b      	add	r3, r1
 800273e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	b29b      	uxth	r3, r3
 8002746:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	f107 0220 	add.w	r2, r7, #32
 8002750:	4413      	add	r3, r2
 8002752:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002756:	4619      	mov	r1, r3
 8002758:	4a36      	ldr	r2, [pc, #216]	; (8002834 <BSP_TS_GetState+0x244>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	4299      	cmp	r1, r3
 8002762:	d90e      	bls.n	8002782 <BSP_TS_GetState+0x192>
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	f107 0220 	add.w	r2, r7, #32
 800276c:	4413      	add	r3, r2
 800276e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002772:	4930      	ldr	r1, [pc, #192]	; (8002834 <BSP_TS_GetState+0x244>)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800277a:	b29b      	uxth	r3, r3
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	e00d      	b.n	800279e <BSP_TS_GetState+0x1ae>
 8002782:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <BSP_TS_GetState+0x244>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278a:	b29a      	uxth	r2, r3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	f107 0120 	add.w	r1, r7, #32
 8002794:	440b      	add	r3, r1
 8002796:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	b29b      	uxth	r3, r3
 800279e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80027a0:	8afa      	ldrh	r2, [r7, #22]
 80027a2:	8abb      	ldrh	r3, [r7, #20]
 80027a4:	4413      	add	r3, r2
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	dd17      	ble.n	80027da <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	f107 0220 	add.w	r2, r7, #32
 80027b2:	4413      	add	r3, r2
 80027b4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80027b8:	4619      	mov	r1, r3
 80027ba:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <BSP_TS_GetState+0x240>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	f107 0220 	add.w	r2, r7, #32
 80027ca:	4413      	add	r3, r2
 80027cc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027d0:	4619      	mov	r1, r3
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <BSP_TS_GetState+0x244>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80027da:	4a15      	ldr	r2, [pc, #84]	; (8002830 <BSP_TS_GetState+0x240>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	b299      	uxth	r1, r3
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	460a      	mov	r2, r1
 80027ee:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80027f0:	4a10      	ldr	r2, [pc, #64]	; (8002834 <BSP_TS_GetState+0x244>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	b299      	uxth	r1, r3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	460a      	mov	r2, r1
 8002804:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4293      	cmp	r3, r2
 8002816:	f4ff af05 	bcc.w	8002624 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800281a:	7efb      	ldrb	r3, [r7, #27]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3724      	adds	r7, #36	; 0x24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd90      	pop	{r4, r7, pc}
 8002824:	20000320 	.word	0x20000320
 8002828:	20000325 	.word	0x20000325
 800282c:	20000324 	.word	0x20000324
 8002830:	20000328 	.word	0x20000328
 8002834:	20000330 	.word	0x20000330

08002838 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <BSP_TS_INT_MspInit+0x44>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <BSP_TS_INT_MspInit+0x44>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <BSP_TS_INT_MspInit+0x44>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 8002856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800285a:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002860:	2301      	movs	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	4619      	mov	r1, r3
 800286c:	4804      	ldr	r0, [pc, #16]	; (8002880 <BSP_TS_INT_MspInit+0x48>)
 800286e:	f002 fb9b 	bl	8004fa8 <HAL_GPIO_Init>
}
 8002872:	bf00      	nop
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40022000 	.word	0x40022000

08002884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 fe77 	bl	800357c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288e:	2000      	movs	r0, #0
 8002890:	f000 f806 	bl	80028a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002894:	f006 fd1a 	bl	80092cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_InitTick+0x54>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_InitTick+0x58>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fe91 	bl	80035e6 <HAL_SYSTICK_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00e      	b.n	80028ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b0f      	cmp	r3, #15
 80028d2:	d80a      	bhi.n	80028ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d4:	2200      	movs	r2, #0
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f000 fe59 	bl	8003592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <HAL_InitTick+0x5c>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200000a4 	.word	0x200000a4
 80028f8:	2000005c 	.word	0x2000005c
 80028fc:	20000058 	.word	0x20000058

08002900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_IncTick+0x20>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_IncTick+0x24>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4413      	add	r3, r2
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <HAL_IncTick+0x24>)
 8002912:	6013      	str	r3, [r2, #0]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	2000005c 	.word	0x2000005c
 8002924:	200004ac 	.word	0x200004ac

08002928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return uwTick;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_GetTick+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	200004ac 	.word	0x200004ac

08002940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff ffee 	bl	8002928 <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d005      	beq.n	8002966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_Delay+0x40>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002966:	bf00      	nop
 8002968:	f7ff ffde 	bl	8002928 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	429a      	cmp	r2, r3
 8002976:	d8f7      	bhi.n	8002968 <HAL_Delay+0x28>
  {
  }
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	2000005c 	.word	0x2000005c

08002984 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e031      	b.n	80029fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f006 fcb6 	bl	8009314 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_ADC_Init+0x84>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	f043 0202 	orr.w	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fbfe 	bl	80031d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
 80029ee:	e001      	b.n	80029f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	ffffeefd 	.word	0xffffeefd

08002a0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_Start+0x1a>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0a0      	b.n	8002b68 <HAL_ADC_Start+0x15c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d018      	beq.n	8002a6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a4c:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <HAL_ADC_Start+0x168>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a49      	ldr	r2, [pc, #292]	; (8002b78 <HAL_ADC_Start+0x16c>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0c9a      	lsrs	r2, r3, #18
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d174      	bne.n	8002b66 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a80:	4b3e      	ldr	r3, [pc, #248]	; (8002b7c <HAL_ADC_Start+0x170>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab6:	d106      	bne.n	8002ac6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	f023 0206 	bic.w	r2, r3, #6
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ac4:	e002      	b.n	8002acc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002adc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ade:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_ADC_Start+0x174>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d136      	bne.n	8002b66 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	e02d      	b.n	8002b66 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <HAL_ADC_Start+0x178>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10e      	bne.n	8002b32 <HAL_ADC_Start+0x126>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d107      	bne.n	8002b32 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b30:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_ADC_Start+0x174>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d113      	bne.n	8002b66 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_ADC_Start+0x17c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10e      	bne.n	8002b66 <HAL_ADC_Start+0x15a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b64:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	200000a4 	.word	0x200000a4
 8002b78:	431bde83 	.word	0x431bde83
 8002b7c:	fffff8fe 	.word	0xfffff8fe
 8002b80:	40012300 	.word	0x40012300
 8002b84:	40012000 	.word	0x40012000
 8002b88:	40012200 	.word	0x40012200

08002b8c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba8:	d113      	bne.n	8002bd2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0220 	orr.w	r2, r3, #32
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e05c      	b.n	8002c8c <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002bd2:	f7ff fea9 	bl	8002928 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bd8:	e01a      	b.n	8002c10 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d016      	beq.n	8002c10 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_ADC_PollForConversion+0x6c>
 8002be8:	f7ff fe9e 	bl	8002928 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d20b      	bcs.n	8002c10 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e03d      	b.n	8002c8c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d1dd      	bne.n	8002bda <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0212 	mvn.w	r2, #18
 8002c26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d123      	bne.n	8002c8a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d11f      	bne.n	8002c8a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d006      	beq.n	8002c66 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d111      	bne.n	8002c8a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d049      	beq.n	8002d6a <HAL_ADC_IRQHandler+0xd6>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d046      	beq.n	8002d6a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d12b      	bne.n	8002d5a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d127      	bne.n	8002d5a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d119      	bne.n	8002d5a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0220 	bic.w	r2, r2, #32
 8002d34:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8e8 	bl	8002f30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0212 	mvn.w	r2, #18
 8002d68:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b80      	cmp	r3, #128	; 0x80
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d057      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x1b8>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d054      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d139      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d12b      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d124      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11d      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d119      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fac3 	bl	80033c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 020c 	mvn.w	r2, #12
 8002e4a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d017      	beq.n	8002eae <HAL_ADC_IRQHandler+0x21a>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d014      	beq.n	8002eae <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10d      	bne.n	8002eae <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f850 	bl	8002f44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0201 	mvn.w	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d015      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x27a>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	f043 0202 	orr.w	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0220 	mvn.w	r2, #32
 8002efc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f82a 	bl	8002f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0220 	mvn.w	r2, #32
 8002f0c:	601a      	str	r2, [r3, #0]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1c>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e115      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x248>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b09      	cmp	r3, #9
 8002f96:	d935      	bls.n	8003004 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68d9      	ldr	r1, [r3, #12]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	3b1e      	subs	r3, #30
 8002fae:	2207      	movs	r2, #7
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43da      	mvns	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	400a      	ands	r2, r1
 8002fbc:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a7f      	ldr	r2, [pc, #508]	; (80031c0 <HAL_ADC_ConfigChannel+0x254>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10a      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68d9      	ldr	r1, [r3, #12]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	061a      	lsls	r2, r3, #24
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	e035      	b.n	800304a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68d9      	ldr	r1, [r3, #12]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4403      	add	r3, r0
 8002ff6:	3b1e      	subs	r3, #30
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	e022      	b.n	800304a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6919      	ldr	r1, [r3, #16]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	2207      	movs	r2, #7
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	400a      	ands	r2, r1
 8003026:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6919      	ldr	r1, [r3, #16]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	4618      	mov	r0, r3
 800303a:	4603      	mov	r3, r0
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4403      	add	r3, r0
 8003040:	409a      	lsls	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b06      	cmp	r3, #6
 8003050:	d824      	bhi.n	800309c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	3b05      	subs	r3, #5
 8003064:	221f      	movs	r2, #31
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	400a      	ands	r2, r1
 8003072:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	3b05      	subs	r3, #5
 800308e:	fa00 f203 	lsl.w	r2, r0, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	635a      	str	r2, [r3, #52]	; 0x34
 800309a:	e04c      	b.n	8003136 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d824      	bhi.n	80030ee <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	3b23      	subs	r3, #35	; 0x23
 80030b6:	221f      	movs	r2, #31
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43da      	mvns	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	400a      	ands	r2, r1
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	3b23      	subs	r3, #35	; 0x23
 80030e0:	fa00 f203 	lsl.w	r2, r0, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
 80030ec:	e023      	b.n	8003136 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	3b41      	subs	r3, #65	; 0x41
 8003100:	221f      	movs	r2, #31
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	400a      	ands	r2, r1
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	3b41      	subs	r3, #65	; 0x41
 800312a:	fa00 f203 	lsl.w	r2, r0, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_ADC_ConfigChannel+0x258>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d109      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1e8>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b12      	cmp	r3, #18
 8003146:	d105      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <HAL_ADC_ConfigChannel+0x25c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <HAL_ADC_ConfigChannel+0x25c>)
 800314e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003152:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1a      	ldr	r2, [pc, #104]	; (80031c4 <HAL_ADC_ConfigChannel+0x258>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d125      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x23e>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_ADC_ConfigChannel+0x254>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x204>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b11      	cmp	r3, #17
 800316e:	d11c      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003176:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800317a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <HAL_ADC_ConfigChannel+0x254>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d111      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_ADC_ConfigChannel+0x260>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <HAL_ADC_ConfigChannel+0x264>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	0c9a      	lsrs	r2, r3, #18
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800319c:	e002      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f9      	bne.n	800319e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	10000012 	.word	0x10000012
 80031c4:	40012000 	.word	0x40012000
 80031c8:	40012300 	.word	0x40012300
 80031cc:	200000a4 	.word	0x200000a4
 80031d0:	431bde83 	.word	0x431bde83

080031d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031dc:	4b78      	ldr	r3, [pc, #480]	; (80033c0 <ADC_Init+0x1ec>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a77      	ldr	r2, [pc, #476]	; (80033c0 <ADC_Init+0x1ec>)
 80031e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031e8:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <ADC_Init+0x1ec>)
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4973      	ldr	r1, [pc, #460]	; (80033c0 <ADC_Init+0x1ec>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <ADC_Init+0x1f0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d022      	beq.n	80032ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e00f      	b.n	80032ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0202 	bic.w	r2, r2, #2
 80032dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	005a      	lsls	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01b      	beq.n	8003334 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800331a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	3b01      	subs	r3, #1
 8003328:	035a      	lsls	r2, r3, #13
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	e007      	b.n	8003344 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003342:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	3b01      	subs	r3, #1
 8003360:	051a      	lsls	r2, r3, #20
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6899      	ldr	r1, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003386:	025a      	lsls	r2, r3, #9
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	029a      	lsls	r2, r3, #10
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012300 	.word	0x40012300
 80033c4:	0f000001 	.word	0x0f000001

080033c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <__NVIC_SetPriorityGrouping+0x40>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f8:	4013      	ands	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	4313      	orrs	r3, r2
 8003408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340a:	4a04      	ldr	r2, [pc, #16]	; (800341c <__NVIC_SetPriorityGrouping+0x40>)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60d3      	str	r3, [r2, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00
 8003420:	05fa0000 	.word	0x05fa0000

08003424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <__NVIC_GetPriorityGrouping+0x18>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 0307 	and.w	r3, r3, #7
}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0b      	blt.n	800346a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4907      	ldr	r1, [pc, #28]	; (8003478 <__NVIC_EnableIRQ+0x38>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2001      	movs	r0, #1
 8003462:	fa00 f202 	lsl.w	r2, r0, r2
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db0a      	blt.n	80034a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	490c      	ldr	r1, [pc, #48]	; (80034c8 <__NVIC_SetPriority+0x4c>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	440b      	add	r3, r1
 80034a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a4:	e00a      	b.n	80034bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4908      	ldr	r1, [pc, #32]	; (80034cc <__NVIC_SetPriority+0x50>)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	3b04      	subs	r3, #4
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	761a      	strb	r2, [r3, #24]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000e100 	.word	0xe000e100
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf28      	it	cs
 80034ee:	2304      	movcs	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d902      	bls.n	8003500 <NVIC_EncodePriority+0x30>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3b03      	subs	r3, #3
 80034fe:	e000      	b.n	8003502 <NVIC_EncodePriority+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003518:	f04f 31ff 	mov.w	r1, #4294967295
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43d9      	mvns	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	4313      	orrs	r3, r2
         );
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003548:	d301      	bcc.n	800354e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354a:	2301      	movs	r3, #1
 800354c:	e00f      	b.n	800356e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <SysTick_Config+0x40>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003556:	210f      	movs	r1, #15
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f7ff ff8e 	bl	800347c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <SysTick_Config+0x40>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <SysTick_Config+0x40>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000e010 	.word	0xe000e010

0800357c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ff29 	bl	80033dc <__NVIC_SetPriorityGrouping>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a4:	f7ff ff3e 	bl	8003424 <__NVIC_GetPriorityGrouping>
 80035a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f7ff ff8e 	bl	80034d0 <NVIC_EncodePriority>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff5d 	bl	800347c <__NVIC_SetPriority>
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff31 	bl	8003440 <__NVIC_EnableIRQ>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ffa2 	bl	8003538 <SysTick_Config>
 80035f4:	4603      	mov	r3, r0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7ff f98c 	bl	8002928 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e099      	b.n	8003750 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800363c:	e00f      	b.n	800365e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800363e:	f7ff f973 	bl	8002928 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b05      	cmp	r3, #5
 800364a:	d908      	bls.n	800365e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2203      	movs	r2, #3
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e078      	b.n	8003750 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e8      	bne.n	800363e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4b38      	ldr	r3, [pc, #224]	; (8003758 <HAL_DMA_Init+0x158>)
 8003678:	4013      	ands	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800368a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d107      	bne.n	80036c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	4313      	orrs	r3, r2
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 0307 	bic.w	r3, r3, #7
 80036de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d117      	bne.n	8003722 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f8bd 	bl	8003884 <DMA_CheckFifoParam>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2240      	movs	r2, #64	; 0x40
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800371e:	2301      	movs	r3, #1
 8003720:	e016      	b.n	8003750 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f874 	bl	8003818 <DMA_CalcBaseAndBitshift>
 8003730:	4603      	mov	r3, r0
 8003732:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	223f      	movs	r2, #63	; 0x3f
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	e010803f 	.word	0xe010803f

0800375c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e050      	b.n	8003810 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d101      	bne.n	800377e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
 800377c:	e048      	b.n	8003810 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2200      	movs	r2, #0
 800379c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2200      	movs	r2, #0
 80037ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2221      	movs	r2, #33	; 0x21
 80037bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f82a 	bl	8003818 <DMA_CalcBaseAndBitshift>
 80037c4:	4603      	mov	r3, r0
 80037c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	223f      	movs	r2, #63	; 0x3f
 80037ce:	409a      	lsls	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	3b10      	subs	r3, #16
 8003828:	4a13      	ldr	r2, [pc, #76]	; (8003878 <DMA_CalcBaseAndBitshift+0x60>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003832:	4a12      	ldr	r2, [pc, #72]	; (800387c <DMA_CalcBaseAndBitshift+0x64>)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d908      	bls.n	8003858 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <DMA_CalcBaseAndBitshift+0x68>)
 800384e:	4013      	ands	r3, r2
 8003850:	1d1a      	adds	r2, r3, #4
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	659a      	str	r2, [r3, #88]	; 0x58
 8003856:	e006      	b.n	8003866 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <DMA_CalcBaseAndBitshift+0x68>)
 8003860:	4013      	ands	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	aaaaaaab 	.word	0xaaaaaaab
 800387c:	0800ca30 	.word	0x0800ca30
 8003880:	fffffc00 	.word	0xfffffc00

08003884 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11f      	bne.n	80038de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d855      	bhi.n	8003950 <DMA_CheckFifoParam+0xcc>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <DMA_CheckFifoParam+0x28>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038cf 	.word	0x080038cf
 80038b4:	080038bd 	.word	0x080038bd
 80038b8:	08003951 	.word	0x08003951
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d045      	beq.n	8003954 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038cc:	e042      	b.n	8003954 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038d6:	d13f      	bne.n	8003958 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038dc:	e03c      	b.n	8003958 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e6:	d121      	bne.n	800392c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d836      	bhi.n	800395c <DMA_CheckFifoParam+0xd8>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <DMA_CheckFifoParam+0x70>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003905 	.word	0x08003905
 80038f8:	0800390b 	.word	0x0800390b
 80038fc:	08003905 	.word	0x08003905
 8003900:	0800391d 	.word	0x0800391d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      break;
 8003908:	e02f      	b.n	800396a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d024      	beq.n	8003960 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800391a:	e021      	b.n	8003960 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003924:	d11e      	bne.n	8003964 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800392a:	e01b      	b.n	8003964 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d902      	bls.n	8003938 <DMA_CheckFifoParam+0xb4>
 8003932:	2b03      	cmp	r3, #3
 8003934:	d003      	beq.n	800393e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003936:	e018      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
      break;
 800393c:	e015      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00e      	beq.n	8003968 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
      break;
 800394e:	e00b      	b.n	8003968 <DMA_CheckFifoParam+0xe4>
      break;
 8003950:	bf00      	nop
 8003952:	e00a      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      break;
 8003954:	bf00      	nop
 8003956:	e008      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      break;
 8003958:	bf00      	nop
 800395a:	e006      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      break;
 800395c:	bf00      	nop
 800395e:	e004      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      break;
 8003960:	bf00      	nop
 8003962:	e002      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      break;   
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      break;
 8003968:	bf00      	nop
    }
  } 
  
  return status; 
 800396a:	7bfb      	ldrb	r3, [r7, #15]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e049      	b.n	8003a1e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f005 fcde 	bl	8009360 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	f023 0107 	bic.w	r1, r3, #7
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_DMA2D_Init+0xb0>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68d1      	ldr	r1, [r2, #12]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	051a      	lsls	r2, r3, #20
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	055b      	lsls	r3, r3, #21
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	ffffc000 	.word	0xffffc000

08003a2c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_DMA2D_Start+0x1c>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e018      	b.n	8003a7a <HAL_DMA2D_Start+0x4e>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f994 	bl	8003d90 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d056      	beq.n	8003b4c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003a9e:	f7fe ff43 	bl	8002928 <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003aa4:	e04b      	b.n	8003b3e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0202 	orr.w	r2, r3, #2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2221      	movs	r2, #33	; 0x21
 8003aea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2204      	movs	r2, #4
 8003af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0a5      	b.n	8003c4c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d01a      	beq.n	8003b3e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003b08:	f7fe ff0e 	bl	8002928 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <HAL_DMA2D_PollForTransfer+0x9c>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e086      	b.n	8003c4c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ac      	beq.n	8003aa6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d061      	beq.n	8003c32 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b6e:	f7fe fedb 	bl	8002928 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003b74:	e056      	b.n	8003c24 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02e      	beq.n	8003be6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f043 0204 	orr.w	r2, r3, #4
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f043 0202 	orr.w	r2, r3, #2
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	f043 0201 	orr.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2229      	movs	r2, #41	; 0x29
 8003bd0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e032      	b.n	8003c4c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d01a      	beq.n	8003c24 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003bee:	f7fe fe9b 	bl	8002928 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <HAL_DMA2D_PollForTransfer+0x182>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10f      	bne.n	8003c24 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2203      	movs	r2, #3
 8003c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e013      	b.n	8003c4c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0a1      	beq.n	8003b76 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2212      	movs	r2, #18
 8003c38:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_DMA2D_ConfigLayer+0x20>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e084      	b.n	8003d7e <HAL_DMA2D_ConfigLayer+0x12a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	3320      	adds	r3, #32
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003ca8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003cb4:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <HAL_DMA2D_ConfigLayer+0x138>)
 8003cb6:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b0a      	cmp	r3, #10
 8003cbe:	d003      	beq.n	8003cc8 <HAL_DMA2D_ConfigLayer+0x74>
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b09      	cmp	r3, #9
 8003cc6:	d107      	bne.n	8003cd8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e005      	b.n	8003ce4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d120      	bne.n	8003d2c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	ea02 0103 	and.w	r1, r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b0a      	cmp	r3, #10
 8003d12:	d003      	beq.n	8003d1c <HAL_DMA2D_ConfigLayer+0xc8>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b09      	cmp	r3, #9
 8003d1a:	d127      	bne.n	8003d6c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d28:	629a      	str	r2, [r3, #40]	; 0x28
 8003d2a:	e01f      	b.n	8003d6c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	ea02 0103 	and.w	r1, r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b0a      	cmp	r3, #10
 8003d54:	d003      	beq.n	8003d5e <HAL_DMA2D_ConfigLayer+0x10a>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b09      	cmp	r3, #9
 8003d5c:	d106      	bne.n	8003d6c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d6a:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	ff33000f 	.word	0xff33000f

08003d90 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b08b      	sub	sp, #44	; 0x2c
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	041a      	lsls	r2, r3, #16
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dc8:	d174      	bne.n	8003eb4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003dd0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dd8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003de0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d108      	bne.n	8003e02 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003e00:	e053      	b.n	8003eaa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d106      	bne.n	8003e18 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e048      	b.n	8003eaa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d111      	bne.n	8003e44 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	0cdb      	lsrs	r3, r3, #19
 8003e24:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	0a9b      	lsrs	r3, r3, #10
 8003e2a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	08db      	lsrs	r3, r3, #3
 8003e30:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	02db      	lsls	r3, r3, #11
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
 8003e42:	e032      	b.n	8003eaa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d117      	bne.n	8003e7c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	0fdb      	lsrs	r3, r3, #31
 8003e50:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	0cdb      	lsrs	r3, r3, #19
 8003e56:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	0adb      	lsrs	r3, r3, #11
 8003e5c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	08db      	lsrs	r3, r3, #3
 8003e62:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	029b      	lsls	r3, r3, #10
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	03db      	lsls	r3, r3, #15
 8003e72:	4313      	orrs	r3, r2
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7a:	e016      	b.n	8003eaa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	0f1b      	lsrs	r3, r3, #28
 8003e80:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	0d1b      	lsrs	r3, r3, #20
 8003e86:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	0b1b      	lsrs	r3, r3, #12
 8003e8c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	011a      	lsls	r2, r3, #4
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	031b      	lsls	r3, r3, #12
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003eb2:	e003      	b.n	8003ebc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	60da      	str	r2, [r3, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	372c      	adds	r7, #44	; 0x2c
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	019a      	lsls	r2, r3, #6
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f08:	f7fe fd0e 	bl	8002928 <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003f0e:	e009      	b.n	8003f24 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003f10:	f7fe fd0a 	bl	8002928 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1e:	d901      	bls.n	8003f24 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e015      	b.n	8003f50 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ee      	beq.n	8003f10 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	019a      	lsls	r2, r3, #6
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	ea42 0103 	orr.w	r1, r2, r3
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	041a      	lsls	r2, r3, #16
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e106      	b.n	800417a <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7c5b      	ldrb	r3, [r3, #17]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f005 fa12 	bl	80093a0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f96:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003faa:	f7fe fcbd 	bl	8002928 <HAL_GetTick>
 8003fae:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003fb0:	e009      	b.n	8003fc6 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003fb2:	f7fe fcb9 	bl	8002928 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fc0:	d901      	bls.n	8003fc6 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0d9      	b.n	800417a <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ed      	beq.n	8003fb2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b68      	ldr	r3, [pc, #416]	; (8004184 <HAL_DSI_Init+0x22c>)
 8003fe4:	400b      	ands	r3, r1
 8003fe6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	009a      	lsls	r2, r3, #2
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	02db      	lsls	r3, r3, #11
 8003ffe:	431a      	orrs	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800403a:	f7fe fc75 	bl	8002928 <HAL_GetTick>
 800403e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004040:	e009      	b.n	8004056 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004042:	f7fe fc71 	bl	8002928 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004050:	d901      	bls.n	8004056 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e091      	b.n	800417a <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ed      	beq.n	8004042 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0206 	orr.w	r2, r2, #6
 8004076:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0203 	bic.w	r2, r2, #3
 800408a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0203 	bic.w	r2, r2, #3
 80040b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040e0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6899      	ldr	r1, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_DSI_Init+0x1aa>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	e000      	b.n	8004104 <HAL_DSI_Init+0x1ac>
 8004102:	2301      	movs	r3, #1
 8004104:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <HAL_DSI_Init+0x230>)
 800410a:	fb02 f203 	mul.w	r2, r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	409a      	lsls	r2, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800413a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	430a      	orrs	r2, r1
 800414e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2200      	movs	r2, #0
 8004162:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	fffc8603 	.word	0xfffc8603
 8004188:	003d0900 	.word	0x003d0900

0800418c <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e066      	b.n	800426c <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2203      	movs	r2, #3
 80041a2:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0208 	bic.w	r2, r2, #8
 80041b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	605a      	str	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0206 	bic.w	r2, r2, #6
 80041fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800423e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800424a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f005 f8e8 	bl	8009428 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	7c1b      	ldrb	r3, [r3, #16]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_DSI_ConfigErrorMonitor+0x16>
 8004286:	2302      	movs	r3, #2
 8004288:	e0aa      	b.n	80043e0 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2200      	movs	r2, #0
 8004296:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042c4:	430b      	orrs	r3, r1
 80042c6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80042e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d009      	beq.n	8004324 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0202 	orr.w	r2, r2, #2
 8004320:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 020c 	orr.w	r2, r2, #12
 800433e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0210 	orr.w	r2, r2, #16
 800435c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0220 	orr.w	r2, r2, #32
 800437a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004398:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80043d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	7c1b      	ldrb	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_DSI_SetGenericVCID+0x16>
 80043fe:	2302      	movs	r3, #2
 8004400:	e016      	b.n	8004430 <HAL_DSI_SetGenericVCID+0x44>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0203 	bic.w	r2, r2, #3
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7c1b      	ldrb	r3, [r3, #16]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_DSI_ConfigVideoMode+0x16>
 800444e:	2302      	movs	r3, #2
 8004450:	e1ee      	b.n	8004830 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0203 	bic.w	r2, r2, #3
 800448a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b8b      	ldr	r3, [pc, #556]	; (80046d8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80044aa:	400b      	ands	r3, r1
 80044ac:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4b84      	ldr	r3, [pc, #528]	; (80046dc <HAL_DSI_ConfigVideoMode+0x2a0>)
 80044cc:	400b      	ands	r3, r1
 80044ce:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b7b      	ldr	r3, [pc, #492]	; (80046dc <HAL_DSI_ConfigVideoMode+0x2a0>)
 80044ee:	400b      	ands	r3, r1
 80044f0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0203 	bic.w	r2, r2, #3
 8004512:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68d9      	ldr	r1, [r3, #12]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0207 	bic.w	r2, r2, #7
 8004534:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6959      	ldr	r1, [r3, #20]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	431a      	orrs	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 020f 	bic.w	r2, r2, #15
 8004562:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6919      	ldr	r1, [r3, #16]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 020e 	bic.w	r2, r2, #14
 8004586:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	005a      	lsls	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d110      	bne.n	80045cc <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045b8:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6919      	ldr	r1, [r3, #16]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80045d8:	400b      	ands	r3, r1
 80045da:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80045fa:	400b      	ands	r3, r1
 80045fc:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800461c:	400b      	ands	r3, r1
 800461e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800463e:	400b      	ands	r3, r1
 8004640:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004660:	400b      	ands	r3, r1
 8004662:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004682:	400b      	ands	r3, r1
 8004684:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80046a4:	400b      	ands	r3, r1
 80046a6:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d4:	e00a      	b.n	80046ec <HAL_DSI_ConfigVideoMode+0x2b0>
 80046d6:	bf00      	nop
 80046d8:	ffffc000 	.word	0xffffc000
 80046dc:	ffffe000 	.word	0xffffe000
 80046e0:	fffff000 	.word	0xfffff000
 80046e4:	ffff8000 	.word	0xffff8000
 80046e8:	fffffc00 	.word	0xfffffc00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004702:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6999      	ldr	r1, [r3, #24]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470e:	041a      	lsls	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004726:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004748:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	7c1b      	ldrb	r3, [r3, #16]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800484e:	2302      	movs	r3, #2
 8004850:	e0c5      	b.n	80049de <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0203 	bic.w	r2, r2, #3
 800489e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68d9      	ldr	r1, [r3, #12]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0207 	bic.w	r2, r2, #7
 80048c0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6959      	ldr	r1, [r3, #20]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 020f 	bic.w	r2, r2, #15
 80048ee:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6919      	ldr	r1, [r3, #16]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 020e 	bic.w	r2, r2, #14
 8004912:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	005a      	lsls	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	4b2c      	ldr	r3, [pc, #176]	; (80049ec <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800493a:	400b      	ands	r3, r1
 800493c:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004960:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	431a      	orrs	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0202 	orr.w	r2, r2, #2
 80049d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	ffff0000 	.word	0xffff0000

080049f0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	7c1b      	ldrb	r3, [r3, #16]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_DSI_ConfigCommand+0x16>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e049      	b.n	8004a9a <HAL_DSI_ConfigCommand+0xaa>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_DSI_ConfigCommand+0xb8>)
 8004a18:	400b      	ands	r3, r1
 8004a1a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a2a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004a30:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004a36:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004a3c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004a42:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004a48:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004a4e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a54:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004a5a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004a60:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004a66:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0202 	bic.w	r2, r2, #2
 8004a7e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	fef080ff 	.word	0xfef080ff

08004aac <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	7c1b      	ldrb	r3, [r3, #16]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_DSI_ConfigFlowControl+0x16>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e016      	b.n	8004af0 <HAL_DSI_ConfigFlowControl+0x44>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 021f 	bic.w	r2, r2, #31
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	7c1b      	ldrb	r3, [r3, #16]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_DSI_ConfigPhyTimer+0x16>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e058      	b.n	8004bc4 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4293      	cmp	r3, r2
 8004b22:	bf38      	it	cc
 8004b24:	4613      	movcc	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004b38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	041a      	lsls	r2, r3, #16
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004b66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004ba0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	021a      	lsls	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7c1b      	ldrb	r3, [r3, #16]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e0b4      	b.n	8004d50 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004bfa:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6899      	ldr	r1, [r3, #8]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	041a      	lsls	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c3e:	400b      	ands	r3, r1
 8004c40:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c60:	400b      	ands	r3, r1
 8004c62:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c84:	400b      	ands	r3, r1
 8004c86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004cae:	400b      	ands	r3, r1
 8004cb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b16      	ldr	r3, [pc, #88]	; (8004d5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004d02:	400b      	ands	r3, r1
 8004d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	ffff0000 	.word	0xffff0000

08004d60 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	7c1b      	ldrb	r3, [r3, #16]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_DSI_Start+0x14>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e02b      	b.n	8004dcc <HAL_DSI_Start+0x6c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0208 	orr.w	r2, r2, #8
 8004db0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	7c1b      	ldrb	r3, [r3, #16]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_DSI_ShortWrite+0x1a>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e010      	b.n	8004e14 <HAL_DSI_ShortWrite+0x3c>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7ff f879 	bl	8003efa <DSI_ShortWrite>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	741a      	strb	r2, [r3, #16]

  return status;
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08c      	sub	sp, #48	; 0x30
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	7c1b      	ldrb	r3, [r3, #16]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_DSI_LongWrite+0x1e>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e084      	b.n	8004f44 <HAL_DSI_LongWrite+0x128>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e40:	f7fd fd72 	bl	8002928 <HAL_GetTick>
 8004e44:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e46:	e00c      	b.n	8004e62 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004e48:	f7fd fd6e 	bl	8002928 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e56:	d904      	bls.n	8004e62 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e070      	b.n	8004f44 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0eb      	beq.n	8004e48 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	bf28      	it	cs
 8004e7a:	2303      	movcs	r3, #3
 8004e7c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004e7e:	2300      	movs	r3, #0
 8004e80:	623b      	str	r3, [r7, #32]
 8004e82:	e00f      	b.n	8004ea4 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	4413      	add	r3, r2
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	3301      	adds	r3, #1
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3eb      	bcc.n	8004e84 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004ec4:	e028      	b.n	8004f18 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	bf28      	it	cs
 8004ecc:	2304      	movcs	r3, #4
 8004ece:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	623b      	str	r3, [r7, #32]
 8004ed8:	e00e      	b.n	8004ef8 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	4413      	add	r3, r2
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	623b      	str	r3, [r7, #32]
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d3ec      	bcc.n	8004eda <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1d3      	bne.n	8004ec6 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f26:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	f7fe ffc6 	bl	8003ec8 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3728      	adds	r7, #40	; 0x28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	7c1b      	ldrb	r3, [r3, #16]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e01b      	b.n	8004f9a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004f78:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	065a      	lsls	r2, r3, #25
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b089      	sub	sp, #36	; 0x24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	e175      	b.n	80052b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fc8:	2201      	movs	r2, #1
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	f040 8164 	bne.w	80052ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0x4e>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b12      	cmp	r3, #18
 8004ff4:	d123      	bne.n	800503e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	08da      	lsrs	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3208      	adds	r2, #8
 8004ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	220f      	movs	r2, #15
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	08da      	lsrs	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3208      	adds	r2, #8
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	2203      	movs	r2, #3
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 0203 	and.w	r2, r3, #3
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d00b      	beq.n	8005092 <HAL_GPIO_Init+0xea>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d007      	beq.n	8005092 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005086:	2b11      	cmp	r3, #17
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b12      	cmp	r3, #18
 8005090:	d130      	bne.n	80050f4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	2203      	movs	r2, #3
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43db      	mvns	r3, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4013      	ands	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050c8:	2201      	movs	r2, #1
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	43db      	mvns	r3, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4013      	ands	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 0201 	and.w	r2, r3, #1
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	2203      	movs	r2, #3
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80be 	beq.w	80052ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005132:	4b65      	ldr	r3, [pc, #404]	; (80052c8 <HAL_GPIO_Init+0x320>)
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	4a64      	ldr	r2, [pc, #400]	; (80052c8 <HAL_GPIO_Init+0x320>)
 8005138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800513c:	6453      	str	r3, [r2, #68]	; 0x44
 800513e:	4b62      	ldr	r3, [pc, #392]	; (80052c8 <HAL_GPIO_Init+0x320>)
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800514a:	4a60      	ldr	r2, [pc, #384]	; (80052cc <HAL_GPIO_Init+0x324>)
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	3302      	adds	r3, #2
 8005152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	220f      	movs	r2, #15
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a57      	ldr	r2, [pc, #348]	; (80052d0 <HAL_GPIO_Init+0x328>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d037      	beq.n	80051e6 <HAL_GPIO_Init+0x23e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a56      	ldr	r2, [pc, #344]	; (80052d4 <HAL_GPIO_Init+0x32c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <HAL_GPIO_Init+0x23a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a55      	ldr	r2, [pc, #340]	; (80052d8 <HAL_GPIO_Init+0x330>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d02b      	beq.n	80051de <HAL_GPIO_Init+0x236>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a54      	ldr	r2, [pc, #336]	; (80052dc <HAL_GPIO_Init+0x334>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d025      	beq.n	80051da <HAL_GPIO_Init+0x232>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a53      	ldr	r2, [pc, #332]	; (80052e0 <HAL_GPIO_Init+0x338>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01f      	beq.n	80051d6 <HAL_GPIO_Init+0x22e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a52      	ldr	r2, [pc, #328]	; (80052e4 <HAL_GPIO_Init+0x33c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d019      	beq.n	80051d2 <HAL_GPIO_Init+0x22a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a51      	ldr	r2, [pc, #324]	; (80052e8 <HAL_GPIO_Init+0x340>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_GPIO_Init+0x226>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a50      	ldr	r2, [pc, #320]	; (80052ec <HAL_GPIO_Init+0x344>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00d      	beq.n	80051ca <HAL_GPIO_Init+0x222>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a4f      	ldr	r2, [pc, #316]	; (80052f0 <HAL_GPIO_Init+0x348>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <HAL_GPIO_Init+0x21e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a4e      	ldr	r2, [pc, #312]	; (80052f4 <HAL_GPIO_Init+0x34c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <HAL_GPIO_Init+0x21a>
 80051be:	2309      	movs	r3, #9
 80051c0:	e012      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051c2:	230a      	movs	r3, #10
 80051c4:	e010      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051c6:	2308      	movs	r3, #8
 80051c8:	e00e      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051ca:	2307      	movs	r3, #7
 80051cc:	e00c      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051ce:	2306      	movs	r3, #6
 80051d0:	e00a      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051d2:	2305      	movs	r3, #5
 80051d4:	e008      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051d6:	2304      	movs	r3, #4
 80051d8:	e006      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051da:	2303      	movs	r3, #3
 80051dc:	e004      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051de:	2302      	movs	r3, #2
 80051e0:	e002      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <HAL_GPIO_Init+0x240>
 80051e6:	2300      	movs	r3, #0
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	f002 0203 	and.w	r2, r2, #3
 80051ee:	0092      	lsls	r2, r2, #2
 80051f0:	4093      	lsls	r3, r2
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051f8:	4934      	ldr	r1, [pc, #208]	; (80052cc <HAL_GPIO_Init+0x324>)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	089b      	lsrs	r3, r3, #2
 80051fe:	3302      	adds	r3, #2
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005206:	4b3c      	ldr	r3, [pc, #240]	; (80052f8 <HAL_GPIO_Init+0x350>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800522a:	4a33      	ldr	r2, [pc, #204]	; (80052f8 <HAL_GPIO_Init+0x350>)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005230:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <HAL_GPIO_Init+0x350>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005254:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <HAL_GPIO_Init+0x350>)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800525a:	4b27      	ldr	r3, [pc, #156]	; (80052f8 <HAL_GPIO_Init+0x350>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	43db      	mvns	r3, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4013      	ands	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800527e:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <HAL_GPIO_Init+0x350>)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005284:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <HAL_GPIO_Init+0x350>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	43db      	mvns	r3, r3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4013      	ands	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052a8:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <HAL_GPIO_Init+0x350>)
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3301      	adds	r3, #1
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b0f      	cmp	r3, #15
 80052b8:	f67f ae86 	bls.w	8004fc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052bc:	bf00      	nop
 80052be:	3724      	adds	r7, #36	; 0x24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40023800 	.word	0x40023800
 80052cc:	40013800 	.word	0x40013800
 80052d0:	40020000 	.word	0x40020000
 80052d4:	40020400 	.word	0x40020400
 80052d8:	40020800 	.word	0x40020800
 80052dc:	40020c00 	.word	0x40020c00
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40021400 	.word	0x40021400
 80052e8:	40021800 	.word	0x40021800
 80052ec:	40021c00 	.word	0x40021c00
 80052f0:	40022000 	.word	0x40022000
 80052f4:	40022400 	.word	0x40022400
 80052f8:	40013c00 	.word	0x40013c00

080052fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e0d9      	b.n	80054cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005318:	2201      	movs	r2, #1
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4013      	ands	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	f040 80c9 	bne.w	80054c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005334:	4a6a      	ldr	r2, [pc, #424]	; (80054e0 <HAL_GPIO_DeInit+0x1e4>)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	089b      	lsrs	r3, r3, #2
 800533a:	3302      	adds	r3, #2
 800533c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005340:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	220f      	movs	r2, #15
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	4013      	ands	r3, r2
 8005354:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a62      	ldr	r2, [pc, #392]	; (80054e4 <HAL_GPIO_DeInit+0x1e8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d037      	beq.n	80053ce <HAL_GPIO_DeInit+0xd2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a61      	ldr	r2, [pc, #388]	; (80054e8 <HAL_GPIO_DeInit+0x1ec>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d031      	beq.n	80053ca <HAL_GPIO_DeInit+0xce>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a60      	ldr	r2, [pc, #384]	; (80054ec <HAL_GPIO_DeInit+0x1f0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02b      	beq.n	80053c6 <HAL_GPIO_DeInit+0xca>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a5f      	ldr	r2, [pc, #380]	; (80054f0 <HAL_GPIO_DeInit+0x1f4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d025      	beq.n	80053c2 <HAL_GPIO_DeInit+0xc6>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a5e      	ldr	r2, [pc, #376]	; (80054f4 <HAL_GPIO_DeInit+0x1f8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01f      	beq.n	80053be <HAL_GPIO_DeInit+0xc2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a5d      	ldr	r2, [pc, #372]	; (80054f8 <HAL_GPIO_DeInit+0x1fc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d019      	beq.n	80053ba <HAL_GPIO_DeInit+0xbe>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a5c      	ldr	r2, [pc, #368]	; (80054fc <HAL_GPIO_DeInit+0x200>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <HAL_GPIO_DeInit+0xba>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a5b      	ldr	r2, [pc, #364]	; (8005500 <HAL_GPIO_DeInit+0x204>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00d      	beq.n	80053b2 <HAL_GPIO_DeInit+0xb6>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a5a      	ldr	r2, [pc, #360]	; (8005504 <HAL_GPIO_DeInit+0x208>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <HAL_GPIO_DeInit+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a59      	ldr	r2, [pc, #356]	; (8005508 <HAL_GPIO_DeInit+0x20c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d101      	bne.n	80053aa <HAL_GPIO_DeInit+0xae>
 80053a6:	2309      	movs	r3, #9
 80053a8:	e012      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053aa:	230a      	movs	r3, #10
 80053ac:	e010      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053ae:	2308      	movs	r3, #8
 80053b0:	e00e      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053b2:	2307      	movs	r3, #7
 80053b4:	e00c      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053b6:	2306      	movs	r3, #6
 80053b8:	e00a      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053ba:	2305      	movs	r3, #5
 80053bc:	e008      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053be:	2304      	movs	r3, #4
 80053c0:	e006      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053c2:	2303      	movs	r3, #3
 80053c4:	e004      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e002      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <HAL_GPIO_DeInit+0xd4>
 80053ce:	2300      	movs	r3, #0
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	f002 0203 	and.w	r2, r2, #3
 80053d6:	0092      	lsls	r2, r2, #2
 80053d8:	4093      	lsls	r3, r2
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d132      	bne.n	8005446 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	220f      	movs	r2, #15
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80053f0:	4a3b      	ldr	r2, [pc, #236]	; (80054e0 <HAL_GPIO_DeInit+0x1e4>)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	3302      	adds	r3, #2
 80053f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	43da      	mvns	r2, r3
 8005400:	4837      	ldr	r0, [pc, #220]	; (80054e0 <HAL_GPIO_DeInit+0x1e4>)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	089b      	lsrs	r3, r3, #2
 8005406:	400a      	ands	r2, r1
 8005408:	3302      	adds	r3, #2
 800540a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800540e:	4b3f      	ldr	r3, [pc, #252]	; (800550c <HAL_GPIO_DeInit+0x210>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	43db      	mvns	r3, r3
 8005416:	493d      	ldr	r1, [pc, #244]	; (800550c <HAL_GPIO_DeInit+0x210>)
 8005418:	4013      	ands	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800541c:	4b3b      	ldr	r3, [pc, #236]	; (800550c <HAL_GPIO_DeInit+0x210>)
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	43db      	mvns	r3, r3
 8005424:	4939      	ldr	r1, [pc, #228]	; (800550c <HAL_GPIO_DeInit+0x210>)
 8005426:	4013      	ands	r3, r2
 8005428:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800542a:	4b38      	ldr	r3, [pc, #224]	; (800550c <HAL_GPIO_DeInit+0x210>)
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	43db      	mvns	r3, r3
 8005432:	4936      	ldr	r1, [pc, #216]	; (800550c <HAL_GPIO_DeInit+0x210>)
 8005434:	4013      	ands	r3, r2
 8005436:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005438:	4b34      	ldr	r3, [pc, #208]	; (800550c <HAL_GPIO_DeInit+0x210>)
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	43db      	mvns	r3, r3
 8005440:	4932      	ldr	r1, [pc, #200]	; (800550c <HAL_GPIO_DeInit+0x210>)
 8005442:	4013      	ands	r3, r2
 8005444:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	2103      	movs	r1, #3
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	401a      	ands	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	08da      	lsrs	r2, r3, #3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3208      	adds	r2, #8
 8005464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	220f      	movs	r2, #15
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	08d2      	lsrs	r2, r2, #3
 800547c:	4019      	ands	r1, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3208      	adds	r2, #8
 8005482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	2103      	movs	r1, #3
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	401a      	ands	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	2101      	movs	r1, #1
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	fa01 f303 	lsl.w	r3, r1, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	401a      	ands	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	2103      	movs	r1, #3
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	401a      	ands	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	3301      	adds	r3, #1
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b0f      	cmp	r3, #15
 80054d0:	f67f af22 	bls.w	8005318 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40013800 	.word	0x40013800
 80054e4:	40020000 	.word	0x40020000
 80054e8:	40020400 	.word	0x40020400
 80054ec:	40020800 	.word	0x40020800
 80054f0:	40020c00 	.word	0x40020c00
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40021400 	.word	0x40021400
 80054fc:	40021800 	.word	0x40021800
 8005500:	40021c00 	.word	0x40021c00
 8005504:	40022000 	.word	0x40022000
 8005508:	40022400 	.word	0x40022400
 800550c:	40013c00 	.word	0x40013c00

08005510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	887b      	ldrh	r3, [r7, #2]
 8005522:	4013      	ands	r3, r2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e001      	b.n	8005532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	807b      	strh	r3, [r7, #2]
 800554c:	4613      	mov	r3, r2
 800554e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005550:	787b      	ldrb	r3, [r7, #1]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005556:	887a      	ldrh	r2, [r7, #2]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800555c:	e003      	b.n	8005566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800555e:	887b      	ldrh	r3, [r7, #2]
 8005560:	041a      	lsls	r2, r3, #16
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	619a      	str	r2, [r3, #24]
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800557e:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d006      	beq.n	8005598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800558a:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	4618      	mov	r0, r3
 8005594:	f002 fd08 	bl	8007fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40013c00 	.word	0x40013c00

080055a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e07f      	b.n	80056b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8a9 	bl	8005722 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2224      	movs	r2, #36	; 0x24
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005604:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d107      	bne.n	800561e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	e006      	b.n	800562c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800562a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d104      	bne.n	800563e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800563c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6859      	ldr	r1, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <HAL_I2C_Init+0x11c>)
 800564a:	430b      	orrs	r3, r1
 800564c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800565c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	ea42 0103 	orr.w	r1, r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69d9      	ldr	r1, [r3, #28]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	02008000 	.word	0x02008000

080056c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e021      	b.n	800571a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2224      	movs	r2, #36	; 0x24
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f821 	bl	8005736 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	4603      	mov	r3, r0
 800575c:	817b      	strh	r3, [r7, #10]
 800575e:	460b      	mov	r3, r1
 8005760:	813b      	strh	r3, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b20      	cmp	r3, #32
 8005770:	f040 80f9 	bne.w	8005966 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_I2C_Mem_Write+0x34>
 800577a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005786:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0ed      	b.n	8005968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_I2C_Mem_Write+0x4e>
 8005796:	2302      	movs	r3, #2
 8005798:	e0e6      	b.n	8005968 <HAL_I2C_Mem_Write+0x21c>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057a2:	f7fd f8c1 	bl	8002928 <HAL_GetTick>
 80057a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2319      	movs	r3, #25
 80057ae:	2201      	movs	r2, #1
 80057b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fad1 	bl	8005d5c <I2C_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0d1      	b.n	8005968 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2221      	movs	r2, #33	; 0x21
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a3a      	ldr	r2, [r7, #32]
 80057de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057ec:	88f8      	ldrh	r0, [r7, #6]
 80057ee:	893a      	ldrh	r2, [r7, #8]
 80057f0:	8979      	ldrh	r1, [r7, #10]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	4603      	mov	r3, r0
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f9e1 	bl	8005bc4 <I2C_RequestMemoryWrite>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0a9      	b.n	8005968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2bff      	cmp	r3, #255	; 0xff
 800581c:	d90e      	bls.n	800583c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	22ff      	movs	r2, #255	; 0xff
 8005822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005828:	b2da      	uxtb	r2, r3
 800582a:	8979      	ldrh	r1, [r7, #10]
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fbb3 	bl	8005fa0 <I2C_TransferConfig>
 800583a:	e00f      	b.n	800585c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584a:	b2da      	uxtb	r2, r3
 800584c:	8979      	ldrh	r1, [r7, #10]
 800584e:	2300      	movs	r3, #0
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fba2 	bl	8005fa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fabb 	bl	8005ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e07b      	b.n	8005968 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d034      	beq.n	8005914 <HAL_I2C_Mem_Write+0x1c8>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d130      	bne.n	8005914 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	2200      	movs	r2, #0
 80058ba:	2180      	movs	r1, #128	; 0x80
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 fa4d 	bl	8005d5c <I2C_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e04d      	b.n	8005968 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2bff      	cmp	r3, #255	; 0xff
 80058d4:	d90e      	bls.n	80058f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	22ff      	movs	r2, #255	; 0xff
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	8979      	ldrh	r1, [r7, #10]
 80058e4:	2300      	movs	r3, #0
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fb57 	bl	8005fa0 <I2C_TransferConfig>
 80058f2:	e00f      	b.n	8005914 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005902:	b2da      	uxtb	r2, r3
 8005904:	8979      	ldrh	r1, [r7, #10]
 8005906:	2300      	movs	r3, #0
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fb46 	bl	8005fa0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d19e      	bne.n	800585c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fa9a 	bl	8005e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e01a      	b.n	8005968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2220      	movs	r2, #32
 8005938:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <HAL_I2C_Mem_Write+0x224>)
 8005946:	400b      	ands	r3, r1
 8005948:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005966:	2302      	movs	r3, #2
  }
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	fe00e800 	.word	0xfe00e800

08005974 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	4608      	mov	r0, r1
 800597e:	4611      	mov	r1, r2
 8005980:	461a      	mov	r2, r3
 8005982:	4603      	mov	r3, r0
 8005984:	817b      	strh	r3, [r7, #10]
 8005986:	460b      	mov	r3, r1
 8005988:	813b      	strh	r3, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b20      	cmp	r3, #32
 8005998:	f040 80fd 	bne.w	8005b96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_I2C_Mem_Read+0x34>
 80059a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d105      	bne.n	80059b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0f1      	b.n	8005b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_I2C_Mem_Read+0x4e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e0ea      	b.n	8005b98 <HAL_I2C_Mem_Read+0x224>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059ca:	f7fc ffad 	bl	8002928 <HAL_GetTick>
 80059ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	2319      	movs	r3, #25
 80059d6:	2201      	movs	r2, #1
 80059d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f9bd 	bl	8005d5c <I2C_WaitOnFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0d5      	b.n	8005b98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2222      	movs	r2, #34	; 0x22
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2240      	movs	r2, #64	; 0x40
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a14:	88f8      	ldrh	r0, [r7, #6]
 8005a16:	893a      	ldrh	r2, [r7, #8]
 8005a18:	8979      	ldrh	r1, [r7, #10]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	9301      	str	r3, [sp, #4]
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	4603      	mov	r3, r0
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f921 	bl	8005c6c <I2C_RequestMemoryRead>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0ad      	b.n	8005b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2bff      	cmp	r3, #255	; 0xff
 8005a44:	d90e      	bls.n	8005a64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	22ff      	movs	r2, #255	; 0xff
 8005a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	8979      	ldrh	r1, [r7, #10]
 8005a54:	4b52      	ldr	r3, [pc, #328]	; (8005ba0 <HAL_I2C_Mem_Read+0x22c>)
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fa9f 	bl	8005fa0 <I2C_TransferConfig>
 8005a62:	e00f      	b.n	8005a84 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	8979      	ldrh	r1, [r7, #10]
 8005a76:	4b4a      	ldr	r3, [pc, #296]	; (8005ba0 <HAL_I2C_Mem_Read+0x22c>)
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 fa8e 	bl	8005fa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2104      	movs	r1, #4
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f964 	bl	8005d5c <I2C_WaitOnFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e07c      	b.n	8005b98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d034      	beq.n	8005b44 <HAL_I2C_Mem_Read+0x1d0>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d130      	bne.n	8005b44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f935 	bl	8005d5c <I2C_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e04d      	b.n	8005b98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2bff      	cmp	r3, #255	; 0xff
 8005b04:	d90e      	bls.n	8005b24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	22ff      	movs	r2, #255	; 0xff
 8005b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	8979      	ldrh	r1, [r7, #10]
 8005b14:	2300      	movs	r3, #0
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fa3f 	bl	8005fa0 <I2C_TransferConfig>
 8005b22:	e00f      	b.n	8005b44 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	8979      	ldrh	r1, [r7, #10]
 8005b36:	2300      	movs	r3, #0
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fa2e 	bl	8005fa0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d19a      	bne.n	8005a84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f982 	bl	8005e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e01a      	b.n	8005b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2220      	movs	r2, #32
 8005b68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6859      	ldr	r1, [r3, #4]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <HAL_I2C_Mem_Read+0x230>)
 8005b76:	400b      	ands	r3, r1
 8005b78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
  }
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	80002400 	.word	0x80002400
 8005ba4:	fe00e800 	.word	0xfe00e800

08005ba8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb6:	b2db      	uxtb	r3, r3
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	4608      	mov	r0, r1
 8005bce:	4611      	mov	r1, r2
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	817b      	strh	r3, [r7, #10]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	813b      	strh	r3, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	8979      	ldrh	r1, [r7, #10]
 8005be4:	4b20      	ldr	r3, [pc, #128]	; (8005c68 <I2C_RequestMemoryWrite+0xa4>)
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f9d7 	bl	8005fa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	69b9      	ldr	r1, [r7, #24]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f8f0 	bl	8005ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e02c      	b.n	8005c60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d105      	bne.n	8005c18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c0c:	893b      	ldrh	r3, [r7, #8]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	629a      	str	r2, [r3, #40]	; 0x28
 8005c16:	e015      	b.n	8005c44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c18:	893b      	ldrh	r3, [r7, #8]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f8d6 	bl	8005ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e012      	b.n	8005c60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c3a:	893b      	ldrh	r3, [r7, #8]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2180      	movs	r1, #128	; 0x80
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f884 	bl	8005d5c <I2C_WaitOnFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	80002000 	.word	0x80002000

08005c6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	4608      	mov	r0, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	817b      	strh	r3, [r7, #10]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	813b      	strh	r3, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	8979      	ldrh	r1, [r7, #10]
 8005c8c:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <I2C_RequestMemoryRead+0xa4>)
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	2300      	movs	r3, #0
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f984 	bl	8005fa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	69b9      	ldr	r1, [r7, #24]
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f89d 	bl	8005ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e02c      	b.n	8005d06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d105      	bne.n	8005cbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cb2:	893b      	ldrh	r3, [r7, #8]
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28
 8005cbc:	e015      	b.n	8005cea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cbe:	893b      	ldrh	r3, [r7, #8]
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	69b9      	ldr	r1, [r7, #24]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f883 	bl	8005ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e012      	b.n	8005d06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ce0:	893b      	ldrh	r3, [r7, #8]
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2140      	movs	r1, #64	; 0x40
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f831 	bl	8005d5c <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	80002000 	.word	0x80002000

08005d14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d103      	bne.n	8005d32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d007      	beq.n	8005d50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	619a      	str	r2, [r3, #24]
  }
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d6c:	e022      	b.n	8005db4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d01e      	beq.n	8005db4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fc fdd7 	bl	8002928 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d113      	bne.n	8005db4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	f043 0220 	orr.w	r2, r3, #32
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e00f      	b.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d0cd      	beq.n	8005d6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005de8:	e02c      	b.n	8005e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f870 	bl	8005ed4 <I2C_IsAcknowledgeFailed>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e02a      	b.n	8005e54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d01e      	beq.n	8005e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e06:	f7fc fd8f 	bl	8002928 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d302      	bcc.n	8005e1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d113      	bne.n	8005e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e20:	f043 0220 	orr.w	r2, r3, #32
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e007      	b.n	8005e54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d1cb      	bne.n	8005dea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e68:	e028      	b.n	8005ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f830 	bl	8005ed4 <I2C_IsAcknowledgeFailed>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e026      	b.n	8005ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7e:	f7fc fd53 	bl	8002928 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d302      	bcc.n	8005e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d113      	bne.n	8005ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e007      	b.n	8005ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d1cf      	bne.n	8005e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f003 0310 	and.w	r3, r3, #16
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d151      	bne.n	8005f92 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eee:	e022      	b.n	8005f36 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d01e      	beq.n	8005f36 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef8:	f7fc fd16 	bl	8002928 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <I2C_IsAcknowledgeFailed+0x3a>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d113      	bne.n	8005f36 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	f043 0220 	orr.w	r2, r3, #32
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e02e      	b.n	8005f94 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d1d5      	bne.n	8005ef0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2210      	movs	r2, #16
 8005f4a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2220      	movs	r2, #32
 8005f52:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff fedd 	bl	8005d14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6859      	ldr	r1, [r3, #4]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <I2C_IsAcknowledgeFailed+0xc8>)
 8005f66:	400b      	ands	r3, r1
 8005f68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	f043 0204 	orr.w	r2, r3, #4
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	fe00e800 	.word	0xfe00e800

08005fa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	817b      	strh	r3, [r7, #10]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	0d5b      	lsrs	r3, r3, #21
 8005fbc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <I2C_TransferConfig+0x58>)
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	ea02 0103 	and.w	r1, r2, r3
 8005fca:	897b      	ldrh	r3, [r7, #10]
 8005fcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005fd0:	7a7b      	ldrb	r3, [r7, #9]
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	03ff63ff 	.word	0x03ff63ff

08005ffc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e0bf      	b.n	800618e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f003 fa1e 	bl	8009464 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800603e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6999      	ldr	r1, [r3, #24]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006054:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6899      	ldr	r1, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b4a      	ldr	r3, [pc, #296]	; (8006198 <HAL_LTDC_Init+0x19c>)
 8006070:	400b      	ands	r3, r1
 8006072:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	041b      	lsls	r3, r3, #16
 800607a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6899      	ldr	r1, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68d9      	ldr	r1, [r3, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4b3e      	ldr	r3, [pc, #248]	; (8006198 <HAL_LTDC_Init+0x19c>)
 800609e:	400b      	ands	r3, r1
 80060a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68d9      	ldr	r1, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6919      	ldr	r1, [r3, #16]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b33      	ldr	r3, [pc, #204]	; (8006198 <HAL_LTDC_Init+0x19c>)
 80060cc:	400b      	ands	r3, r1
 80060ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	041b      	lsls	r3, r3, #16
 80060d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6919      	ldr	r1, [r3, #16]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6959      	ldr	r1, [r3, #20]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b27      	ldr	r3, [pc, #156]	; (8006198 <HAL_LTDC_Init+0x19c>)
 80060fa:	400b      	ands	r3, r1
 80060fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6959      	ldr	r1, [r3, #20]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800612c:	041b      	lsls	r3, r3, #16
 800612e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0206 	orr.w	r2, r2, #6
 800616a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	f000f800 	.word	0xf000f800

0800619c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800619c:	b5b0      	push	{r4, r5, r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_LTDC_ConfigLayer+0x1a>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e02c      	b.n	8006210 <HAL_LTDC_ConfigLayer+0x74>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2202      	movs	r2, #2
 80061c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2134      	movs	r1, #52	; 0x34
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	4413      	add	r3, r2
 80061d2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4614      	mov	r4, r2
 80061da:	461d      	mov	r5, r3
 80061dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f811 	bl	8006218 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2201      	movs	r2, #1
 80061fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bdb0      	pop	{r4, r5, r7, pc}

08006218 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	0c1b      	lsrs	r3, r3, #16
 8006230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006234:	4413      	add	r3, r2
 8006236:	041b      	lsls	r3, r3, #16
 8006238:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	01db      	lsls	r3, r3, #7
 8006244:	4413      	add	r3, r2
 8006246:	3384      	adds	r3, #132	; 0x84
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	4611      	mov	r1, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	01d2      	lsls	r2, r2, #7
 8006254:	440a      	add	r2, r1
 8006256:	3284      	adds	r2, #132	; 0x84
 8006258:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800625c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626e:	4413      	add	r3, r2
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	01db      	lsls	r3, r3, #7
 800627c:	440b      	add	r3, r1
 800627e:	3384      	adds	r3, #132	; 0x84
 8006280:	4619      	mov	r1, r3
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4313      	orrs	r3, r2
 8006286:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006296:	4413      	add	r3, r2
 8006298:	041b      	lsls	r3, r3, #16
 800629a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	01db      	lsls	r3, r3, #7
 80062a6:	4413      	add	r3, r2
 80062a8:	3384      	adds	r3, #132	; 0x84
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	4611      	mov	r1, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	01d2      	lsls	r2, r2, #7
 80062b6:	440a      	add	r2, r1
 80062b8:	3284      	adds	r2, #132	; 0x84
 80062ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ce:	4413      	add	r3, r2
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	440b      	add	r3, r1
 80062de:	3384      	adds	r3, #132	; 0x84
 80062e0:	4619      	mov	r1, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	01db      	lsls	r3, r3, #7
 80062f2:	4413      	add	r3, r2
 80062f4:	3384      	adds	r3, #132	; 0x84
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	4611      	mov	r1, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	01d2      	lsls	r2, r2, #7
 8006302:	440a      	add	r2, r1
 8006304:	3284      	adds	r2, #132	; 0x84
 8006306:	f023 0307 	bic.w	r3, r3, #7
 800630a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	01db      	lsls	r3, r3, #7
 8006316:	4413      	add	r3, r2
 8006318:	3384      	adds	r3, #132	; 0x84
 800631a:	461a      	mov	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006332:	041b      	lsls	r3, r3, #16
 8006334:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	061b      	lsls	r3, r3, #24
 800633c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	01db      	lsls	r3, r3, #7
 8006348:	4413      	add	r3, r2
 800634a:	3384      	adds	r3, #132	; 0x84
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	01db      	lsls	r3, r3, #7
 8006358:	4413      	add	r3, r2
 800635a:	3384      	adds	r3, #132	; 0x84
 800635c:	461a      	mov	r2, r3
 800635e:	2300      	movs	r3, #0
 8006360:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006368:	461a      	mov	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	431a      	orrs	r2, r3
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	431a      	orrs	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4619      	mov	r1, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	01db      	lsls	r3, r3, #7
 800637c:	440b      	add	r3, r1
 800637e:	3384      	adds	r3, #132	; 0x84
 8006380:	4619      	mov	r1, r3
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	01db      	lsls	r3, r3, #7
 8006392:	4413      	add	r3, r2
 8006394:	3384      	adds	r3, #132	; 0x84
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	4611      	mov	r1, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	01d2      	lsls	r2, r2, #7
 80063a2:	440a      	add	r2, r1
 80063a4:	3284      	adds	r2, #132	; 0x84
 80063a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	01db      	lsls	r3, r3, #7
 80063b6:	4413      	add	r3, r2
 80063b8:	3384      	adds	r3, #132	; 0x84
 80063ba:	461a      	mov	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	01db      	lsls	r3, r3, #7
 80063cc:	4413      	add	r3, r2
 80063ce:	3384      	adds	r3, #132	; 0x84
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	01db      	lsls	r3, r3, #7
 80063dc:	440b      	add	r3, r1
 80063de:	3384      	adds	r3, #132	; 0x84
 80063e0:	4619      	mov	r1, r3
 80063e2:	4b58      	ldr	r3, [pc, #352]	; (8006544 <LTDC_SetConfig+0x32c>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	68f9      	ldr	r1, [r7, #12]
 80063f2:	6809      	ldr	r1, [r1, #0]
 80063f4:	4608      	mov	r0, r1
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	01c9      	lsls	r1, r1, #7
 80063fa:	4401      	add	r1, r0
 80063fc:	3184      	adds	r1, #132	; 0x84
 80063fe:	4313      	orrs	r3, r2
 8006400:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	01db      	lsls	r3, r3, #7
 800640c:	4413      	add	r3, r2
 800640e:	3384      	adds	r3, #132	; 0x84
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	01db      	lsls	r3, r3, #7
 800641c:	4413      	add	r3, r2
 800641e:	3384      	adds	r3, #132	; 0x84
 8006420:	461a      	mov	r2, r3
 8006422:	2300      	movs	r3, #0
 8006424:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	01db      	lsls	r3, r3, #7
 8006430:	4413      	add	r3, r2
 8006432:	3384      	adds	r3, #132	; 0x84
 8006434:	461a      	mov	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006444:	2304      	movs	r3, #4
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	e01b      	b.n	8006482 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d102      	bne.n	8006458 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006452:	2303      	movs	r3, #3
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	e014      	b.n	8006482 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b04      	cmp	r3, #4
 800645e:	d00b      	beq.n	8006478 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006464:	2b02      	cmp	r3, #2
 8006466:	d007      	beq.n	8006478 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800646c:	2b03      	cmp	r3, #3
 800646e:	d003      	beq.n	8006478 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006474:	2b07      	cmp	r3, #7
 8006476:	d102      	bne.n	800647e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006478:	2302      	movs	r3, #2
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e001      	b.n	8006482 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800647e:	2301      	movs	r3, #1
 8006480:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	4413      	add	r3, r2
 800648e:	3384      	adds	r3, #132	; 0x84
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	4611      	mov	r1, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	01d2      	lsls	r2, r2, #7
 800649c:	440a      	add	r2, r1
 800649e:	3284      	adds	r2, #132	; 0x84
 80064a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80064a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	fb02 f303 	mul.w	r3, r2, r3
 80064b0:	041a      	lsls	r2, r3, #16
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6859      	ldr	r1, [r3, #4]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	1acb      	subs	r3, r1, r3
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	fb01 f303 	mul.w	r3, r1, r3
 80064c2:	3303      	adds	r3, #3
 80064c4:	68f9      	ldr	r1, [r7, #12]
 80064c6:	6809      	ldr	r1, [r1, #0]
 80064c8:	4608      	mov	r0, r1
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	01c9      	lsls	r1, r1, #7
 80064ce:	4401      	add	r1, r0
 80064d0:	3184      	adds	r1, #132	; 0x84
 80064d2:	4313      	orrs	r3, r2
 80064d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	01db      	lsls	r3, r3, #7
 80064e0:	4413      	add	r3, r2
 80064e2:	3384      	adds	r3, #132	; 0x84
 80064e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4619      	mov	r1, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	01db      	lsls	r3, r3, #7
 80064f0:	440b      	add	r3, r1
 80064f2:	3384      	adds	r3, #132	; 0x84
 80064f4:	4619      	mov	r1, r3
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <LTDC_SetConfig+0x330>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	01db      	lsls	r3, r3, #7
 8006506:	4413      	add	r3, r2
 8006508:	3384      	adds	r3, #132	; 0x84
 800650a:	461a      	mov	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	4413      	add	r3, r2
 800651e:	3384      	adds	r3, #132	; 0x84
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	4611      	mov	r1, r2
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	01d2      	lsls	r2, r2, #7
 800652c:	440a      	add	r2, r1
 800652e:	3284      	adds	r2, #132	; 0x84
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	6013      	str	r3, [r2, #0]
}
 8006536:	bf00      	nop
 8006538:	3724      	adds	r7, #36	; 0x24
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	fffff8f8 	.word	0xfffff8f8
 8006548:	fffff800 	.word	0xfffff800

0800654c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800655e:	2200      	movs	r2, #0
 8006560:	e001      	b.n	8006566 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8006562:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d102      	bne.n	8006578 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8006572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006576:	e000      	b.n	800657a <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006578:	2200      	movs	r2, #0
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d102      	bne.n	800658c <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8006586:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800658a:	e000      	b.n	800658e <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800658c:	2200      	movs	r2, #0
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	1e5a      	subs	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	4413      	add	r3, r2
 80065a6:	1e5a      	subs	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	441a      	add	r2, r3
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	4413      	add	r3, r2
 80065bc:	1e5a      	subs	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	441a      	add	r2, r3
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	441a      	add	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	4413      	add	r3, r2
 80065d8:	1e5a      	subs	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065f6:	4b23      	ldr	r3, [pc, #140]	; (8006684 <HAL_PWREx_EnableOverDrive+0x98>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	4a22      	ldr	r2, [pc, #136]	; (8006684 <HAL_PWREx_EnableOverDrive+0x98>)
 80065fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006600:	6413      	str	r3, [r2, #64]	; 0x40
 8006602:	4b20      	ldr	r3, [pc, #128]	; (8006684 <HAL_PWREx_EnableOverDrive+0x98>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800660e:	4b1e      	ldr	r3, [pc, #120]	; (8006688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a1d      	ldr	r2, [pc, #116]	; (8006688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006618:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800661a:	f7fc f985 	bl	8002928 <HAL_GetTick>
 800661e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006620:	e009      	b.n	8006636 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006622:	f7fc f981 	bl	8002928 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006630:	d901      	bls.n	8006636 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e022      	b.n	800667c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800663e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006642:	d1ee      	bne.n	8006622 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006644:	4b10      	ldr	r3, [pc, #64]	; (8006688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a0f      	ldr	r2, [pc, #60]	; (8006688 <HAL_PWREx_EnableOverDrive+0x9c>)
 800664a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800664e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006650:	f7fc f96a 	bl	8002928 <HAL_GetTick>
 8006654:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006656:	e009      	b.n	800666c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006658:	f7fc f966 	bl	8002928 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006666:	d901      	bls.n	800666c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e007      	b.n	800667c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800666c:	4b06      	ldr	r3, [pc, #24]	; (8006688 <HAL_PWREx_EnableOverDrive+0x9c>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006678:	d1ee      	bne.n	8006658 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40023800 	.word	0x40023800
 8006688:	40007000 	.word	0x40007000

0800668c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006694:	2300      	movs	r3, #0
 8006696:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e25e      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8087 	beq.w	80067be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066b0:	4b96      	ldr	r3, [pc, #600]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 030c 	and.w	r3, r3, #12
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d00c      	beq.n	80066d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066bc:	4b93      	ldr	r3, [pc, #588]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 030c 	and.w	r3, r3, #12
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d112      	bne.n	80066ee <HAL_RCC_OscConfig+0x62>
 80066c8:	4b90      	ldr	r3, [pc, #576]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d4:	d10b      	bne.n	80066ee <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066d6:	4b8d      	ldr	r3, [pc, #564]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d06c      	beq.n	80067bc <HAL_RCC_OscConfig+0x130>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d168      	bne.n	80067bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e238      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f6:	d106      	bne.n	8006706 <HAL_RCC_OscConfig+0x7a>
 80066f8:	4b84      	ldr	r3, [pc, #528]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a83      	ldr	r2, [pc, #524]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80066fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e02e      	b.n	8006764 <HAL_RCC_OscConfig+0xd8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10c      	bne.n	8006728 <HAL_RCC_OscConfig+0x9c>
 800670e:	4b7f      	ldr	r3, [pc, #508]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a7e      	ldr	r2, [pc, #504]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	4b7c      	ldr	r3, [pc, #496]	; (800690c <HAL_RCC_OscConfig+0x280>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a7b      	ldr	r2, [pc, #492]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	e01d      	b.n	8006764 <HAL_RCC_OscConfig+0xd8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006730:	d10c      	bne.n	800674c <HAL_RCC_OscConfig+0xc0>
 8006732:	4b76      	ldr	r3, [pc, #472]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a75      	ldr	r2, [pc, #468]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	4b73      	ldr	r3, [pc, #460]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a72      	ldr	r2, [pc, #456]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e00b      	b.n	8006764 <HAL_RCC_OscConfig+0xd8>
 800674c:	4b6f      	ldr	r3, [pc, #444]	; (800690c <HAL_RCC_OscConfig+0x280>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a6e      	ldr	r2, [pc, #440]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	4b6c      	ldr	r3, [pc, #432]	; (800690c <HAL_RCC_OscConfig+0x280>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a6b      	ldr	r2, [pc, #428]	; (800690c <HAL_RCC_OscConfig+0x280>)
 800675e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d013      	beq.n	8006794 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fc f8dc 	bl	8002928 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006774:	f7fc f8d8 	bl	8002928 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b64      	cmp	r3, #100	; 0x64
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e1ec      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006786:	4b61      	ldr	r3, [pc, #388]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0f0      	beq.n	8006774 <HAL_RCC_OscConfig+0xe8>
 8006792:	e014      	b.n	80067be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006794:	f7fc f8c8 	bl	8002928 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800679c:	f7fc f8c4 	bl	8002928 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b64      	cmp	r3, #100	; 0x64
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e1d8      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ae:	4b57      	ldr	r3, [pc, #348]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x110>
 80067ba:	e000      	b.n	80067be <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d069      	beq.n	800689e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067ca:	4b50      	ldr	r3, [pc, #320]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 030c 	and.w	r3, r3, #12
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067d6:	4b4d      	ldr	r3, [pc, #308]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 030c 	and.w	r3, r3, #12
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d11c      	bne.n	800681c <HAL_RCC_OscConfig+0x190>
 80067e2:	4b4a      	ldr	r3, [pc, #296]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d116      	bne.n	800681c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ee:	4b47      	ldr	r3, [pc, #284]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <HAL_RCC_OscConfig+0x17a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d001      	beq.n	8006806 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e1ac      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006806:	4b41      	ldr	r3, [pc, #260]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	493d      	ldr	r1, [pc, #244]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006816:	4313      	orrs	r3, r2
 8006818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800681a:	e040      	b.n	800689e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d023      	beq.n	800686c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006824:	4b39      	ldr	r3, [pc, #228]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a38      	ldr	r2, [pc, #224]	; (800690c <HAL_RCC_OscConfig+0x280>)
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006830:	f7fc f87a 	bl	8002928 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006838:	f7fc f876 	bl	8002928 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e18a      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684a:	4b30      	ldr	r3, [pc, #192]	; (800690c <HAL_RCC_OscConfig+0x280>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0f0      	beq.n	8006838 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006856:	4b2d      	ldr	r3, [pc, #180]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	4929      	ldr	r1, [pc, #164]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006866:	4313      	orrs	r3, r2
 8006868:	600b      	str	r3, [r1, #0]
 800686a:	e018      	b.n	800689e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686c:	4b27      	ldr	r3, [pc, #156]	; (800690c <HAL_RCC_OscConfig+0x280>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a26      	ldr	r2, [pc, #152]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fc f856 	bl	8002928 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006880:	f7fc f852 	bl	8002928 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e166      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006892:	4b1e      	ldr	r3, [pc, #120]	; (800690c <HAL_RCC_OscConfig+0x280>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d038      	beq.n	800691c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d019      	beq.n	80068e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068b2:	4b16      	ldr	r3, [pc, #88]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80068b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b6:	4a15      	ldr	r2, [pc, #84]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068be:	f7fc f833 	bl	8002928 <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068c6:	f7fc f82f 	bl	8002928 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e143      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80068da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_OscConfig+0x23a>
 80068e4:	e01a      	b.n	800691c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e6:	4b09      	ldr	r3, [pc, #36]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80068e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ea:	4a08      	ldr	r2, [pc, #32]	; (800690c <HAL_RCC_OscConfig+0x280>)
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f2:	f7fc f819 	bl	8002928 <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f8:	e00a      	b.n	8006910 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068fa:	f7fc f815 	bl	8002928 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d903      	bls.n	8006910 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e129      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
 800690c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006910:	4b95      	ldr	r3, [pc, #596]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1ee      	bne.n	80068fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80a4 	beq.w	8006a72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800692a:	4b8f      	ldr	r3, [pc, #572]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10d      	bne.n	8006952 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006936:	4b8c      	ldr	r3, [pc, #560]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	4a8b      	ldr	r2, [pc, #556]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 800693c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006940:	6413      	str	r3, [r2, #64]	; 0x40
 8006942:	4b89      	ldr	r3, [pc, #548]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800694e:	2301      	movs	r3, #1
 8006950:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006952:	4b86      	ldr	r3, [pc, #536]	; (8006b6c <HAL_RCC_OscConfig+0x4e0>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695a:	2b00      	cmp	r3, #0
 800695c:	d118      	bne.n	8006990 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800695e:	4b83      	ldr	r3, [pc, #524]	; (8006b6c <HAL_RCC_OscConfig+0x4e0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a82      	ldr	r2, [pc, #520]	; (8006b6c <HAL_RCC_OscConfig+0x4e0>)
 8006964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800696a:	f7fb ffdd 	bl	8002928 <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006972:	f7fb ffd9 	bl	8002928 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b64      	cmp	r3, #100	; 0x64
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e0ed      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006984:	4b79      	ldr	r3, [pc, #484]	; (8006b6c <HAL_RCC_OscConfig+0x4e0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0f0      	beq.n	8006972 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d106      	bne.n	80069a6 <HAL_RCC_OscConfig+0x31a>
 8006998:	4b73      	ldr	r3, [pc, #460]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699c:	4a72      	ldr	r2, [pc, #456]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6713      	str	r3, [r2, #112]	; 0x70
 80069a4:	e02d      	b.n	8006a02 <HAL_RCC_OscConfig+0x376>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10c      	bne.n	80069c8 <HAL_RCC_OscConfig+0x33c>
 80069ae:	4b6e      	ldr	r3, [pc, #440]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	4a6d      	ldr	r2, [pc, #436]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	6713      	str	r3, [r2, #112]	; 0x70
 80069ba:	4b6b      	ldr	r3, [pc, #428]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	4a6a      	ldr	r2, [pc, #424]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069c0:	f023 0304 	bic.w	r3, r3, #4
 80069c4:	6713      	str	r3, [r2, #112]	; 0x70
 80069c6:	e01c      	b.n	8006a02 <HAL_RCC_OscConfig+0x376>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	d10c      	bne.n	80069ea <HAL_RCC_OscConfig+0x35e>
 80069d0:	4b65      	ldr	r3, [pc, #404]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	4a64      	ldr	r2, [pc, #400]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069d6:	f043 0304 	orr.w	r3, r3, #4
 80069da:	6713      	str	r3, [r2, #112]	; 0x70
 80069dc:	4b62      	ldr	r3, [pc, #392]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e0:	4a61      	ldr	r2, [pc, #388]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	6713      	str	r3, [r2, #112]	; 0x70
 80069e8:	e00b      	b.n	8006a02 <HAL_RCC_OscConfig+0x376>
 80069ea:	4b5f      	ldr	r3, [pc, #380]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ee:	4a5e      	ldr	r2, [pc, #376]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	6713      	str	r3, [r2, #112]	; 0x70
 80069f6:	4b5c      	ldr	r3, [pc, #368]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fa:	4a5b      	ldr	r2, [pc, #364]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 80069fc:	f023 0304 	bic.w	r3, r3, #4
 8006a00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d015      	beq.n	8006a36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0a:	f7fb ff8d 	bl	8002928 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a10:	e00a      	b.n	8006a28 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a12:	f7fb ff89 	bl	8002928 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e09b      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a28:	4b4f      	ldr	r3, [pc, #316]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0ee      	beq.n	8006a12 <HAL_RCC_OscConfig+0x386>
 8006a34:	e014      	b.n	8006a60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a36:	f7fb ff77 	bl	8002928 <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3c:	e00a      	b.n	8006a54 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a3e:	f7fb ff73 	bl	8002928 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e085      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a54:	4b44      	ldr	r3, [pc, #272]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1ee      	bne.n	8006a3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a60:	7dfb      	ldrb	r3, [r7, #23]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d105      	bne.n	8006a72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a66:	4b40      	ldr	r3, [pc, #256]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	4a3f      	ldr	r2, [pc, #252]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d071      	beq.n	8006b5e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a7a:	4b3b      	ldr	r3, [pc, #236]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d069      	beq.n	8006b5a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d14b      	bne.n	8006b26 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8e:	4b36      	ldr	r3, [pc, #216]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a35      	ldr	r2, [pc, #212]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9a:	f7fb ff45 	bl	8002928 <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa2:	f7fb ff41 	bl	8002928 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e055      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab4:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f0      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	019b      	lsls	r3, r3, #6
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	061b      	lsls	r3, r3, #24
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	071b      	lsls	r3, r3, #28
 8006aec:	491e      	ldr	r1, [pc, #120]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006af2:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1c      	ldr	r2, [pc, #112]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7fb ff13 	bl	8002928 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b06:	f7fb ff0f 	bl	8002928 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e023      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b18:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x47a>
 8006b24:	e01b      	b.n	8006b5e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a0f      	ldr	r2, [pc, #60]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fb fef9 	bl	8002928 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3a:	f7fb fef5 	bl	8002928 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e009      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <HAL_RCC_OscConfig+0x4dc>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1f0      	bne.n	8006b3a <HAL_RCC_OscConfig+0x4ae>
 8006b58:	e001      	b.n	8006b5e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	40007000 	.word	0x40007000

08006b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0ce      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b88:	4b69      	ldr	r3, [pc, #420]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d910      	bls.n	8006bb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b96:	4b66      	ldr	r3, [pc, #408]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f023 020f 	bic.w	r2, r3, #15
 8006b9e:	4964      	ldr	r1, [pc, #400]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba6:	4b62      	ldr	r3, [pc, #392]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d001      	beq.n	8006bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0b6      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d020      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bd0:	4b58      	ldr	r3, [pc, #352]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	4a57      	ldr	r2, [pc, #348]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006be8:	4b52      	ldr	r3, [pc, #328]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4a51      	ldr	r2, [pc, #324]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bf4:	4b4f      	ldr	r3, [pc, #316]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	494c      	ldr	r1, [pc, #304]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d040      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d107      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1a:	4b46      	ldr	r3, [pc, #280]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d115      	bne.n	8006c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e07d      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d107      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c32:	4b40      	ldr	r3, [pc, #256]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d109      	bne.n	8006c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e071      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c42:	4b3c      	ldr	r3, [pc, #240]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e069      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c52:	4b38      	ldr	r3, [pc, #224]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f023 0203 	bic.w	r2, r3, #3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	4935      	ldr	r1, [pc, #212]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c64:	f7fb fe60 	bl	8002928 <HAL_GetTick>
 8006c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6a:	e00a      	b.n	8006c82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c6c:	f7fb fe5c 	bl	8002928 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e051      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c82:	4b2c      	ldr	r3, [pc, #176]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 020c 	and.w	r2, r3, #12
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d1eb      	bne.n	8006c6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c94:	4b26      	ldr	r3, [pc, #152]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d210      	bcs.n	8006cc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca2:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f023 020f 	bic.w	r2, r3, #15
 8006caa:	4921      	ldr	r1, [pc, #132]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb2:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e030      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cd0:	4b18      	ldr	r3, [pc, #96]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	4915      	ldr	r1, [pc, #84]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cee:	4b11      	ldr	r3, [pc, #68]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	490d      	ldr	r1, [pc, #52]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d02:	f000 f81d 	bl	8006d40 <HAL_RCC_GetSysClockFreq>
 8006d06:	4601      	mov	r1, r0
 8006d08:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	091b      	lsrs	r3, r3, #4
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006d14:	5cd3      	ldrb	r3, [r2, r3]
 8006d16:	fa21 f303 	lsr.w	r3, r1, r3
 8006d1a:	4a08      	ldr	r2, [pc, #32]	; (8006d3c <HAL_RCC_ClockConfig+0x1cc>)
 8006d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f7fb fdbe 	bl	80028a0 <HAL_InitTick>

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40023c00 	.word	0x40023c00
 8006d34:	40023800 	.word	0x40023800
 8006d38:	0800ca38 	.word	0x0800ca38
 8006d3c:	200000a4 	.word	0x200000a4

08006d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	607b      	str	r3, [r7, #4]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d56:	4b50      	ldr	r3, [pc, #320]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 030c 	and.w	r3, r3, #12
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d007      	beq.n	8006d72 <HAL_RCC_GetSysClockFreq+0x32>
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d008      	beq.n	8006d78 <HAL_RCC_GetSysClockFreq+0x38>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 808d 	bne.w	8006e86 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d6c:	4b4b      	ldr	r3, [pc, #300]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006d6e:	60bb      	str	r3, [r7, #8]
       break;
 8006d70:	e08c      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d72:	4b4b      	ldr	r3, [pc, #300]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d74:	60bb      	str	r3, [r7, #8]
      break;
 8006d76:	e089      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d78:	4b47      	ldr	r3, [pc, #284]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d80:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006d82:	4b45      	ldr	r3, [pc, #276]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d023      	beq.n	8006dd6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d8e:	4b42      	ldr	r3, [pc, #264]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	099b      	lsrs	r3, r3, #6
 8006d94:	f04f 0400 	mov.w	r4, #0
 8006d98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	ea03 0501 	and.w	r5, r3, r1
 8006da4:	ea04 0602 	and.w	r6, r4, r2
 8006da8:	4a3d      	ldr	r2, [pc, #244]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006daa:	fb02 f106 	mul.w	r1, r2, r6
 8006dae:	2200      	movs	r2, #0
 8006db0:	fb02 f205 	mul.w	r2, r2, r5
 8006db4:	440a      	add	r2, r1
 8006db6:	493a      	ldr	r1, [pc, #232]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006db8:	fba5 0101 	umull	r0, r1, r5, r1
 8006dbc:	1853      	adds	r3, r2, r1
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f04f 0400 	mov.w	r4, #0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4623      	mov	r3, r4
 8006dca:	f7f9 fa89 	bl	80002e0 <__aeabi_uldivmod>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e049      	b.n	8006e6a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd6:	4b30      	ldr	r3, [pc, #192]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	099b      	lsrs	r3, r3, #6
 8006ddc:	f04f 0400 	mov.w	r4, #0
 8006de0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	ea03 0501 	and.w	r5, r3, r1
 8006dec:	ea04 0602 	and.w	r6, r4, r2
 8006df0:	4629      	mov	r1, r5
 8006df2:	4632      	mov	r2, r6
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	f04f 0400 	mov.w	r4, #0
 8006dfc:	0154      	lsls	r4, r2, #5
 8006dfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e02:	014b      	lsls	r3, r1, #5
 8006e04:	4619      	mov	r1, r3
 8006e06:	4622      	mov	r2, r4
 8006e08:	1b49      	subs	r1, r1, r5
 8006e0a:	eb62 0206 	sbc.w	r2, r2, r6
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	f04f 0400 	mov.w	r4, #0
 8006e16:	0194      	lsls	r4, r2, #6
 8006e18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e1c:	018b      	lsls	r3, r1, #6
 8006e1e:	1a5b      	subs	r3, r3, r1
 8006e20:	eb64 0402 	sbc.w	r4, r4, r2
 8006e24:	f04f 0100 	mov.w	r1, #0
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	00e2      	lsls	r2, r4, #3
 8006e2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e32:	00d9      	lsls	r1, r3, #3
 8006e34:	460b      	mov	r3, r1
 8006e36:	4614      	mov	r4, r2
 8006e38:	195b      	adds	r3, r3, r5
 8006e3a:	eb44 0406 	adc.w	r4, r4, r6
 8006e3e:	f04f 0100 	mov.w	r1, #0
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	02a2      	lsls	r2, r4, #10
 8006e48:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006e4c:	0299      	lsls	r1, r3, #10
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4614      	mov	r4, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	4621      	mov	r1, r4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f04f 0400 	mov.w	r4, #0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4623      	mov	r3, r4
 8006e60:	f7f9 fa3e 	bl	80002e0 <__aeabi_uldivmod>
 8006e64:	4603      	mov	r3, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	0c1b      	lsrs	r3, r3, #16
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	3301      	adds	r3, #1
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	60bb      	str	r3, [r7, #8]
      break;
 8006e84:	e002      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e86:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006e88:	60bb      	str	r3, [r7, #8]
      break;
 8006e8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	00f42400 	.word	0x00f42400
 8006ea0:	017d7840 	.word	0x017d7840

08006ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d012      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ecc:	4b69      	ldr	r3, [pc, #420]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4a68      	ldr	r2, [pc, #416]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ed6:	6093      	str	r3, [r2, #8]
 8006ed8:	4b66      	ldr	r3, [pc, #408]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee0:	4964      	ldr	r1, [pc, #400]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d017      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006efe:	4b5d      	ldr	r3, [pc, #372]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0c:	4959      	ldr	r1, [pc, #356]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1c:	d101      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d017      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f3a:	4b4e      	ldr	r3, [pc, #312]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	494a      	ldr	r1, [pc, #296]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f58:	d101      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f66:	2301      	movs	r3, #1
 8006f68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f76:	2301      	movs	r3, #1
 8006f78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 808b 	beq.w	800709e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f88:	4b3a      	ldr	r3, [pc, #232]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	4a39      	ldr	r2, [pc, #228]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f92:	6413      	str	r3, [r2, #64]	; 0x40
 8006f94:	4b37      	ldr	r3, [pc, #220]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fa0:	4b35      	ldr	r3, [pc, #212]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a34      	ldr	r2, [pc, #208]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fac:	f7fb fcbc 	bl	8002928 <HAL_GetTick>
 8006fb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb4:	f7fb fcb8 	bl	8002928 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b64      	cmp	r3, #100	; 0x64
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e38d      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fc6:	4b2c      	ldr	r3, [pc, #176]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f0      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fd2:	4b28      	ldr	r3, [pc, #160]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d035      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d02e      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ff0:	4b20      	ldr	r3, [pc, #128]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ffa:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffe:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007004:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007006:	4b1b      	ldr	r3, [pc, #108]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700a:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007010:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007012:	4a18      	ldr	r2, [pc, #96]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007018:	4b16      	ldr	r3, [pc, #88]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b01      	cmp	r3, #1
 8007022:	d114      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007024:	f7fb fc80 	bl	8002928 <HAL_GetTick>
 8007028:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702a:	e00a      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800702c:	f7fb fc7c 	bl	8002928 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f241 3288 	movw	r2, #5000	; 0x1388
 800703a:	4293      	cmp	r3, r2
 800703c:	d901      	bls.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e34f      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007042:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0ee      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705a:	d111      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007068:	4b04      	ldr	r3, [pc, #16]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800706a:	400b      	ands	r3, r1
 800706c:	4901      	ldr	r1, [pc, #4]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800706e:	4313      	orrs	r3, r2
 8007070:	608b      	str	r3, [r1, #8]
 8007072:	e00b      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007074:	40023800 	.word	0x40023800
 8007078:	40007000 	.word	0x40007000
 800707c:	0ffffcff 	.word	0x0ffffcff
 8007080:	4bb3      	ldr	r3, [pc, #716]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	4ab2      	ldr	r2, [pc, #712]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007086:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800708a:	6093      	str	r3, [r2, #8]
 800708c:	4bb0      	ldr	r3, [pc, #704]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800708e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007098:	49ad      	ldr	r1, [pc, #692]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800709a:	4313      	orrs	r3, r2
 800709c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d010      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070aa:	4ba9      	ldr	r3, [pc, #676]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b0:	4aa7      	ldr	r2, [pc, #668]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070ba:	4ba5      	ldr	r3, [pc, #660]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	49a2      	ldr	r1, [pc, #648]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00a      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070d8:	4b9d      	ldr	r3, [pc, #628]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e6:	499a      	ldr	r1, [pc, #616]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00a      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070fa:	4b95      	ldr	r3, [pc, #596]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007108:	4991      	ldr	r1, [pc, #580]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800710a:	4313      	orrs	r3, r2
 800710c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00a      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800711c:	4b8c      	ldr	r3, [pc, #560]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800711e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712a:	4989      	ldr	r1, [pc, #548]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800712c:	4313      	orrs	r3, r2
 800712e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800713e:	4b84      	ldr	r3, [pc, #528]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007144:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714c:	4980      	ldr	r1, [pc, #512]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007160:	4b7b      	ldr	r3, [pc, #492]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	f023 0203 	bic.w	r2, r3, #3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716e:	4978      	ldr	r1, [pc, #480]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007170:	4313      	orrs	r3, r2
 8007172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007182:	4b73      	ldr	r3, [pc, #460]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007188:	f023 020c 	bic.w	r2, r3, #12
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007190:	496f      	ldr	r1, [pc, #444]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007192:	4313      	orrs	r3, r2
 8007194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071a4:	4b6a      	ldr	r3, [pc, #424]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b2:	4967      	ldr	r1, [pc, #412]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071c6:	4b62      	ldr	r3, [pc, #392]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d4:	495e      	ldr	r1, [pc, #376]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071e8:	4b59      	ldr	r3, [pc, #356]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	4956      	ldr	r1, [pc, #344]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800720a:	4b51      	ldr	r3, [pc, #324]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800720c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007210:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007218:	494d      	ldr	r1, [pc, #308]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800722c:	4b48      	ldr	r3, [pc, #288]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007232:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723a:	4945      	ldr	r1, [pc, #276]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800723c:	4313      	orrs	r3, r2
 800723e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800724e:	4b40      	ldr	r3, [pc, #256]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007254:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800725c:	493c      	ldr	r1, [pc, #240]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007270:	4b37      	ldr	r3, [pc, #220]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007276:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800727e:	4934      	ldr	r1, [pc, #208]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007280:	4313      	orrs	r3, r2
 8007282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d011      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007292:	4b2f      	ldr	r3, [pc, #188]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007298:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a0:	492b      	ldr	r1, [pc, #172]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072b0:	d101      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072b2:	2301      	movs	r3, #1
 80072b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80072c2:	2301      	movs	r3, #1
 80072c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072d2:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e0:	491b      	ldr	r1, [pc, #108]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072f4:	4b16      	ldr	r3, [pc, #88]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007304:	4912      	ldr	r1, [pc, #72]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007318:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800731a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007328:	4909      	ldr	r1, [pc, #36]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00f      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800733e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007342:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734c:	e002      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800734e:	bf00      	nop
 8007350:	40023800 	.word	0x40023800
 8007354:	4985      	ldr	r1, [pc, #532]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007368:	4b80      	ldr	r3, [pc, #512]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800736a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007378:	497c      	ldr	r1, [pc, #496]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d005      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800738e:	f040 80d6 	bne.w	800753e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007392:	4b76      	ldr	r3, [pc, #472]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a75      	ldr	r2, [pc, #468]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007398:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800739c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800739e:	f7fb fac3 	bl	8002928 <HAL_GetTick>
 80073a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073a4:	e008      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073a6:	f7fb fabf 	bl	8002928 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b64      	cmp	r3, #100	; 0x64
 80073b2:	d901      	bls.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e194      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073b8:	4b6c      	ldr	r3, [pc, #432]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1f0      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d021      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d11d      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073d8:	4b64      	ldr	r3, [pc, #400]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073de:	0c1b      	lsrs	r3, r3, #16
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073e6:	4b61      	ldr	r3, [pc, #388]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ec:	0e1b      	lsrs	r3, r3, #24
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	019a      	lsls	r2, r3, #6
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	041b      	lsls	r3, r3, #16
 80073fe:	431a      	orrs	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	061b      	lsls	r3, r3, #24
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	071b      	lsls	r3, r3, #28
 800740c:	4957      	ldr	r1, [pc, #348]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800740e:	4313      	orrs	r3, r2
 8007410:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d004      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007428:	d00a      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007432:	2b00      	cmp	r3, #0
 8007434:	d02e      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800743e:	d129      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007440:	4b4a      	ldr	r3, [pc, #296]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800744e:	4b47      	ldr	r3, [pc, #284]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007454:	0f1b      	lsrs	r3, r3, #28
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	019a      	lsls	r2, r3, #6
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	061b      	lsls	r3, r3, #24
 800746e:	431a      	orrs	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	071b      	lsls	r3, r3, #28
 8007474:	493d      	ldr	r1, [pc, #244]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800747c:	4b3b      	ldr	r3, [pc, #236]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800747e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007482:	f023 021f 	bic.w	r2, r3, #31
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	3b01      	subs	r3, #1
 800748c:	4937      	ldr	r1, [pc, #220]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800748e:	4313      	orrs	r3, r2
 8007490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01d      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074a0:	4b32      	ldr	r3, [pc, #200]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074ae:	4b2f      	ldr	r3, [pc, #188]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b4:	0f1b      	lsrs	r3, r3, #28
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	019a      	lsls	r2, r3, #6
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	431a      	orrs	r2, r3
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	061b      	lsls	r3, r3, #24
 80074ce:	431a      	orrs	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	071b      	lsls	r3, r3, #28
 80074d4:	4925      	ldr	r1, [pc, #148]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d011      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	019a      	lsls	r2, r3, #6
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	061b      	lsls	r3, r3, #24
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	071b      	lsls	r3, r3, #28
 8007504:	4919      	ldr	r1, [pc, #100]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007506:	4313      	orrs	r3, r2
 8007508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800750c:	4b17      	ldr	r3, [pc, #92]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a16      	ldr	r2, [pc, #88]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007518:	f7fb fa06 	bl	8002928 <HAL_GetTick>
 800751c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800751e:	e008      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007520:	f7fb fa02 	bl	8002928 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b64      	cmp	r3, #100	; 0x64
 800752c:	d901      	bls.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e0d7      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007532:	4b0e      	ldr	r3, [pc, #56]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0f0      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b01      	cmp	r3, #1
 8007542:	f040 80cd 	bne.w	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007546:	4b09      	ldr	r3, [pc, #36]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a08      	ldr	r2, [pc, #32]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800754c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007552:	f7fb f9e9 	bl	8002928 <HAL_GetTick>
 8007556:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007558:	e00a      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800755a:	f7fb f9e5 	bl	8002928 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	2b64      	cmp	r3, #100	; 0x64
 8007566:	d903      	bls.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e0ba      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800756c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007570:	4b5e      	ldr	r3, [pc, #376]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800757c:	d0ed      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800759a:	2b00      	cmp	r3, #0
 800759c:	d02e      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d12a      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075a6:	4b51      	ldr	r3, [pc, #324]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ac:	0c1b      	lsrs	r3, r3, #16
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075b4:	4b4d      	ldr	r3, [pc, #308]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ba:	0f1b      	lsrs	r3, r3, #28
 80075bc:	f003 0307 	and.w	r3, r3, #7
 80075c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	019a      	lsls	r2, r3, #6
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	061b      	lsls	r3, r3, #24
 80075d4:	431a      	orrs	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	071b      	lsls	r3, r3, #28
 80075da:	4944      	ldr	r1, [pc, #272]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075e2:	4b42      	ldr	r3, [pc, #264]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	3b01      	subs	r3, #1
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	493d      	ldr	r1, [pc, #244]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d022      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800760c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007610:	d11d      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007612:	4b36      	ldr	r3, [pc, #216]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007618:	0e1b      	lsrs	r3, r3, #24
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007620:	4b32      	ldr	r3, [pc, #200]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007626:	0f1b      	lsrs	r3, r3, #28
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	019a      	lsls	r2, r3, #6
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	041b      	lsls	r3, r3, #16
 800763a:	431a      	orrs	r2, r3
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	061b      	lsls	r3, r3, #24
 8007640:	431a      	orrs	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	071b      	lsls	r3, r3, #28
 8007646:	4929      	ldr	r1, [pc, #164]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007648:	4313      	orrs	r3, r2
 800764a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0308 	and.w	r3, r3, #8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d028      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800765a:	4b24      	ldr	r3, [pc, #144]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007660:	0e1b      	lsrs	r3, r3, #24
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007668:	4b20      	ldr	r3, [pc, #128]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766e:	0c1b      	lsrs	r3, r3, #16
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	019a      	lsls	r2, r3, #6
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	041b      	lsls	r3, r3, #16
 8007680:	431a      	orrs	r2, r3
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	061b      	lsls	r3, r3, #24
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	071b      	lsls	r3, r3, #28
 800768e:	4917      	ldr	r1, [pc, #92]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007690:	4313      	orrs	r3, r2
 8007692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800769c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	4911      	ldr	r1, [pc, #68]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076ac:	4b0f      	ldr	r3, [pc, #60]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a0e      	ldr	r2, [pc, #56]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b8:	f7fb f936 	bl	8002928 <HAL_GetTick>
 80076bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076c0:	f7fb f932 	bl	8002928 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b64      	cmp	r3, #100	; 0x64
 80076cc:	d901      	bls.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e007      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076de:	d1ef      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3720      	adds	r7, #32
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	40023800 	.word	0x40023800

080076f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e025      	b.n	8007750 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d106      	bne.n	800771e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 ffa9 	bl	8009670 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2202      	movs	r2, #2
 8007722:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3304      	adds	r3, #4
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f000 fb13 	bl	8007d5c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	461a      	mov	r2, r3
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	f000 fb7d 	bl	8007e40 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d101      	bne.n	8007774 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007770:	2302      	movs	r3, #2
 8007772:	e018      	b.n	80077a6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fbdb 	bl	8007f40 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b02      	cmp	r3, #2
 8007790:	d104      	bne.n	800779c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2205      	movs	r2, #5
 8007796:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800779a:	e003      	b.n	80077a4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d101      	bne.n	80077c8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80077c4:	2302      	movs	r3, #2
 80077c6:	e00e      	b.n	80077e6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fbd3 	bl	8007f82 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e01d      	b.n	800783c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d106      	bne.n	800781a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 fe45 	bl	80094a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2202      	movs	r2, #2
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3304      	adds	r3, #4
 800782a:	4619      	mov	r1, r3
 800782c:	4610      	mov	r0, r2
 800782e:	f000 f97b 	bl	8007b28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0201 	orr.w	r2, r2, #1
 800785a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <HAL_TIM_Base_Start_IT+0x50>)
 8007864:	4013      	ands	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b06      	cmp	r3, #6
 800786c:	d00b      	beq.n	8007886 <HAL_TIM_Base_Start_IT+0x42>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007874:	d007      	beq.n	8007886 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f042 0201 	orr.w	r2, r2, #1
 8007884:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	00010007 	.word	0x00010007

08007898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d122      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d11b      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f06f 0202 	mvn.w	r2, #2
 80078c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f905 	bl	8007aea <HAL_TIM_IC_CaptureCallback>
 80078e0:	e005      	b.n	80078ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f8f7 	bl	8007ad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f908 	bl	8007afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d122      	bne.n	8007948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f003 0304 	and.w	r3, r3, #4
 800790c:	2b04      	cmp	r3, #4
 800790e:	d11b      	bne.n	8007948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f06f 0204 	mvn.w	r2, #4
 8007918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2202      	movs	r2, #2
 800791e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f8db 	bl	8007aea <HAL_TIM_IC_CaptureCallback>
 8007934:	e005      	b.n	8007942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8cd 	bl	8007ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f8de 	bl	8007afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	2b08      	cmp	r3, #8
 8007954:	d122      	bne.n	800799c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f003 0308 	and.w	r3, r3, #8
 8007960:	2b08      	cmp	r3, #8
 8007962:	d11b      	bne.n	800799c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f06f 0208 	mvn.w	r2, #8
 800796c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2204      	movs	r2, #4
 8007972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f003 0303 	and.w	r3, r3, #3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8b1 	bl	8007aea <HAL_TIM_IC_CaptureCallback>
 8007988:	e005      	b.n	8007996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f8a3 	bl	8007ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f8b4 	bl	8007afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	f003 0310 	and.w	r3, r3, #16
 80079a6:	2b10      	cmp	r3, #16
 80079a8:	d122      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f003 0310 	and.w	r3, r3, #16
 80079b4:	2b10      	cmp	r3, #16
 80079b6:	d11b      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f06f 0210 	mvn.w	r2, #16
 80079c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2208      	movs	r2, #8
 80079c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f887 	bl	8007aea <HAL_TIM_IC_CaptureCallback>
 80079dc:	e005      	b.n	80079ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f879 	bl	8007ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f88a 	bl	8007afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d10e      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d107      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f06f 0201 	mvn.w	r2, #1
 8007a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fb06 	bl	8008028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a26:	2b80      	cmp	r3, #128	; 0x80
 8007a28:	d10e      	bne.n	8007a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a34:	2b80      	cmp	r3, #128	; 0x80
 8007a36:	d107      	bne.n	8007a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f976 	bl	8007d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a56:	d10e      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a62:	2b80      	cmp	r3, #128	; 0x80
 8007a64:	d107      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f969 	bl	8007d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	d10e      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8e:	2b40      	cmp	r3, #64	; 0x40
 8007a90:	d107      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f838 	bl	8007b12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	d10e      	bne.n	8007ace <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d107      	bne.n	8007ace <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f06f 0220 	mvn.w	r2, #32
 8007ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f929 	bl	8007d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
	...

08007b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a40      	ldr	r2, [pc, #256]	; (8007c3c <TIM_Base_SetConfig+0x114>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b46:	d00f      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a3d      	ldr	r2, [pc, #244]	; (8007c40 <TIM_Base_SetConfig+0x118>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a3c      	ldr	r2, [pc, #240]	; (8007c44 <TIM_Base_SetConfig+0x11c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d007      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a3b      	ldr	r2, [pc, #236]	; (8007c48 <TIM_Base_SetConfig+0x120>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a3a      	ldr	r2, [pc, #232]	; (8007c4c <TIM_Base_SetConfig+0x124>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d108      	bne.n	8007b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a2f      	ldr	r2, [pc, #188]	; (8007c3c <TIM_Base_SetConfig+0x114>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d02b      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d027      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2c      	ldr	r2, [pc, #176]	; (8007c40 <TIM_Base_SetConfig+0x118>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d023      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2b      	ldr	r2, [pc, #172]	; (8007c44 <TIM_Base_SetConfig+0x11c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d01f      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a2a      	ldr	r2, [pc, #168]	; (8007c48 <TIM_Base_SetConfig+0x120>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d01b      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <TIM_Base_SetConfig+0x124>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d017      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a28      	ldr	r2, [pc, #160]	; (8007c50 <TIM_Base_SetConfig+0x128>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a27      	ldr	r2, [pc, #156]	; (8007c54 <TIM_Base_SetConfig+0x12c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00f      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a26      	ldr	r2, [pc, #152]	; (8007c58 <TIM_Base_SetConfig+0x130>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00b      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a25      	ldr	r2, [pc, #148]	; (8007c5c <TIM_Base_SetConfig+0x134>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d007      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a24      	ldr	r2, [pc, #144]	; (8007c60 <TIM_Base_SetConfig+0x138>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d003      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a23      	ldr	r2, [pc, #140]	; (8007c64 <TIM_Base_SetConfig+0x13c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d108      	bne.n	8007bec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <TIM_Base_SetConfig+0x114>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_Base_SetConfig+0xf8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a0c      	ldr	r2, [pc, #48]	; (8007c4c <TIM_Base_SetConfig+0x124>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d103      	bne.n	8007c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	691a      	ldr	r2, [r3, #16]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	615a      	str	r2, [r3, #20]
}
 8007c2e:	bf00      	nop
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40000400 	.word	0x40000400
 8007c44:	40000800 	.word	0x40000800
 8007c48:	40000c00 	.word	0x40000c00
 8007c4c:	40010400 	.word	0x40010400
 8007c50:	40014000 	.word	0x40014000
 8007c54:	40014400 	.word	0x40014400
 8007c58:	40014800 	.word	0x40014800
 8007c5c:	40001800 	.word	0x40001800
 8007c60:	40001c00 	.word	0x40001c00
 8007c64:	40002000 	.word	0x40002000

08007c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e045      	b.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1c      	ldr	r2, [pc, #112]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d004      	beq.n	8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a1b      	ldr	r2, [pc, #108]	; (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d108      	bne.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ccc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cde:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	40010000 	.word	0x40010000
 8007d1c:	40010400 	.word	0x40010400

08007d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d027      	beq.n	8007dc6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4b2f      	ldr	r3, [pc, #188]	; (8007e3c <FMC_SDRAM_Init+0xe0>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007d8c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007d92:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007d98:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007d9e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007da4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007daa:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007db0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007db6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e032      	b.n	8007e2c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dd2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007ddc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007de2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <FMC_SDRAM_Init+0xe0>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e00:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007e06:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007e0c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007e12:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007e18:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	ffff8000 	.word	0xffff8000

08007e40 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d02e      	beq.n	8007eb8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e66:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e76:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007e80:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007e8a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007e94:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007e9e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	609a      	str	r2, [r3, #8]
 8007eb6:	e039      	b.n	8007f2c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4b1e      	ldr	r3, [pc, #120]	; (8007f3c <FMC_SDRAM_Timing_Init+0xfc>)
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007eea:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007efa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007f04:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007f0e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	ff0f0fff 	.word	0xff0f0fff

08007f40 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007f58:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007f62:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	695a      	ldr	r2, [r3, #20]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_13){
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb8:	d12b      	bne.n	8008012 <HAL_GPIO_EXTI_Callback+0x6a>

		BSP_TS_GetState(&TS_State);
 8007fba:	4818      	ldr	r0, [pc, #96]	; (800801c <HAL_GPIO_EXTI_Callback+0x74>)
 8007fbc:	f7fa fb18 	bl	80025f0 <BSP_TS_GetState>

		if(TS_State.touchDetected){
 8007fc0:	4b16      	ldr	r3, [pc, #88]	; (800801c <HAL_GPIO_EXTI_Callback+0x74>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d024      	beq.n	8008012 <HAL_GPIO_EXTI_Callback+0x6a>

		   if( (int)TS_State.touchX[0] <480 && (int)TS_State.touchY[0] <480  ){
 8007fc8:	4b14      	ldr	r3, [pc, #80]	; (800801c <HAL_GPIO_EXTI_Callback+0x74>)
 8007fca:	885b      	ldrh	r3, [r3, #2]
 8007fcc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8007fd0:	d20a      	bcs.n	8007fe8 <HAL_GPIO_EXTI_Callback+0x40>
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <HAL_GPIO_EXTI_Callback+0x74>)
 8007fd4:	88db      	ldrh	r3, [r3, #6]
 8007fd6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8007fda:	d205      	bcs.n	8007fe8 <HAL_GPIO_EXTI_Callback+0x40>

			   HAL_Delay(100);
 8007fdc:	2064      	movs	r0, #100	; 0x64
 8007fde:	f7fa fcaf 	bl	8002940 <HAL_Delay>

			   turnFlag=1;
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <HAL_GPIO_EXTI_Callback+0x78>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]

            }

		   if( (int)TS_State.touchX[0] >500 &&  (int)TS_State.touchX[0] <780 && (int)TS_State.touchY[0] >180 && (int)TS_State.touchY[0] < 230  ){
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	; (800801c <HAL_GPIO_EXTI_Callback+0x74>)
 8007fea:	885b      	ldrh	r3, [r3, #2]
 8007fec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007ff0:	d90f      	bls.n	8008012 <HAL_GPIO_EXTI_Callback+0x6a>
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	; (800801c <HAL_GPIO_EXTI_Callback+0x74>)
 8007ff4:	885b      	ldrh	r3, [r3, #2]
 8007ff6:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 8007ffa:	d20a      	bcs.n	8008012 <HAL_GPIO_EXTI_Callback+0x6a>
 8007ffc:	4b07      	ldr	r3, [pc, #28]	; (800801c <HAL_GPIO_EXTI_Callback+0x74>)
 8007ffe:	88db      	ldrh	r3, [r3, #6]
 8008000:	2bb4      	cmp	r3, #180	; 0xb4
 8008002:	d906      	bls.n	8008012 <HAL_GPIO_EXTI_Callback+0x6a>
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <HAL_GPIO_EXTI_Callback+0x74>)
 8008006:	88db      	ldrh	r3, [r3, #6]
 8008008:	2be5      	cmp	r3, #229	; 0xe5
 800800a:	d802      	bhi.n	8008012 <HAL_GPIO_EXTI_Callback+0x6a>

			   startFlag=1;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <HAL_GPIO_EXTI_Callback+0x7c>)
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]
		   }

	}
  }

}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	200006c8 	.word	0x200006c8
 8008020:	20000340 	.word	0x20000340
 8008024:	20000344 	.word	0x20000344

08008028 <HAL_TIM_PeriodElapsedCallback>:

void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){           // 2 em 2 seg
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a2a      	ldr	r2, [pc, #168]	; (80080e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d145      	bne.n	80080c6 <HAL_TIM_PeriodElapsedCallback+0x9e>
					HAL_StatusTypeDef status=HAL_ADC_PollForConversion(&hadc1,TEMP_REFRESH_PERIOD);
 800803a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800803e:	4829      	ldr	r0, [pc, #164]	; (80080e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8008040:	f7fa fda4 	bl	8002b8c <HAL_ADC_PollForConversion>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]
			  	  	  if(status==HAL_OK)
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d13b      	bne.n	80080c6 <HAL_TIM_PeriodElapsedCallback+0x9e>
			  	  	  {
			  	  		  ConvertedValue=HAL_ADC_GetValue(&hadc1); //get value
 800804e:	4825      	ldr	r0, [pc, #148]	; (80080e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8008050:	f7fa ff61 	bl	8002f16 <HAL_ADC_GetValue>
 8008054:	4602      	mov	r2, r0
 8008056:	4b24      	ldr	r3, [pc, #144]	; (80080e8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8008058:	601a      	str	r2, [r3, #0]

			  	  		  JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800805a:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008062:	fb02 f203 	mul.w	r2, r2, r3
 8008066:	4b21      	ldr	r3, [pc, #132]	; (80080ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8008068:	fba3 1302 	umull	r1, r3, r3, r2
 800806c:	1ad2      	subs	r2, r2, r3
 800806e:	0852      	lsrs	r2, r2, #1
 8008070:	4413      	add	r3, r2
 8008072:	0ada      	lsrs	r2, r3, #11
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	461a      	mov	r2, r3
 800807e:	4b1c      	ldr	r3, [pc, #112]	; (80080f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8008080:	4413      	add	r3, r2
 8008082:	4a1c      	ldr	r2, [pc, #112]	; (80080f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8008084:	fba2 2303 	umull	r2, r3, r2, r3
 8008088:	08db      	lsrs	r3, r3, #3
 800808a:	3319      	adds	r3, #25
 800808c:	461a      	mov	r2, r3
 800808e:	4b1a      	ldr	r3, [pc, #104]	; (80080f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8008090:	601a      	str	r2, [r3, #0]
			  	  		  /* Display the Temperature Value on the LCD */
			  	  		  sprintf(desc, "T= %ld C", JTemp);
 8008092:	4b19      	ldr	r3, [pc, #100]	; (80080f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	4918      	ldr	r1, [pc, #96]	; (80080fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800809a:	4819      	ldr	r0, [pc, #100]	; (8008100 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800809c:	f001 fc04 	bl	80098a8 <siprintf>
			  	  		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80080a0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80080a4:	f7f9 fa90 	bl	80015c8 <BSP_LCD_SetTextColor>
			  	  	      BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	f7f9 faa4 	bl	80015f8 <BSP_LCD_SetBackColor>
			  	  	      BSP_LCD_SetFont(&Font16);
 80080b0:	4814      	ldr	r0, [pc, #80]	; (8008104 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80080b2:	f7f9 fabb 	bl	800162c <BSP_LCD_SetFont>
			  	  		  BSP_LCD_DisplayStringAt(650, 435, (uint8_t *)desc, LEFT_MODE);
 80080b6:	2303      	movs	r3, #3
 80080b8:	4a11      	ldr	r2, [pc, #68]	; (8008100 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80080ba:	f240 11b3 	movw	r1, #435	; 0x1b3
 80080be:	f240 208a 	movw	r0, #650	; 0x28a
 80080c2:	f7f9 fb39 	bl	8001738 <BSP_LCD_DisplayStringAt>
			  	  	  }

	}

	if(htim->Instance == TIM7){
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a0f      	ldr	r2, [pc, #60]	; (8008108 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d102      	bne.n	80080d6 <HAL_TIM_PeriodElapsedCallback+0xae>
		flagClock=1;
 80080d0:	4b0e      	ldr	r3, [pc, #56]	; (800810c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	601a      	str	r2, [r3, #0]

		}


}
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	40001000 	.word	0x40001000
 80080e4:	2000057c 	.word	0x2000057c
 80080e8:	200004b0 	.word	0x200004b0
 80080ec:	00100101 	.word	0x00100101
 80080f0:	ffffe250 	.word	0xffffe250
 80080f4:	51eb851f 	.word	0x51eb851f
 80080f8:	200005c4 	.word	0x200005c4
 80080fc:	0800a0cc 	.word	0x0800a0cc
 8008100:	2000060c 	.word	0x2000060c
 8008104:	20000044 	.word	0x20000044
 8008108:	40001400 	.word	0x40001400
 800810c:	20000348 	.word	0x20000348

08008110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b096      	sub	sp, #88	; 0x58
 8008114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int newPlayer=0;
 8008116:	2300      	movs	r3, #0
 8008118:	657b      	str	r3, [r7, #84]	; 0x54
	int gameON=0;
 800811a:	2300      	movs	r3, #0
 800811c:	653b      	str	r3, [r7, #80]	; 0x50
	int gameEnd=0;
 800811e:	2300      	movs	r3, #0
 8008120:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint16_t casaX=0;
 8008122:	2300      	movs	r3, #0
 8008124:	837b      	strh	r3, [r7, #26]
	uint16_t casaY=0;
 8008126:	2300      	movs	r3, #0
 8008128:	833b      	strh	r3, [r7, #24]
	uint16_t jogadaX=0;
 800812a:	2300      	movs	r3, #0
 800812c:	82fb      	strh	r3, [r7, #22]
	uint16_t jogadaY=0;
 800812e:	2300      	movs	r3, #0
 8008130:	82bb      	strh	r3, [r7, #20]

	uint32_t colorP1 =  LCD_COLOR_LIGHTGREEN ;
 8008132:	f06f 137f 	mvn.w	r3, #8323199	; 0x7f007f
 8008136:	613b      	str	r3, [r7, #16]
	uint32_t colorP2 =  LCD_COLOR_LIGHTRED ;
 8008138:	4bb0      	ldr	r3, [pc, #704]	; (80083fc <main+0x2ec>)
 800813a:	60fb      	str	r3, [r7, #12]
	uint32_t colorPlayer;
	uint32_t colorAdv;

	int timOutFlag=0;
 800813c:	2300      	movs	r3, #0
 800813e:	647b      	str	r3, [r7, #68]	; 0x44
	int timOutP1=0;
 8008140:	2300      	movs	r3, #0
 8008142:	643b      	str	r3, [r7, #64]	; 0x40
	int timOutP2=0;
 8008144:	2300      	movs	r3, #0
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c

	int j=0;
 8008148:	2300      	movs	r3, #0
 800814a:	60bb      	str	r3, [r7, #8]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800814c:	f7fa fb9a 	bl	8002884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008150:	f000 fad2 	bl	80086f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008154:	f000 fe5a 	bl	8008e0c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8008158:	f000 fbbc 	bl	80088d4 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800815c:	f000 fbf2 	bl	8008944 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8008160:	f000 fe06 	bl	8008d70 <MX_FMC_Init>
  MX_LTDC_Init();
 8008164:	f000 fce2 	bl	8008b2c <MX_LTDC_Init>
  MX_TIM6_Init();
 8008168:	f000 fd92 	bl	8008c90 <MX_TIM6_Init>
  MX_ADC1_Init();
 800816c:	f000 fb5e 	bl	800882c <MX_ADC1_Init>
  MX_TIM7_Init();
 8008170:	f000 fdc6 	bl	8008d00 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
    BSP_LED_Init(LED_RED);
 8008174:	2000      	movs	r0, #0
 8008176:	f7f8 fdc1 	bl	8000cfc <BSP_LED_Init>
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 800817a:	2100      	movs	r1, #0
 800817c:	2000      	movs	r0, #0
 800817e:	f7f8 fded 	bl	8000d5c <BSP_PB_Init>

    LCD_Config();
 8008182:	f000 fecd 	bl	8008f20 <LCD_Config>

    BSP_TS_Init(800,480);
 8008186:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800818a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800818e:	f7fa f99d 	bl	80024cc <BSP_TS_Init>
    BSP_TS_ITConfig();
 8008192:	f7fa f9fb 	bl	800258c <BSP_TS_ITConfig>

    HAL_ADC_Start(&hadc1);     //start do adc
 8008196:	489a      	ldr	r0, [pc, #616]	; (8008400 <main+0x2f0>)
 8008198:	f7fa fc38 	bl	8002a0c <HAL_ADC_Start>

    HAL_TIM_Base_Start_IT(&htim6);
 800819c:	4899      	ldr	r0, [pc, #612]	; (8008404 <main+0x2f4>)
 800819e:	f7ff fb51 	bl	8007844 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 80081a2:	4899      	ldr	r0, [pc, #612]	; (8008408 <main+0x2f8>)
 80081a4:	f7ff fb4e 	bl	8007844 <HAL_TIM_Base_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
/*  PUSH-BUTTON  */
	  if(BSP_PB_GetState(BUTTON_WAKEUP)==1){
 80081a8:	2000      	movs	r0, #0
 80081aa:	f7f8 fe2b 	bl	8000e04 <BSP_PB_GetState>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d103      	bne.n	80081bc <main+0xac>
		  LCD_Config();
 80081b4:	f000 feb4 	bl	8008f20 <LCD_Config>
		  gameON=0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	653b      	str	r3, [r7, #80]	; 0x50
	  }

/*   Clock     */
if(flagClock==1){
 80081bc:	4b93      	ldr	r3, [pc, #588]	; (800840c <main+0x2fc>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d146      	bne.n	8008252 <main+0x142>
		  flagClock=0;
 80081c4:	4b91      	ldr	r3, [pc, #580]	; (800840c <main+0x2fc>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]

		  sec++;
 80081ca:	4b91      	ldr	r3, [pc, #580]	; (8008410 <main+0x300>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	4a8f      	ldr	r2, [pc, #572]	; (8008410 <main+0x300>)
 80081d2:	6013      	str	r3, [r2, #0]
		  if(sec==60){
 80081d4:	4b8e      	ldr	r3, [pc, #568]	; (8008410 <main+0x300>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b3c      	cmp	r3, #60	; 0x3c
 80081da:	d107      	bne.n	80081ec <main+0xdc>
			  sec=0;
 80081dc:	4b8c      	ldr	r3, [pc, #560]	; (8008410 <main+0x300>)
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
			  min++;
 80081e2:	4b8c      	ldr	r3, [pc, #560]	; (8008414 <main+0x304>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	4a8a      	ldr	r2, [pc, #552]	; (8008414 <main+0x304>)
 80081ea:	6013      	str	r3, [r2, #0]
		  }

		  BSP_LCD_SetFont(&Font16);
 80081ec:	488a      	ldr	r0, [pc, #552]	; (8008418 <main+0x308>)
 80081ee:	f7f9 fa1d 	bl	800162c <BSP_LCD_SetFont>
		  sprintf(clock, "Time: %2d:%2d", min,sec);
 80081f2:	4b88      	ldr	r3, [pc, #544]	; (8008414 <main+0x304>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4b86      	ldr	r3, [pc, #536]	; (8008410 <main+0x300>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4988      	ldr	r1, [pc, #544]	; (800841c <main+0x30c>)
 80081fc:	4888      	ldr	r0, [pc, #544]	; (8008420 <main+0x310>)
 80081fe:	f001 fb53 	bl	80098a8 <siprintf>
		  BSP_LCD_DisplayStringAt(650, 400, (uint8_t *)clock, LEFT_MODE);
 8008202:	2303      	movs	r3, #3
 8008204:	4a86      	ldr	r2, [pc, #536]	; (8008420 <main+0x310>)
 8008206:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800820a:	f240 208a 	movw	r0, #650	; 0x28a
 800820e:	f7f9 fa93 	bl	8001738 <BSP_LCD_DisplayStringAt>

		  //Temporizador de 20 seg
		  if(gameON ==1){
 8008212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008214:	2b01      	cmp	r3, #1
 8008216:	d11c      	bne.n	8008252 <main+0x142>
			  downTimer--;
 8008218:	4b82      	ldr	r3, [pc, #520]	; (8008424 <main+0x314>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3b01      	subs	r3, #1
 800821e:	4a81      	ldr	r2, [pc, #516]	; (8008424 <main+0x314>)
 8008220:	6013      	str	r3, [r2, #0]
			  sprintf(timerString, "Time Left: %2d s", downTimer);
 8008222:	4b80      	ldr	r3, [pc, #512]	; (8008424 <main+0x314>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	497f      	ldr	r1, [pc, #508]	; (8008428 <main+0x318>)
 800822a:	4880      	ldr	r0, [pc, #512]	; (800842c <main+0x31c>)
 800822c:	f001 fb3c 	bl	80098a8 <siprintf>
			  BSP_LCD_DisplayStringAt(570, 300, (uint8_t *)timerString, LEFT_MODE);
 8008230:	2303      	movs	r3, #3
 8008232:	4a7e      	ldr	r2, [pc, #504]	; (800842c <main+0x31c>)
 8008234:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008238:	f240 203a 	movw	r0, #570	; 0x23a
 800823c:	f7f9 fa7c 	bl	8001738 <BSP_LCD_DisplayStringAt>

			  if (downTimer <= 0){
 8008240:	4b78      	ldr	r3, [pc, #480]	; (8008424 <main+0x314>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	dc04      	bgt.n	8008252 <main+0x142>
			  	turnFlag=1;
 8008248:	4b79      	ldr	r3, [pc, #484]	; (8008430 <main+0x320>)
 800824a:	2201      	movs	r2, #1
 800824c:	601a      	str	r2, [r3, #0]
			  	timOutFlag=1;
 800824e:	2301      	movs	r3, #1
 8008250:	647b      	str	r3, [r7, #68]	; 0x44

	  }


/* Play the game */
if(startFlag==1 ){
 8008252:	4b78      	ldr	r3, [pc, #480]	; (8008434 <main+0x324>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d114      	bne.n	8008284 <main+0x174>
	  startFlag=0;
 800825a:	4b76      	ldr	r3, [pc, #472]	; (8008434 <main+0x324>)
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
	  gameON=1;
 8008260:	2301      	movs	r3, #1
 8008262:	653b      	str	r3, [r7, #80]	; 0x50
	  startGame();
 8008264:	f000 ff00 	bl	8009068 <startGame>

	  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	f7f9 f9c4 	bl	80015f8 <BSP_LCD_SetBackColor>
	  BSP_LCD_SetTextColor(colorP1);
 8008270:	6938      	ldr	r0, [r7, #16]
 8008272:	f7f9 f9a9 	bl	80015c8 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAt(590, 250, (uint8_t *)"PLAYER 0", LEFT_MODE);
 8008276:	2303      	movs	r3, #3
 8008278:	4a6f      	ldr	r2, [pc, #444]	; (8008438 <main+0x328>)
 800827a:	21fa      	movs	r1, #250	; 0xfa
 800827c:	f240 204e 	movw	r0, #590	; 0x24e
 8008280:	f7f9 fa5a 	bl	8001738 <BSP_LCD_DisplayStringAt>

  }



if(turnFlag==1 && gameON ==1){
 8008284:	4b6a      	ldr	r3, [pc, #424]	; (8008430 <main+0x320>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b01      	cmp	r3, #1
 800828a:	f040 8225 	bne.w	80086d8 <main+0x5c8>
 800828e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008290:	2b01      	cmp	r3, #1
 8008292:	f040 8221 	bne.w	80086d8 <main+0x5c8>

		 turnFlag=0;
 8008296:	4b66      	ldr	r3, [pc, #408]	; (8008430 <main+0x320>)
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]


//Player1

	  if(newPlayer%2 == 0){
 800829c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d130      	bne.n	8008308 <main+0x1f8>

		  newPlayer++;
 80082a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a8:	3301      	adds	r3, #1
 80082aa:	657b      	str	r3, [r7, #84]	; 0x54

	  	 BSP_LCD_SetTextColor(colorP1);
 80082ac:	6938      	ldr	r0, [r7, #16]
 80082ae:	f7f9 f98b 	bl	80015c8 <BSP_LCD_SetTextColor>
	  	 BSP_LCD_DisplayStringAt(590, 250, (uint8_t *)"PLAYER 1", LEFT_MODE);
 80082b2:	2303      	movs	r3, #3
 80082b4:	4a61      	ldr	r2, [pc, #388]	; (800843c <main+0x32c>)
 80082b6:	21fa      	movs	r1, #250	; 0xfa
 80082b8:	f240 204e 	movw	r0, #590	; 0x24e
 80082bc:	f7f9 fa3c 	bl	8001738 <BSP_LCD_DisplayStringAt>

	  	 symbPlayer='x';
 80082c0:	4b5f      	ldr	r3, [pc, #380]	; (8008440 <main+0x330>)
 80082c2:	2278      	movs	r2, #120	; 0x78
 80082c4:	701a      	strb	r2, [r3, #0]
	  	 symbAdv='o';
 80082c6:	4b5f      	ldr	r3, [pc, #380]	; (8008444 <main+0x334>)
 80082c8:	226f      	movs	r2, #111	; 0x6f
 80082ca:	701a      	strb	r2, [r3, #0]
	  	 colorPlayer=colorP1;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	64bb      	str	r3, [r7, #72]	; 0x48
	  	 colorAdv=colorP2;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	607b      	str	r3, [r7, #4]

	  	 downTimer=20;
 80082d4:	4b53      	ldr	r3, [pc, #332]	; (8008424 <main+0x314>)
 80082d6:	2214      	movs	r2, #20
 80082d8:	601a      	str	r2, [r3, #0]
	  	 if(timOutFlag == 1){
 80082da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d104      	bne.n	80082ea <main+0x1da>
	  		timOutFlag=0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	647b      	str	r3, [r7, #68]	; 0x44
	  		timOutP1++;
 80082e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e6:	3301      	adds	r3, #1
 80082e8:	643b      	str	r3, [r7, #64]	; 0x40
	  	 }

	  	 if(timOutP1 == 3){
 80082ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d13b      	bne.n	8008368 <main+0x258>
	  		BSP_LCD_DisplayStringAt(570, 120, (uint8_t *)"PLAYER 1 LOOSES" , LEFT_MODE);
 80082f0:	2303      	movs	r3, #3
 80082f2:	4a55      	ldr	r2, [pc, #340]	; (8008448 <main+0x338>)
 80082f4:	2178      	movs	r1, #120	; 0x78
 80082f6:	f240 203a 	movw	r0, #570	; 0x23a
 80082fa:	f7f9 fa1d 	bl	8001738 <BSP_LCD_DisplayStringAt>
	  		gameON = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	653b      	str	r3, [r7, #80]	; 0x50
	  		gameEnd=1;
 8008302:	2301      	movs	r3, #1
 8008304:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008306:	e02f      	b.n	8008368 <main+0x258>

//Player2

	 else{

		 newPlayer++;
 8008308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800830a:	3301      	adds	r3, #1
 800830c:	657b      	str	r3, [r7, #84]	; 0x54

	  	BSP_LCD_SetTextColor(colorP2);
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f7f9 f95a 	bl	80015c8 <BSP_LCD_SetTextColor>
	  	 BSP_LCD_DisplayStringAt(590, 250, (uint8_t *)"PLAYER 2", LEFT_MODE);
 8008314:	2303      	movs	r3, #3
 8008316:	4a4d      	ldr	r2, [pc, #308]	; (800844c <main+0x33c>)
 8008318:	21fa      	movs	r1, #250	; 0xfa
 800831a:	f240 204e 	movw	r0, #590	; 0x24e
 800831e:	f7f9 fa0b 	bl	8001738 <BSP_LCD_DisplayStringAt>

	  	symbPlayer='o';
 8008322:	4b47      	ldr	r3, [pc, #284]	; (8008440 <main+0x330>)
 8008324:	226f      	movs	r2, #111	; 0x6f
 8008326:	701a      	strb	r2, [r3, #0]
	    symbAdv='x';
 8008328:	4b46      	ldr	r3, [pc, #280]	; (8008444 <main+0x334>)
 800832a:	2278      	movs	r2, #120	; 0x78
 800832c:	701a      	strb	r2, [r3, #0]
	    colorPlayer=colorP2;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	64bb      	str	r3, [r7, #72]	; 0x48
	    colorAdv=colorP1;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	607b      	str	r3, [r7, #4]

	    downTimer=20;
 8008336:	4b3b      	ldr	r3, [pc, #236]	; (8008424 <main+0x314>)
 8008338:	2214      	movs	r2, #20
 800833a:	601a      	str	r2, [r3, #0]
	    if(timOutFlag == 1){
 800833c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800833e:	2b01      	cmp	r3, #1
 8008340:	d104      	bne.n	800834c <main+0x23c>
	       timOutFlag=0;
 8008342:	2300      	movs	r3, #0
 8008344:	647b      	str	r3, [r7, #68]	; 0x44
    		timOutP2++;
 8008346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008348:	3301      	adds	r3, #1
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
	    }

	    if(timOutP2 == 3){
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	2b03      	cmp	r3, #3
 8008350:	d10a      	bne.n	8008368 <main+0x258>
	  		BSP_LCD_DisplayStringAt(570, 120, (uint8_t *)"PLAYER 2 LOOSES" , LEFT_MODE);
 8008352:	2303      	movs	r3, #3
 8008354:	4a3e      	ldr	r2, [pc, #248]	; (8008450 <main+0x340>)
 8008356:	2178      	movs	r1, #120	; 0x78
 8008358:	f240 203a 	movw	r0, #570	; 0x23a
 800835c:	f7f9 f9ec 	bl	8001738 <BSP_LCD_DisplayStringAt>
	  		gameON = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	653b      	str	r3, [r7, #80]	; 0x50
	  		gameEnd=1;
 8008364:	2301      	movs	r3, #1
 8008366:	64fb      	str	r3, [r7, #76]	; 0x4c

	   }

//----colocar as peças-------------------------------------------------------------------------------------

	  casaX = (int)TS_State.touchX[0]/60;
 8008368:	4b3a      	ldr	r3, [pc, #232]	; (8008454 <main+0x344>)
 800836a:	885b      	ldrh	r3, [r3, #2]
 800836c:	4a3a      	ldr	r2, [pc, #232]	; (8008458 <main+0x348>)
 800836e:	fba2 2303 	umull	r2, r3, r2, r3
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	837b      	strh	r3, [r7, #26]
	  casaY = (int)TS_State.touchY[0]/60;
 8008376:	4b37      	ldr	r3, [pc, #220]	; (8008454 <main+0x344>)
 8008378:	88db      	ldrh	r3, [r3, #6]
 800837a:	4a37      	ldr	r2, [pc, #220]	; (8008458 <main+0x348>)
 800837c:	fba2 2303 	umull	r2, r3, r2, r3
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	833b      	strh	r3, [r7, #24]
	  jogadaX = casaX*60+30;
 8008384:	8b7b      	ldrh	r3, [r7, #26]
 8008386:	461a      	mov	r2, r3
 8008388:	0112      	lsls	r2, r2, #4
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	b29b      	uxth	r3, r3
 8008390:	331e      	adds	r3, #30
 8008392:	82fb      	strh	r3, [r7, #22]
	  jogadaY = casaY*60+30;
 8008394:	8b3b      	ldrh	r3, [r7, #24]
 8008396:	461a      	mov	r2, r3
 8008398:	0112      	lsls	r2, r2, #4
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	b29b      	uxth	r3, r3
 80083a0:	331e      	adds	r3, #30
 80083a2:	82bb      	strh	r3, [r7, #20]

	  //verificar q a casa está vazia
	  if(board[casaY][casaX] == '.'  ){
 80083a4:	8b3a      	ldrh	r2, [r7, #24]
 80083a6:	8b7b      	ldrh	r3, [r7, #26]
 80083a8:	492c      	ldr	r1, [pc, #176]	; (800845c <main+0x34c>)
 80083aa:	00d2      	lsls	r2, r2, #3
 80083ac:	440a      	add	r2, r1
 80083ae:	4413      	add	r3, r2
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b2e      	cmp	r3, #46	; 0x2e
 80083b4:	f040 8190 	bne.w	80086d8 <main+0x5c8>


		  //verificar se existe peça adversaria na casa adjacente
		  //verfica linha-----------------------------------------------------------------------------

			  if( board[casaY+1][casaX]==symbAdv ){
 80083b8:	8b3b      	ldrh	r3, [r7, #24]
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	8b7b      	ldrh	r3, [r7, #26]
 80083be:	4927      	ldr	r1, [pc, #156]	; (800845c <main+0x34c>)
 80083c0:	00d2      	lsls	r2, r2, #3
 80083c2:	440a      	add	r2, r1
 80083c4:	4413      	add	r3, r2
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	4b1e      	ldr	r3, [pc, #120]	; (8008444 <main+0x334>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d17d      	bne.n	80084cc <main+0x3bc>

				  BSP_LCD_SetTextColor(colorPlayer);
 80083d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80083d2:	f7f9 f8f9 	bl	80015c8 <BSP_LCD_SetTextColor>
				  BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 80083d6:	8ab9      	ldrh	r1, [r7, #20]
 80083d8:	8afb      	ldrh	r3, [r7, #22]
 80083da:	2219      	movs	r2, #25
 80083dc:	4618      	mov	r0, r3
 80083de:	f7f9 fc6b 	bl	8001cb8 <BSP_LCD_FillCircle>

				  //BSP_LCD_FillCircle(jogadaX,jogadaY+60 ,25);


				  board[casaY][casaX]=symbPlayer;
 80083e2:	8b3a      	ldrh	r2, [r7, #24]
 80083e4:	8b7b      	ldrh	r3, [r7, #26]
 80083e6:	4916      	ldr	r1, [pc, #88]	; (8008440 <main+0x330>)
 80083e8:	7808      	ldrb	r0, [r1, #0]
 80083ea:	491c      	ldr	r1, [pc, #112]	; (800845c <main+0x34c>)
 80083ec:	00d2      	lsls	r2, r2, #3
 80083ee:	440a      	add	r2, r1
 80083f0:	4413      	add	r3, r2
 80083f2:	4602      	mov	r2, r0
 80083f4:	701a      	strb	r2, [r3, #0]

				  //troca as peças
				  for (int i = casaY ; i<8 ; i++){
 80083f6:	8b3b      	ldrh	r3, [r7, #24]
 80083f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80083fa:	e063      	b.n	80084c4 <main+0x3b4>
 80083fc:	ffff8080 	.word	0xffff8080
 8008400:	2000057c 	.word	0x2000057c
 8008404:	200005cc 	.word	0x200005cc
 8008408:	20000708 	.word	0x20000708
 800840c:	20000348 	.word	0x20000348
 8008410:	20000338 	.word	0x20000338
 8008414:	2000033c 	.word	0x2000033c
 8008418:	20000044 	.word	0x20000044
 800841c:	0800a0d8 	.word	0x0800a0d8
 8008420:	20000748 	.word	0x20000748
 8008424:	20000060 	.word	0x20000060
 8008428:	0800a0e8 	.word	0x0800a0e8
 800842c:	2000075c 	.word	0x2000075c
 8008430:	20000340 	.word	0x20000340
 8008434:	20000344 	.word	0x20000344
 8008438:	0800a0fc 	.word	0x0800a0fc
 800843c:	0800a108 	.word	0x0800a108
 8008440:	200005c8 	.word	0x200005c8
 8008444:	200004d0 	.word	0x200004d0
 8008448:	0800a114 	.word	0x0800a114
 800844c:	0800a124 	.word	0x0800a124
 8008450:	0800a130 	.word	0x0800a130
 8008454:	200006c8 	.word	0x200006c8
 8008458:	88888889 	.word	0x88888889
 800845c:	20000064 	.word	0x20000064
				  	 if( board [i][casaX] == symbPlayer){
 8008460:	8b7b      	ldrh	r3, [r7, #26]
 8008462:	49a2      	ldr	r1, [pc, #648]	; (80086ec <main+0x5dc>)
 8008464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008466:	00d2      	lsls	r2, r2, #3
 8008468:	440a      	add	r2, r1
 800846a:	4413      	add	r3, r2
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	4ba0      	ldr	r3, [pc, #640]	; (80086f0 <main+0x5e0>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	429a      	cmp	r2, r3
 8008474:	d123      	bne.n	80084be <main+0x3ae>
				  		  j=i;
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	60bb      	str	r3, [r7, #8]
				  		  for(int i = casaY; i<=j; i++){
 800847a:	8b3b      	ldrh	r3, [r7, #24]
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
 800847e:	e01a      	b.n	80084b6 <main+0x3a6>
				  			 board[i][casaX]= symbPlayer;
 8008480:	8b7b      	ldrh	r3, [r7, #26]
 8008482:	4a9b      	ldr	r2, [pc, #620]	; (80086f0 <main+0x5e0>)
 8008484:	7810      	ldrb	r0, [r2, #0]
 8008486:	4999      	ldr	r1, [pc, #612]	; (80086ec <main+0x5dc>)
 8008488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800848a:	00d2      	lsls	r2, r2, #3
 800848c:	440a      	add	r2, r1
 800848e:	4413      	add	r3, r2
 8008490:	4602      	mov	r2, r0
 8008492:	701a      	strb	r2, [r3, #0]

				  			  BSP_LCD_FillCircle(jogadaX,  (i*60+30)  ,25);
 8008494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008496:	b29b      	uxth	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	0112      	lsls	r2, r2, #4
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	331e      	adds	r3, #30
 80084a4:	b299      	uxth	r1, r3
 80084a6:	8afb      	ldrh	r3, [r7, #22]
 80084a8:	2219      	movs	r2, #25
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7f9 fc04 	bl	8001cb8 <BSP_LCD_FillCircle>
				  		  for(int i = casaY; i<=j; i++){
 80084b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b2:	3301      	adds	r3, #1
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
 80084b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	dde0      	ble.n	8008480 <main+0x370>
				  for (int i = casaY ; i<8 ; i++){
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	3301      	adds	r3, #1
 80084c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	2b07      	cmp	r3, #7
 80084c8:	ddca      	ble.n	8008460 <main+0x350>
 80084ca:	e056      	b.n	800857a <main+0x46a>
				  }



			  }
			  else if(board[casaY-1][casaX]==symbAdv ){
 80084cc:	8b3b      	ldrh	r3, [r7, #24]
 80084ce:	1e5a      	subs	r2, r3, #1
 80084d0:	8b7b      	ldrh	r3, [r7, #26]
 80084d2:	4986      	ldr	r1, [pc, #536]	; (80086ec <main+0x5dc>)
 80084d4:	00d2      	lsls	r2, r2, #3
 80084d6:	440a      	add	r2, r1
 80084d8:	4413      	add	r3, r2
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	4b85      	ldr	r3, [pc, #532]	; (80086f4 <main+0x5e4>)
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d14a      	bne.n	800857a <main+0x46a>

			  				  BSP_LCD_SetTextColor(colorPlayer);
 80084e4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80084e6:	f7f9 f86f 	bl	80015c8 <BSP_LCD_SetTextColor>
			  				  BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 80084ea:	8ab9      	ldrh	r1, [r7, #20]
 80084ec:	8afb      	ldrh	r3, [r7, #22]
 80084ee:	2219      	movs	r2, #25
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7f9 fbe1 	bl	8001cb8 <BSP_LCD_FillCircle>

			  				  //BSP_LCD_FillCircle(jogadaX,jogadaY-60 ,25);


			  				  board[casaY][casaX]=symbPlayer;
 80084f6:	8b3a      	ldrh	r2, [r7, #24]
 80084f8:	8b7b      	ldrh	r3, [r7, #26]
 80084fa:	497d      	ldr	r1, [pc, #500]	; (80086f0 <main+0x5e0>)
 80084fc:	7808      	ldrb	r0, [r1, #0]
 80084fe:	497b      	ldr	r1, [pc, #492]	; (80086ec <main+0x5dc>)
 8008500:	00d2      	lsls	r2, r2, #3
 8008502:	440a      	add	r2, r1
 8008504:	4413      	add	r3, r2
 8008506:	4602      	mov	r2, r0
 8008508:	701a      	strb	r2, [r3, #0]

			  				 //troca as peças
			  				for (int i = casaY ; i>0 ; i--){
 800850a:	8b3b      	ldrh	r3, [r7, #24]
 800850c:	633b      	str	r3, [r7, #48]	; 0x30
 800850e:	e031      	b.n	8008574 <main+0x464>
			  				      if( board [i][casaX] == symbPlayer){
 8008510:	8b7b      	ldrh	r3, [r7, #26]
 8008512:	4976      	ldr	r1, [pc, #472]	; (80086ec <main+0x5dc>)
 8008514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008516:	00d2      	lsls	r2, r2, #3
 8008518:	440a      	add	r2, r1
 800851a:	4413      	add	r3, r2
 800851c:	781a      	ldrb	r2, [r3, #0]
 800851e:	4b74      	ldr	r3, [pc, #464]	; (80086f0 <main+0x5e0>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d123      	bne.n	800856e <main+0x45e>
			  						  j=i;
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	60bb      	str	r3, [r7, #8]
			  						 for(int i = casaY; i>=j; i--){
 800852a:	8b3b      	ldrh	r3, [r7, #24]
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800852e:	e01a      	b.n	8008566 <main+0x456>
			  						  board[i][casaX]= symbPlayer;
 8008530:	8b7b      	ldrh	r3, [r7, #26]
 8008532:	4a6f      	ldr	r2, [pc, #444]	; (80086f0 <main+0x5e0>)
 8008534:	7810      	ldrb	r0, [r2, #0]
 8008536:	496d      	ldr	r1, [pc, #436]	; (80086ec <main+0x5dc>)
 8008538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800853a:	00d2      	lsls	r2, r2, #3
 800853c:	440a      	add	r2, r1
 800853e:	4413      	add	r3, r2
 8008540:	4602      	mov	r2, r0
 8008542:	701a      	strb	r2, [r3, #0]

			  						  BSP_LCD_FillCircle(jogadaX,  (i*60+30)  ,25);
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	b29b      	uxth	r3, r3
 8008548:	461a      	mov	r2, r3
 800854a:	0112      	lsls	r2, r2, #4
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	b29b      	uxth	r3, r3
 8008552:	331e      	adds	r3, #30
 8008554:	b299      	uxth	r1, r3
 8008556:	8afb      	ldrh	r3, [r7, #22]
 8008558:	2219      	movs	r2, #25
 800855a:	4618      	mov	r0, r3
 800855c:	f7f9 fbac 	bl	8001cb8 <BSP_LCD_FillCircle>
			  						 for(int i = casaY; i>=j; i--){
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	3b01      	subs	r3, #1
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	429a      	cmp	r2, r3
 800856c:	dae0      	bge.n	8008530 <main+0x420>
			  				for (int i = casaY ; i>0 ; i--){
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	3b01      	subs	r3, #1
 8008572:	633b      	str	r3, [r7, #48]	; 0x30
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	2b00      	cmp	r3, #0
 8008578:	dcca      	bgt.n	8008510 <main+0x400>

			  			  }

		  //verfica coluna-----------------------------------------------------------------------

			  if( board[casaY][casaX+1] == symbAdv ){
 800857a:	8b3a      	ldrh	r2, [r7, #24]
 800857c:	8b7b      	ldrh	r3, [r7, #26]
 800857e:	3301      	adds	r3, #1
 8008580:	495a      	ldr	r1, [pc, #360]	; (80086ec <main+0x5dc>)
 8008582:	00d2      	lsls	r2, r2, #3
 8008584:	440a      	add	r2, r1
 8008586:	4413      	add	r3, r2
 8008588:	781a      	ldrb	r2, [r3, #0]
 800858a:	4b5a      	ldr	r3, [pc, #360]	; (80086f4 <main+0x5e4>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d14b      	bne.n	800862a <main+0x51a>

				  BSP_LCD_SetTextColor(colorPlayer);
 8008592:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008594:	f7f9 f818 	bl	80015c8 <BSP_LCD_SetTextColor>
				  BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 8008598:	8ab9      	ldrh	r1, [r7, #20]
 800859a:	8afb      	ldrh	r3, [r7, #22]
 800859c:	2219      	movs	r2, #25
 800859e:	4618      	mov	r0, r3
 80085a0:	f7f9 fb8a 	bl	8001cb8 <BSP_LCD_FillCircle>

				  //BSP_LCD_FillCircle(jogadaX +60,jogadaY,25);

				board[casaY][casaX]=symbPlayer;
 80085a4:	8b3a      	ldrh	r2, [r7, #24]
 80085a6:	8b7b      	ldrh	r3, [r7, #26]
 80085a8:	4951      	ldr	r1, [pc, #324]	; (80086f0 <main+0x5e0>)
 80085aa:	7808      	ldrb	r0, [r1, #0]
 80085ac:	494f      	ldr	r1, [pc, #316]	; (80086ec <main+0x5dc>)
 80085ae:	00d2      	lsls	r2, r2, #3
 80085b0:	440a      	add	r2, r1
 80085b2:	4413      	add	r3, r2
 80085b4:	4602      	mov	r2, r0
 80085b6:	701a      	strb	r2, [r3, #0]

				  //troca as peças
				 for (int i = casaX ; i<8 ; i++){
 80085b8:	8b7b      	ldrh	r3, [r7, #26]
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80085bc:	e031      	b.n	8008622 <main+0x512>
					 if( board [casaY][i] == symbPlayer){
 80085be:	8b3b      	ldrh	r3, [r7, #24]
 80085c0:	4a4a      	ldr	r2, [pc, #296]	; (80086ec <main+0x5dc>)
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	441a      	add	r2, r3
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	4413      	add	r3, r2
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	4b48      	ldr	r3, [pc, #288]	; (80086f0 <main+0x5e0>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d123      	bne.n	800861c <main+0x50c>
					  j=i;
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	60bb      	str	r3, [r7, #8]
					  for(int i = casaX; i<=j; i++){
 80085d8:	8b7b      	ldrh	r3, [r7, #26]
 80085da:	627b      	str	r3, [r7, #36]	; 0x24
 80085dc:	e01a      	b.n	8008614 <main+0x504>
						 board[casaY][i]= symbPlayer;
 80085de:	8b3b      	ldrh	r3, [r7, #24]
 80085e0:	4a43      	ldr	r2, [pc, #268]	; (80086f0 <main+0x5e0>)
 80085e2:	7811      	ldrb	r1, [r2, #0]
 80085e4:	4a41      	ldr	r2, [pc, #260]	; (80086ec <main+0x5dc>)
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	441a      	add	r2, r3
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	4413      	add	r3, r2
 80085ee:	460a      	mov	r2, r1
 80085f0:	701a      	strb	r2, [r3, #0]

						BSP_LCD_FillCircle((i*60+30),  jogadaY  ,25);
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	461a      	mov	r2, r3
 80085f8:	0112      	lsls	r2, r2, #4
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	b29b      	uxth	r3, r3
 8008600:	331e      	adds	r3, #30
 8008602:	b29b      	uxth	r3, r3
 8008604:	8ab9      	ldrh	r1, [r7, #20]
 8008606:	2219      	movs	r2, #25
 8008608:	4618      	mov	r0, r3
 800860a:	f7f9 fb55 	bl	8001cb8 <BSP_LCD_FillCircle>
					  for(int i = casaX; i<=j; i++){
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	3301      	adds	r3, #1
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
 8008614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	429a      	cmp	r2, r3
 800861a:	dde0      	ble.n	80085de <main+0x4ce>
				 for (int i = casaX ; i<8 ; i++){
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	3301      	adds	r3, #1
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	2b07      	cmp	r3, #7
 8008626:	ddca      	ble.n	80085be <main+0x4ae>
 8008628:	e056      	b.n	80086d8 <main+0x5c8>
					  }
		        }


			  }
			  else if(  board[casaY][casaX-1]==symbAdv ){
 800862a:	8b3a      	ldrh	r2, [r7, #24]
 800862c:	8b7b      	ldrh	r3, [r7, #26]
 800862e:	3b01      	subs	r3, #1
 8008630:	492e      	ldr	r1, [pc, #184]	; (80086ec <main+0x5dc>)
 8008632:	00d2      	lsls	r2, r2, #3
 8008634:	440a      	add	r2, r1
 8008636:	4413      	add	r3, r2
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	4b2e      	ldr	r3, [pc, #184]	; (80086f4 <main+0x5e4>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d14a      	bne.n	80086d8 <main+0x5c8>

			  				  BSP_LCD_SetTextColor(colorPlayer);
 8008642:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008644:	f7f8 ffc0 	bl	80015c8 <BSP_LCD_SetTextColor>
			  				  BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 8008648:	8ab9      	ldrh	r1, [r7, #20]
 800864a:	8afb      	ldrh	r3, [r7, #22]
 800864c:	2219      	movs	r2, #25
 800864e:	4618      	mov	r0, r3
 8008650:	f7f9 fb32 	bl	8001cb8 <BSP_LCD_FillCircle>

			  				  //BSP_LCD_FillCircle(jogadaX -60,jogadaY,25);

			  				board[casaY][casaX]=symbPlayer;
 8008654:	8b3a      	ldrh	r2, [r7, #24]
 8008656:	8b7b      	ldrh	r3, [r7, #26]
 8008658:	4925      	ldr	r1, [pc, #148]	; (80086f0 <main+0x5e0>)
 800865a:	7808      	ldrb	r0, [r1, #0]
 800865c:	4923      	ldr	r1, [pc, #140]	; (80086ec <main+0x5dc>)
 800865e:	00d2      	lsls	r2, r2, #3
 8008660:	440a      	add	r2, r1
 8008662:	4413      	add	r3, r2
 8008664:	4602      	mov	r2, r0
 8008666:	701a      	strb	r2, [r3, #0]

			  				//troca as peças
			  				for (int i = casaX ; i>0 ; i--){
 8008668:	8b7b      	ldrh	r3, [r7, #26]
 800866a:	623b      	str	r3, [r7, #32]
 800866c:	e031      	b.n	80086d2 <main+0x5c2>
			  				    if( board [casaY][i] == symbPlayer){
 800866e:	8b3b      	ldrh	r3, [r7, #24]
 8008670:	4a1e      	ldr	r2, [pc, #120]	; (80086ec <main+0x5dc>)
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	441a      	add	r2, r3
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	4413      	add	r3, r2
 800867a:	781a      	ldrb	r2, [r3, #0]
 800867c:	4b1c      	ldr	r3, [pc, #112]	; (80086f0 <main+0x5e0>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d123      	bne.n	80086cc <main+0x5bc>
			  					 j=i;
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	60bb      	str	r3, [r7, #8]
			  					 for(int i = casaX; i>=j; i--){
 8008688:	8b7b      	ldrh	r3, [r7, #26]
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	e01a      	b.n	80086c4 <main+0x5b4>
			  						 board[casaY][i]= symbPlayer;
 800868e:	8b3b      	ldrh	r3, [r7, #24]
 8008690:	4a17      	ldr	r2, [pc, #92]	; (80086f0 <main+0x5e0>)
 8008692:	7811      	ldrb	r1, [r2, #0]
 8008694:	4a15      	ldr	r2, [pc, #84]	; (80086ec <main+0x5dc>)
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	441a      	add	r2, r3
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	4413      	add	r3, r2
 800869e:	460a      	mov	r2, r1
 80086a0:	701a      	strb	r2, [r3, #0]

			  					      BSP_LCD_FillCircle((i*60+30),  jogadaY  ,25);
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	461a      	mov	r2, r3
 80086a8:	0112      	lsls	r2, r2, #4
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	331e      	adds	r3, #30
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	8ab9      	ldrh	r1, [r7, #20]
 80086b6:	2219      	movs	r2, #25
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7f9 fafd 	bl	8001cb8 <BSP_LCD_FillCircle>
			  					 for(int i = casaX; i>=j; i--){
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	61fb      	str	r3, [r7, #28]
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	dae0      	bge.n	800868e <main+0x57e>
			  				for (int i = casaX ; i>0 ; i--){
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	623b      	str	r3, [r7, #32]
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dcca      	bgt.n	800866e <main+0x55e>

}

/*Game over */

if(gameEnd==1){
 80086d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	f47f ad64 	bne.w	80081a8 <main+0x98>
	gameEnd=0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	64fb      	str	r3, [r7, #76]	; 0x4c

	gameOver();
 80086e4:	f000 fd36 	bl	8009154 <gameOver>
	  if(BSP_PB_GetState(BUTTON_WAKEUP)==1){
 80086e8:	e55e      	b.n	80081a8 <main+0x98>
 80086ea:	bf00      	nop
 80086ec:	20000064 	.word	0x20000064
 80086f0:	200005c8 	.word	0x200005c8
 80086f4:	200004d0 	.word	0x200004d0

080086f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b0b8      	sub	sp, #224	; 0xe0
 80086fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80086fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008702:	2234      	movs	r2, #52	; 0x34
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f001 f8c6 	bl	8009898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800870c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	605a      	str	r2, [r3, #4]
 8008716:	609a      	str	r2, [r3, #8]
 8008718:	60da      	str	r2, [r3, #12]
 800871a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800871c:	f107 0308 	add.w	r3, r7, #8
 8008720:	2290      	movs	r2, #144	; 0x90
 8008722:	2100      	movs	r1, #0
 8008724:	4618      	mov	r0, r3
 8008726:	f001 f8b7 	bl	8009898 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800872a:	4b3e      	ldr	r3, [pc, #248]	; (8008824 <SystemClock_Config+0x12c>)
 800872c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872e:	4a3d      	ldr	r2, [pc, #244]	; (8008824 <SystemClock_Config+0x12c>)
 8008730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008734:	6413      	str	r3, [r2, #64]	; 0x40
 8008736:	4b3b      	ldr	r3, [pc, #236]	; (8008824 <SystemClock_Config+0x12c>)
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800873e:	607b      	str	r3, [r7, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008742:	4b39      	ldr	r3, [pc, #228]	; (8008828 <SystemClock_Config+0x130>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a38      	ldr	r2, [pc, #224]	; (8008828 <SystemClock_Config+0x130>)
 8008748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	4b36      	ldr	r3, [pc, #216]	; (8008828 <SystemClock_Config+0x130>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800875a:	2301      	movs	r3, #1
 800875c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008768:	2302      	movs	r3, #2
 800876a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800876e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008776:	2319      	movs	r3, #25
 8008778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800877c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008784:	2302      	movs	r3, #2
 8008786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800878a:	2304      	movs	r3, #4
 800878c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008790:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008794:	4618      	mov	r0, r3
 8008796:	f7fd ff79 	bl	800668c <HAL_RCC_OscConfig>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80087a0:	f000 fd8c 	bl	80092bc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80087a4:	f7fd ff22 	bl	80065ec <HAL_PWREx_EnableOverDrive>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80087ae:	f000 fd85 	bl	80092bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80087b2:	230f      	movs	r3, #15
 80087b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80087b8:	2302      	movs	r3, #2
 80087ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80087be:	2300      	movs	r3, #0
 80087c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80087c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80087c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80087cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80087d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80087d8:	2106      	movs	r1, #6
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe f9c8 	bl	8006b70 <HAL_RCC_ClockConfig>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80087e6:	f000 fd69 	bl	80092bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80087ea:	2308      	movs	r3, #8
 80087ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80087ee:	23c0      	movs	r3, #192	; 0xc0
 80087f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80087f2:	2302      	movs	r3, #2
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 80087f6:	2303      	movs	r3, #3
 80087f8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80087fa:	2300      	movs	r3, #0
 80087fc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80087fe:	2301      	movs	r3, #1
 8008800:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8008802:	2300      	movs	r3, #0
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008806:	f107 0308 	add.w	r3, r7, #8
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe fb4a 	bl	8006ea4 <HAL_RCCEx_PeriphCLKConfig>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8008816:	f000 fd51 	bl	80092bc <Error_Handler>
  }
}
 800881a:	bf00      	nop
 800881c:	37e0      	adds	r7, #224	; 0xe0
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	40023800 	.word	0x40023800
 8008828:	40007000 	.word	0x40007000

0800882c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008832:	463b      	mov	r3, r7
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	605a      	str	r2, [r3, #4]
 800883a:	609a      	str	r2, [r3, #8]
 800883c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800883e:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <MX_ADC1_Init+0x98>)
 8008840:	4a21      	ldr	r2, [pc, #132]	; (80088c8 <MX_ADC1_Init+0x9c>)
 8008842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008844:	4b1f      	ldr	r3, [pc, #124]	; (80088c4 <MX_ADC1_Init+0x98>)
 8008846:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800884a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800884c:	4b1d      	ldr	r3, [pc, #116]	; (80088c4 <MX_ADC1_Init+0x98>)
 800884e:	2200      	movs	r2, #0
 8008850:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008852:	4b1c      	ldr	r3, [pc, #112]	; (80088c4 <MX_ADC1_Init+0x98>)
 8008854:	2200      	movs	r2, #0
 8008856:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008858:	4b1a      	ldr	r3, [pc, #104]	; (80088c4 <MX_ADC1_Init+0x98>)
 800885a:	2201      	movs	r2, #1
 800885c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800885e:	4b19      	ldr	r3, [pc, #100]	; (80088c4 <MX_ADC1_Init+0x98>)
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008866:	4b17      	ldr	r3, [pc, #92]	; (80088c4 <MX_ADC1_Init+0x98>)
 8008868:	2200      	movs	r2, #0
 800886a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800886c:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <MX_ADC1_Init+0x98>)
 800886e:	4a17      	ldr	r2, [pc, #92]	; (80088cc <MX_ADC1_Init+0xa0>)
 8008870:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008872:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <MX_ADC1_Init+0x98>)
 8008874:	2200      	movs	r2, #0
 8008876:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008878:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <MX_ADC1_Init+0x98>)
 800887a:	2201      	movs	r2, #1
 800887c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800887e:	4b11      	ldr	r3, [pc, #68]	; (80088c4 <MX_ADC1_Init+0x98>)
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <MX_ADC1_Init+0x98>)
 8008888:	2200      	movs	r2, #0
 800888a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800888c:	480d      	ldr	r0, [pc, #52]	; (80088c4 <MX_ADC1_Init+0x98>)
 800888e:	f7fa f879 	bl	8002984 <HAL_ADC_Init>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008898:	f000 fd10 	bl	80092bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800889c:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <MX_ADC1_Init+0xa4>)
 800889e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80088a0:	2301      	movs	r3, #1
 80088a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80088a4:	2303      	movs	r3, #3
 80088a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80088a8:	463b      	mov	r3, r7
 80088aa:	4619      	mov	r1, r3
 80088ac:	4805      	ldr	r0, [pc, #20]	; (80088c4 <MX_ADC1_Init+0x98>)
 80088ae:	f7fa fb5d 	bl	8002f6c <HAL_ADC_ConfigChannel>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80088b8:	f000 fd00 	bl	80092bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80088bc:	bf00      	nop
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	2000057c 	.word	0x2000057c
 80088c8:	40012000 	.word	0x40012000
 80088cc:	0f000001 	.word	0x0f000001
 80088d0:	10000012 	.word	0x10000012

080088d4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80088d8:	4b18      	ldr	r3, [pc, #96]	; (800893c <MX_DMA2D_Init+0x68>)
 80088da:	4a19      	ldr	r2, [pc, #100]	; (8008940 <MX_DMA2D_Init+0x6c>)
 80088dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80088de:	4b17      	ldr	r3, [pc, #92]	; (800893c <MX_DMA2D_Init+0x68>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80088e4:	4b15      	ldr	r3, [pc, #84]	; (800893c <MX_DMA2D_Init+0x68>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80088ea:	4b14      	ldr	r3, [pc, #80]	; (800893c <MX_DMA2D_Init+0x68>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80088f0:	4b12      	ldr	r3, [pc, #72]	; (800893c <MX_DMA2D_Init+0x68>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80088f6:	4b11      	ldr	r3, [pc, #68]	; (800893c <MX_DMA2D_Init+0x68>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80088fc:	4b0f      	ldr	r3, [pc, #60]	; (800893c <MX_DMA2D_Init+0x68>)
 80088fe:	2200      	movs	r2, #0
 8008900:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8008902:	4b0e      	ldr	r3, [pc, #56]	; (800893c <MX_DMA2D_Init+0x68>)
 8008904:	2200      	movs	r2, #0
 8008906:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8008908:	4b0c      	ldr	r3, [pc, #48]	; (800893c <MX_DMA2D_Init+0x68>)
 800890a:	2200      	movs	r2, #0
 800890c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800890e:	4b0b      	ldr	r3, [pc, #44]	; (800893c <MX_DMA2D_Init+0x68>)
 8008910:	2200      	movs	r2, #0
 8008912:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8008914:	4809      	ldr	r0, [pc, #36]	; (800893c <MX_DMA2D_Init+0x68>)
 8008916:	f7fb f82f 	bl	8003978 <HAL_DMA2D_Init>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8008920:	f000 fccc 	bl	80092bc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8008924:	2101      	movs	r1, #1
 8008926:	4805      	ldr	r0, [pc, #20]	; (800893c <MX_DMA2D_Init+0x68>)
 8008928:	f7fb f994 	bl	8003c54 <HAL_DMA2D_ConfigLayer>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8008932:	f000 fcc3 	bl	80092bc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8008936:	bf00      	nop
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20000670 	.word	0x20000670
 8008940:	4002b000 	.word	0x4002b000

08008944 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b0aa      	sub	sp, #168	; 0xa8
 8008948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800894a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	605a      	str	r2, [r3, #4]
 8008954:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8008956:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800895a:	2224      	movs	r2, #36	; 0x24
 800895c:	2100      	movs	r1, #0
 800895e:	4618      	mov	r0, r3
 8008960:	f000 ff9a 	bl	8009898 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8008964:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	605a      	str	r2, [r3, #4]
 800896e:	609a      	str	r2, [r3, #8]
 8008970:	60da      	str	r2, [r3, #12]
 8008972:	611a      	str	r2, [r3, #16]
 8008974:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8008976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800897a:	2234      	movs	r2, #52	; 0x34
 800897c:	2100      	movs	r1, #0
 800897e:	4618      	mov	r0, r3
 8008980:	f000 ff8a 	bl	8009898 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8008984:	463b      	mov	r3, r7
 8008986:	222c      	movs	r2, #44	; 0x2c
 8008988:	2100      	movs	r1, #0
 800898a:	4618      	mov	r0, r3
 800898c:	f000 ff84 	bl	8009898 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8008990:	4b64      	ldr	r3, [pc, #400]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008992:	4a65      	ldr	r2, [pc, #404]	; (8008b28 <MX_DSIHOST_DSI_Init+0x1e4>)
 8008994:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8008996:	4b63      	ldr	r3, [pc, #396]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008998:	2200      	movs	r2, #0
 800899a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800899c:	4b61      	ldr	r3, [pc, #388]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 800899e:	2204      	movs	r2, #4
 80089a0:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80089a2:	4b60      	ldr	r3, [pc, #384]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 80089a8:	2314      	movs	r3, #20
 80089aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80089ae:	2301      	movs	r3, #1
 80089b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80089b4:	2300      	movs	r3, #0
 80089b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80089ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80089be:	4619      	mov	r1, r3
 80089c0:	4858      	ldr	r0, [pc, #352]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 80089c2:	f7fb fac9 	bl	8003f58 <HAL_DSI_Init>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80089cc:	f000 fc76 	bl	80092bc <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80089d0:	2301      	movs	r3, #1
 80089d2:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8008a02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008a06:	4619      	mov	r1, r3
 8008a08:	4846      	ldr	r0, [pc, #280]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008a0a:	f7fc f8e1 	bl	8004bd0 <HAL_DSI_ConfigHostTimeouts>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8008a14:	f000 fc52 	bl	80092bc <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8008a18:	231c      	movs	r3, #28
 8008a1a:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8008a1c:	2321      	movs	r3, #33	; 0x21
 8008a1e:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8008a20:	230f      	movs	r3, #15
 8008a22:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8008a24:	2319      	movs	r3, #25
 8008a26:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8008a30:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008a34:	4619      	mov	r1, r3
 8008a36:	483b      	ldr	r0, [pc, #236]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008a38:	f7fc f860 	bl	8004afc <HAL_DSI_ConfigPhyTimer>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8008a42:	f000 fc3b 	bl	80092bc <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8008a46:	2104      	movs	r1, #4
 8008a48:	4836      	ldr	r0, [pc, #216]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008a4a:	f7fc f82f 	bl	8004aac <HAL_DSI_ConfigFlowControl>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8008a54:	f000 fc32 	bl	80092bc <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8008a58:	f242 7110 	movw	r1, #10000	; 0x2710
 8008a5c:	4831      	ldr	r0, [pc, #196]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008a5e:	f7fc fa75 	bl	8004f4c <HAL_DSI_SetLowPowerRXFilter>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8008a68:	f000 fc28 	bl	80092bc <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	482d      	ldr	r0, [pc, #180]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008a70:	f7fb fc00 	bl	8004274 <HAL_DSI_ConfigErrorMonitor>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8008a7a:	f000 fc1f 	bl	80092bc <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8008a82:	2300      	movs	r3, #0
 8008a84:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8008ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	481a      	ldr	r0, [pc, #104]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008aba:	f7fb ff99 	bl	80049f0 <HAL_DSI_ConfigCommand>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8008ac4:	f000 fbfa 	bl	80092bc <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8008acc:	2305      	movs	r3, #5
 8008ace:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8008ad0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8008ad4:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8008ad6:	2310      	movs	r3, #16
 8008ad8:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8008ade:	2304      	movs	r3, #4
 8008ae0:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8008aea:	2300      	movs	r3, #0
 8008aec:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8008aee:	2340      	movs	r3, #64	; 0x40
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8008af2:	2300      	movs	r3, #0
 8008af4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8008af6:	463b      	mov	r3, r7
 8008af8:	4619      	mov	r1, r3
 8008afa:	480a      	ldr	r0, [pc, #40]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008afc:	f7fb fe9e 	bl	800483c <HAL_DSI_ConfigAdaptedCommandMode>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8008b06:	f000 fbd9 	bl	80092bc <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	4805      	ldr	r0, [pc, #20]	; (8008b24 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008b0e:	f7fb fc6d 	bl	80043ec <HAL_DSI_SetGenericVCID>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8008b18:	f000 fbd0 	bl	80092bc <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8008b1c:	bf00      	nop
 8008b1e:	37a8      	adds	r7, #168	; 0xa8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	200004b4 	.word	0x200004b4
 8008b28:	40016c00 	.word	0x40016c00

08008b2c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b09a      	sub	sp, #104	; 0x68
 8008b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8008b32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b36:	2234      	movs	r2, #52	; 0x34
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 feac 	bl	8009898 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8008b40:	463b      	mov	r3, r7
 8008b42:	2234      	movs	r2, #52	; 0x34
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fea6 	bl	8009898 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8008b4c:	4b4e      	ldr	r3, [pc, #312]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b4e:	4a4f      	ldr	r2, [pc, #316]	; (8008c8c <MX_LTDC_Init+0x160>)
 8008b50:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8008b52:	4b4d      	ldr	r3, [pc, #308]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8008b58:	4b4b      	ldr	r3, [pc, #300]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8008b5e:	4b4a      	ldr	r3, [pc, #296]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008b64:	4b48      	ldr	r3, [pc, #288]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8008b6a:	4b47      	ldr	r3, [pc, #284]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b6c:	2207      	movs	r2, #7
 8008b6e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8008b70:	4b45      	ldr	r3, [pc, #276]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b72:	2203      	movs	r2, #3
 8008b74:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8008b76:	4b44      	ldr	r3, [pc, #272]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b78:	220e      	movs	r2, #14
 8008b7a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8008b7c:	4b42      	ldr	r3, [pc, #264]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b7e:	2205      	movs	r2, #5
 8008b80:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8008b82:	4b41      	ldr	r3, [pc, #260]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b84:	f240 228e 	movw	r2, #654	; 0x28e
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8008b8a:	4b3f      	ldr	r3, [pc, #252]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b8c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8008b90:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8008b92:	4b3d      	ldr	r3, [pc, #244]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b94:	f44f 7225 	mov.w	r2, #660	; 0x294
 8008b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8008b9a:	4b3b      	ldr	r3, [pc, #236]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008b9c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8008ba2:	4b39      	ldr	r3, [pc, #228]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8008baa:	4b37      	ldr	r3, [pc, #220]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8008bb2:	4b35      	ldr	r3, [pc, #212]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8008bba:	4833      	ldr	r0, [pc, #204]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008bbc:	f7fd fa1e 	bl	8005ffc <HAL_LTDC_Init>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8008bc6:	f000 fb79 	bl	80092bc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8008be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bea:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8008bec:	2305      	movs	r3, #5
 8008bee:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8008c0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c12:	2200      	movs	r2, #0
 8008c14:	4619      	mov	r1, r3
 8008c16:	481c      	ldr	r0, [pc, #112]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008c18:	f7fd fac0 	bl	800619c <HAL_LTDC_ConfigLayer>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8008c22:	f000 fb4b 	bl	80092bc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008c36:	2300      	movs	r3, #0
 8008c38:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8008c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c46:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8008c48:	2305      	movs	r3, #5
 8008c4a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8008c6a:	463b      	mov	r3, r7
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4805      	ldr	r0, [pc, #20]	; (8008c88 <MX_LTDC_Init+0x15c>)
 8008c72:	f7fd fa93 	bl	800619c <HAL_LTDC_ConfigLayer>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8008c7c:	f000 fb1e 	bl	80092bc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8008c80:	bf00      	nop
 8008c82:	3768      	adds	r7, #104	; 0x68
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	200004d4 	.word	0x200004d4
 8008c8c:	40016800 	.word	0x40016800

08008c90 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c96:	1d3b      	adds	r3, r7, #4
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	605a      	str	r2, [r3, #4]
 8008c9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008ca0:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <MX_TIM6_Init+0x68>)
 8008ca2:	4a16      	ldr	r2, [pc, #88]	; (8008cfc <MX_TIM6_Init+0x6c>)
 8008ca4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 14141;
 8008ca6:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <MX_TIM6_Init+0x68>)
 8008ca8:	f243 723d 	movw	r2, #14141	; 0x373d
 8008cac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cae:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <MX_TIM6_Init+0x68>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 14141;
 8008cb4:	4b10      	ldr	r3, [pc, #64]	; (8008cf8 <MX_TIM6_Init+0x68>)
 8008cb6:	f243 723d 	movw	r2, #14141	; 0x373d
 8008cba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008cbc:	4b0e      	ldr	r3, [pc, #56]	; (8008cf8 <MX_TIM6_Init+0x68>)
 8008cbe:	2280      	movs	r2, #128	; 0x80
 8008cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008cc2:	480d      	ldr	r0, [pc, #52]	; (8008cf8 <MX_TIM6_Init+0x68>)
 8008cc4:	f7fe fd93 	bl	80077ee <HAL_TIM_Base_Init>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8008cce:	f000 faf5 	bl	80092bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008cda:	1d3b      	adds	r3, r7, #4
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4806      	ldr	r0, [pc, #24]	; (8008cf8 <MX_TIM6_Init+0x68>)
 8008ce0:	f7fe ffc2 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8008cea:	f000 fae7 	bl	80092bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008cee:	bf00      	nop
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200005cc 	.word	0x200005cc
 8008cfc:	40001000 	.word	0x40001000

08008d00 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d06:	1d3b      	adds	r3, r7, #4
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	605a      	str	r2, [r3, #4]
 8008d0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008d10:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <MX_TIM7_Init+0x68>)
 8008d12:	4a16      	ldr	r2, [pc, #88]	; (8008d6c <MX_TIM7_Init+0x6c>)
 8008d14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <MX_TIM7_Init+0x68>)
 8008d18:	f242 720f 	movw	r2, #9999	; 0x270f
 8008d1c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d1e:	4b12      	ldr	r3, [pc, #72]	; (8008d68 <MX_TIM7_Init+0x68>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8008d24:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <MX_TIM7_Init+0x68>)
 8008d26:	f242 720f 	movw	r2, #9999	; 0x270f
 8008d2a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008d2c:	4b0e      	ldr	r3, [pc, #56]	; (8008d68 <MX_TIM7_Init+0x68>)
 8008d2e:	2280      	movs	r2, #128	; 0x80
 8008d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008d32:	480d      	ldr	r0, [pc, #52]	; (8008d68 <MX_TIM7_Init+0x68>)
 8008d34:	f7fe fd5b 	bl	80077ee <HAL_TIM_Base_Init>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8008d3e:	f000 fabd 	bl	80092bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d42:	2300      	movs	r3, #0
 8008d44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008d4a:	1d3b      	adds	r3, r7, #4
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4806      	ldr	r0, [pc, #24]	; (8008d68 <MX_TIM7_Init+0x68>)
 8008d50:	f7fe ff8a 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8008d5a:	f000 faaf 	bl	80092bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8008d5e:	bf00      	nop
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000708 	.word	0x20000708
 8008d6c:	40001400 	.word	0x40001400

08008d70 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8008d76:	1d3b      	adds	r3, r7, #4
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	605a      	str	r2, [r3, #4]
 8008d7e:	609a      	str	r2, [r3, #8]
 8008d80:	60da      	str	r2, [r3, #12]
 8008d82:	611a      	str	r2, [r3, #16]
 8008d84:	615a      	str	r2, [r3, #20]
 8008d86:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008d88:	4b1e      	ldr	r3, [pc, #120]	; (8008e04 <MX_FMC_Init+0x94>)
 8008d8a:	4a1f      	ldr	r2, [pc, #124]	; (8008e08 <MX_FMC_Init+0x98>)
 8008d8c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8008d8e:	4b1d      	ldr	r3, [pc, #116]	; (8008e04 <MX_FMC_Init+0x94>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008d94:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <MX_FMC_Init+0x94>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8008d9a:	4b1a      	ldr	r3, [pc, #104]	; (8008e04 <MX_FMC_Init+0x94>)
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008da0:	4b18      	ldr	r3, [pc, #96]	; (8008e04 <MX_FMC_Init+0x94>)
 8008da2:	2220      	movs	r2, #32
 8008da4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008da6:	4b17      	ldr	r3, [pc, #92]	; (8008e04 <MX_FMC_Init+0x94>)
 8008da8:	2240      	movs	r2, #64	; 0x40
 8008daa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8008dac:	4b15      	ldr	r3, [pc, #84]	; (8008e04 <MX_FMC_Init+0x94>)
 8008dae:	2280      	movs	r2, #128	; 0x80
 8008db0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008db2:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <MX_FMC_Init+0x94>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8008db8:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <MX_FMC_Init+0x94>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008dbe:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <MX_FMC_Init+0x94>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8008dc4:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <MX_FMC_Init+0x94>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8008dca:	2310      	movs	r3, #16
 8008dcc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8008dce:	2310      	movs	r3, #16
 8008dd0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8008dd2:	2310      	movs	r3, #16
 8008dd4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8008dda:	2310      	movs	r3, #16
 8008ddc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8008dde:	2310      	movs	r3, #16
 8008de0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8008de2:	2310      	movs	r3, #16
 8008de4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008de6:	1d3b      	adds	r3, r7, #4
 8008de8:	4619      	mov	r1, r3
 8008dea:	4806      	ldr	r0, [pc, #24]	; (8008e04 <MX_FMC_Init+0x94>)
 8008dec:	f7fe fc80 	bl	80076f0 <HAL_SDRAM_Init>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8008df6:	f000 fa61 	bl	80092bc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8008dfa:	bf00      	nop
 8008dfc:	3720      	adds	r7, #32
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200006d4 	.word	0x200006d4
 8008e08:	a0000140 	.word	0xa0000140

08008e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08e      	sub	sp, #56	; 0x38
 8008e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	605a      	str	r2, [r3, #4]
 8008e1c:	609a      	str	r2, [r3, #8]
 8008e1e:	60da      	str	r2, [r3, #12]
 8008e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008e22:	4b3c      	ldr	r3, [pc, #240]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e26:	4a3b      	ldr	r2, [pc, #236]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e28:	f043 0310 	orr.w	r3, r3, #16
 8008e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e2e:	4b39      	ldr	r3, [pc, #228]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	f003 0310 	and.w	r3, r3, #16
 8008e36:	623b      	str	r3, [r7, #32]
 8008e38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e3a:	4b36      	ldr	r3, [pc, #216]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	4a35      	ldr	r2, [pc, #212]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e40:	f043 0302 	orr.w	r3, r3, #2
 8008e44:	6313      	str	r3, [r2, #48]	; 0x30
 8008e46:	4b33      	ldr	r3, [pc, #204]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	61fb      	str	r3, [r7, #28]
 8008e50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e52:	4b30      	ldr	r3, [pc, #192]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	4a2f      	ldr	r2, [pc, #188]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e5e:	4b2d      	ldr	r3, [pc, #180]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e66:	61bb      	str	r3, [r7, #24]
 8008e68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e6a:	4b2a      	ldr	r3, [pc, #168]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6e:	4a29      	ldr	r2, [pc, #164]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e70:	f043 0308 	orr.w	r3, r3, #8
 8008e74:	6313      	str	r3, [r2, #48]	; 0x30
 8008e76:	4b27      	ldr	r3, [pc, #156]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	f003 0308 	and.w	r3, r3, #8
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	4a23      	ldr	r2, [pc, #140]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e8e:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e96:	613b      	str	r3, [r7, #16]
 8008e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e9a:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9e:	4a1d      	ldr	r2, [pc, #116]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008ea0:	f043 0320 	orr.w	r3, r3, #32
 8008ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ea6:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008eb2:	4b18      	ldr	r3, [pc, #96]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	4a17      	ldr	r2, [pc, #92]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ebe:	4b15      	ldr	r3, [pc, #84]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec6:	60bb      	str	r3, [r7, #8]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ece:	4a11      	ldr	r2, [pc, #68]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <MX_GPIO_Init+0x108>)
 8008ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ede:	607b      	str	r3, [r7, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <MX_GPIO_Init+0x10c>)
 8008eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eec:	2300      	movs	r3, #0
 8008eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4809      	ldr	r0, [pc, #36]	; (8008f1c <MX_GPIO_Init+0x110>)
 8008ef8:	f7fc f856 	bl	8004fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008efc:	2200      	movs	r2, #0
 8008efe:	2100      	movs	r1, #0
 8008f00:	2028      	movs	r0, #40	; 0x28
 8008f02:	f7fa fb46 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008f06:	2028      	movs	r0, #40	; 0x28
 8008f08:	f7fa fb5f 	bl	80035ca <HAL_NVIC_EnableIRQ>

}
 8008f0c:	bf00      	nop
 8008f0e:	3738      	adds	r7, #56	; 0x38
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40023800 	.word	0x40023800
 8008f18:	10110000 	.word	0x10110000
 8008f1c:	40022000 	.word	0x40022000

08008f20 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 int Xpos=0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60bb      	str	r3, [r7, #8]
 int Space=60;
 8008f2a:	233c      	movs	r3, #60	; 0x3c
 8008f2c:	607b      	str	r3, [r7, #4]
 int j=0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]

  uint32_t  lcd_status = LCD_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	603b      	str	r3, [r7, #0]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 8008f36:	f7f8 f94a 	bl	80011ce <BSP_LCD_Init>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	603b      	str	r3, [r7, #0]
  while(lcd_status != LCD_OK);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1fc      	bne.n	8008f3e <LCD_Config+0x1e>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8008f44:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8008f48:	2000      	movs	r0, #0
 8008f4a:	f7f8 fadd 	bl	8001508 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f52:	f7f8 fb85 	bl	8001660 <BSP_LCD_Clear>

  /* Set the Board  */
   //Draw vertical lines
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8008f56:	483f      	ldr	r0, [pc, #252]	; (8009054 <LCD_Config+0x134>)
 8008f58:	f7f8 fb36 	bl	80015c8 <BSP_LCD_SetTextColor>

  j=0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]
  for(int i=0; i<9; i++){
 8008f60:	2300      	movs	r3, #0
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	e012      	b.n	8008f8c <LCD_Config+0x6c>

	  	  BSP_LCD_DrawVLine(Xpos+j, 0, 480 );
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	4413      	add	r3, r2
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7f8 fcdf 	bl	800193c <BSP_LCD_DrawVLine>
	  	  j=j+Space;
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4413      	add	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]
  for(int i=0; i<9; i++){
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	613b      	str	r3, [r7, #16]
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2b08      	cmp	r3, #8
 8008f90:	dde9      	ble.n	8008f66 <LCD_Config+0x46>
  }
  //Draw horizontal lines
    BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8008f92:	4830      	ldr	r0, [pc, #192]	; (8009054 <LCD_Config+0x134>)
 8008f94:	f7f8 fb18 	bl	80015c8 <BSP_LCD_SetTextColor>

    j=0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]
    for(int i=0; i<9; i++){
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	e00e      	b.n	8008fc0 <LCD_Config+0xa0>

  	  	  BSP_LCD_DrawHLine(0, j, 480 );
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008faa:	4619      	mov	r1, r3
 8008fac:	2000      	movs	r0, #0
 8008fae:	f7f8 fc87 	bl	80018c0 <BSP_LCD_DrawHLine>
  	  	  j=j+Space;
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]
    for(int i=0; i<9; i++){
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	dded      	ble.n	8008fa2 <LCD_Config+0x82>
    }

    /*Game menu*/
    BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 8008fc6:	4824      	ldr	r0, [pc, #144]	; (8009058 <LCD_Config+0x138>)
 8008fc8:	f7f8 fb16 	bl	80015f8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8008fcc:	4822      	ldr	r0, [pc, #136]	; (8009058 <LCD_Config+0x138>)
 8008fce:	f7f8 fafb 	bl	80015c8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(490, 0, 300, 60);
 8008fd2:	233c      	movs	r3, #60	; 0x3c
 8008fd4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008fd8:	2100      	movs	r1, #0
 8008fda:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8008fde:	f7f8 fe11 	bl	8001c04 <BSP_LCD_FillRect>
    BSP_LCD_DrawRect(490, 0, 300, 470);
 8008fe2:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8008fe6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008fea:	2100      	movs	r1, #0
 8008fec:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8008ff0:	f7f8 fce6 	bl	80019c0 <BSP_LCD_DrawRect>


    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	f7f8 fae6 	bl	80015c8 <BSP_LCD_SetTextColor>
      BSP_LCD_SetFont(&Font24);
 8008ffc:	4817      	ldr	r0, [pc, #92]	; (800905c <LCD_Config+0x13c>)
 8008ffe:	f7f8 fb15 	bl	800162c <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(580, 15, (uint8_t *)"REVERSI", LEFT_MODE);
 8009002:	2303      	movs	r3, #3
 8009004:	4a16      	ldr	r2, [pc, #88]	; (8009060 <LCD_Config+0x140>)
 8009006:	210f      	movs	r1, #15
 8009008:	f44f 7011 	mov.w	r0, #580	; 0x244
 800900c:	f7f8 fb94 	bl	8001738 <BSP_LCD_DisplayStringAt>


      /*Start button*/

      BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8009010:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8009014:	f7f8 faf0 	bl	80015f8 <BSP_LCD_SetBackColor>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009018:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800901c:	f7f8 fad4 	bl	80015c8 <BSP_LCD_SetTextColor>
      BSP_LCD_FillRect(500, 180, 280, 50);
 8009020:	2332      	movs	r3, #50	; 0x32
 8009022:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009026:	21b4      	movs	r1, #180	; 0xb4
 8009028:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800902c:	f7f8 fdea 	bl	8001c04 <BSP_LCD_FillRect>

      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	f7f8 fac8 	bl	80015c8 <BSP_LCD_SetTextColor>
       BSP_LCD_SetFont(&Font24);
 8009038:	4808      	ldr	r0, [pc, #32]	; (800905c <LCD_Config+0x13c>)
 800903a:	f7f8 faf7 	bl	800162c <BSP_LCD_SetFont>
       BSP_LCD_DisplayStringAt(595, 195, (uint8_t *)"START", LEFT_MODE);
 800903e:	2303      	movs	r3, #3
 8009040:	4a08      	ldr	r2, [pc, #32]	; (8009064 <LCD_Config+0x144>)
 8009042:	21c3      	movs	r1, #195	; 0xc3
 8009044:	f240 2053 	movw	r0, #595	; 0x253
 8009048:	f7f8 fb76 	bl	8001738 <BSP_LCD_DisplayStringAt>


}
 800904c:	bf00      	nop
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	ff000080 	.word	0xff000080
 8009058:	ff8080ff 	.word	0xff8080ff
 800905c:	2000003c 	.word	0x2000003c
 8009060:	0800a140 	.word	0x0800a140
 8009064:	0800a148 	.word	0x0800a148

08009068 <startGame>:

static void startGame(){
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
    int Xpos=0;
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]
    int Space=60;
 8009072:	233c      	movs	r3, #60	; 0x3c
 8009074:	607b      	str	r3, [r7, #4]
	int j=0;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800907a:	4833      	ldr	r0, [pc, #204]	; (8009148 <startGame+0xe0>)
 800907c:	f7f8 faa4 	bl	80015c8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, 480, 480);
 8009080:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009084:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009088:	2100      	movs	r1, #0
 800908a:	2000      	movs	r0, #0
 800908c:	f7f8 fdba 	bl	8001c04 <BSP_LCD_FillRect>

	/* Set the Board  */
	   //Draw vertical lines
	  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8009090:	482e      	ldr	r0, [pc, #184]	; (800914c <startGame+0xe4>)
 8009092:	f7f8 fa99 	bl	80015c8 <BSP_LCD_SetTextColor>

	  j=0;
 8009096:	2300      	movs	r3, #0
 8009098:	617b      	str	r3, [r7, #20]
	  for(int i=0; i<9; i++){
 800909a:	2300      	movs	r3, #0
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	e012      	b.n	80090c6 <startGame+0x5e>

		  	  BSP_LCD_DrawVLine(Xpos+j, 0, 480 );
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	4413      	add	r3, r2
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80090b0:	2100      	movs	r1, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f8 fc42 	bl	800193c <BSP_LCD_DrawVLine>
		  	  j=j+Space;
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4413      	add	r3, r2
 80090be:	617b      	str	r3, [r7, #20]
	  for(int i=0; i<9; i++){
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	3301      	adds	r3, #1
 80090c4:	613b      	str	r3, [r7, #16]
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	dde9      	ble.n	80090a0 <startGame+0x38>
	  }
	  //Draw horizontal lines
	    BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80090cc:	481f      	ldr	r0, [pc, #124]	; (800914c <startGame+0xe4>)
 80090ce:	f7f8 fa7b 	bl	80015c8 <BSP_LCD_SetTextColor>

	    j=0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	617b      	str	r3, [r7, #20]
	    for(int i=0; i<9; i++){
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	e00e      	b.n	80090fa <startGame+0x92>

	  	  	  BSP_LCD_DrawHLine(0, j, 480 );
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80090e4:	4619      	mov	r1, r3
 80090e6:	2000      	movs	r0, #0
 80090e8:	f7f8 fbea 	bl	80018c0 <BSP_LCD_DrawHLine>
	  	  	  j=j+Space;
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4413      	add	r3, r2
 80090f2:	617b      	str	r3, [r7, #20]
	    for(int i=0; i<9; i++){
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3301      	adds	r3, #1
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b08      	cmp	r3, #8
 80090fe:	dded      	ble.n	80090dc <startGame+0x74>
	    }

	/*Draw initial symbols*/

		 BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 8009100:	4813      	ldr	r0, [pc, #76]	; (8009150 <startGame+0xe8>)
 8009102:	f7f8 fa61 	bl	80015c8 <BSP_LCD_SetTextColor>
		 BSP_LCD_FillCircle(210,270,25);
 8009106:	2219      	movs	r2, #25
 8009108:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800910c:	20d2      	movs	r0, #210	; 0xd2
 800910e:	f7f8 fdd3 	bl	8001cb8 <BSP_LCD_FillCircle>
		 BSP_LCD_FillCircle(270,210,25);
 8009112:	2219      	movs	r2, #25
 8009114:	21d2      	movs	r1, #210	; 0xd2
 8009116:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800911a:	f7f8 fdcd 	bl	8001cb8 <BSP_LCD_FillCircle>

		  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
 800911e:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8009122:	f7f8 fa51 	bl	80015c8 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(210,210,25);
 8009126:	2219      	movs	r2, #25
 8009128:	21d2      	movs	r1, #210	; 0xd2
 800912a:	20d2      	movs	r0, #210	; 0xd2
 800912c:	f7f8 fdc4 	bl	8001cb8 <BSP_LCD_FillCircle>
		  BSP_LCD_FillCircle(270,270,25);
 8009130:	2219      	movs	r2, #25
 8009132:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8009136:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800913a:	f7f8 fdbd 	bl	8001cb8 <BSP_LCD_FillCircle>
}
 800913e:	bf00      	nop
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	ffd3d3d3 	.word	0xffd3d3d3
 800914c:	ff000080 	.word	0xff000080
 8009150:	ffff8080 	.word	0xffff8080

08009154 <gameOver>:

void gameOver(){
 8009154:	b580      	push	{r7, lr}
 8009156:	b090      	sub	sp, #64	; 0x40
 8009158:	af00      	add	r7, sp, #0

int cnt_x =0;
 800915a:	2300      	movs	r3, #0
 800915c:	63fb      	str	r3, [r7, #60]	; 0x3c
int cnt_o=0;
 800915e:	2300      	movs	r3, #0
 8009160:	63bb      	str	r3, [r7, #56]	; 0x38

char score_x[20];
char score_o[20];

//conta o numero de peças dos jogadores
 for (int i=0; i<8; i++){
 8009162:	2300      	movs	r3, #0
 8009164:	637b      	str	r3, [r7, #52]	; 0x34
 8009166:	e023      	b.n	80091b0 <gameOver+0x5c>
    for (int j=0; j<8; j++){
 8009168:	2300      	movs	r3, #0
 800916a:	633b      	str	r3, [r7, #48]	; 0x30
 800916c:	e01a      	b.n	80091a4 <gameOver+0x50>
         if (board[i][j]=='x'){
 800916e:	4a4c      	ldr	r2, [pc, #304]	; (80092a0 <gameOver+0x14c>)
 8009170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009172:	00db      	lsls	r3, r3, #3
 8009174:	441a      	add	r2, r3
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	4413      	add	r3, r2
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b78      	cmp	r3, #120	; 0x78
 800917e:	d102      	bne.n	8009186 <gameOver+0x32>
             cnt_x++;
 8009180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009182:	3301      	adds	r3, #1
 8009184:	63fb      	str	r3, [r7, #60]	; 0x3c
        	  }
         if (board[i][j]=='o'){
 8009186:	4a46      	ldr	r2, [pc, #280]	; (80092a0 <gameOver+0x14c>)
 8009188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	441a      	add	r2, r3
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	4413      	add	r3, r2
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b6f      	cmp	r3, #111	; 0x6f
 8009196:	d102      	bne.n	800919e <gameOver+0x4a>
        	  cnt_o++;
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	3301      	adds	r3, #1
 800919c:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int j=0; j<8; j++){
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	3301      	adds	r3, #1
 80091a2:	633b      	str	r3, [r7, #48]	; 0x30
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	2b07      	cmp	r3, #7
 80091a8:	dde1      	ble.n	800916e <gameOver+0x1a>
 for (int i=0; i<8; i++){
 80091aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ac:	3301      	adds	r3, #1
 80091ae:	637b      	str	r3, [r7, #52]	; 0x34
 80091b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b2:	2b07      	cmp	r3, #7
 80091b4:	ddd8      	ble.n	8009168 <gameOver+0x14>
   }
 }


//desenha os menus
     BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80091b6:	483b      	ldr	r0, [pc, #236]	; (80092a4 <gameOver+0x150>)
 80091b8:	f7f8 fa06 	bl	80015c8 <BSP_LCD_SetTextColor>
     BSP_LCD_FillRect(0, 0, 800, 60);
 80091bc:	233c      	movs	r3, #60	; 0x3c
 80091be:	f44f 7248 	mov.w	r2, #800	; 0x320
 80091c2:	2100      	movs	r1, #0
 80091c4:	2000      	movs	r0, #0
 80091c6:	f7f8 fd1d 	bl	8001c04 <BSP_LCD_FillRect>
     BSP_LCD_FillRect(0, 180, 800, 120);
 80091ca:	2378      	movs	r3, #120	; 0x78
 80091cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80091d0:	21b4      	movs	r1, #180	; 0xb4
 80091d2:	2000      	movs	r0, #0
 80091d4:	f7f8 fd16 	bl	8001c04 <BSP_LCD_FillRect>

     BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 80091d8:	4832      	ldr	r0, [pc, #200]	; (80092a4 <gameOver+0x150>)
 80091da:	f7f8 fa0d 	bl	80015f8 <BSP_LCD_SetBackColor>
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80091de:	f04f 30ff 	mov.w	r0, #4294967295
 80091e2:	f7f8 f9f1 	bl	80015c8 <BSP_LCD_SetTextColor>
     BSP_LCD_SetFont(&Font24);
 80091e6:	4830      	ldr	r0, [pc, #192]	; (80092a8 <gameOver+0x154>)
 80091e8:	f7f8 fa20 	bl	800162c <BSP_LCD_SetFont>
     BSP_LCD_DisplayStringAt(0, 15, (uint8_t *)"GAME OVER", CENTER_MODE);
 80091ec:	2301      	movs	r3, #1
 80091ee:	4a2f      	ldr	r2, [pc, #188]	; (80092ac <gameOver+0x158>)
 80091f0:	210f      	movs	r1, #15
 80091f2:	2000      	movs	r0, #0
 80091f4:	f7f8 faa0 	bl	8001738 <BSP_LCD_DisplayStringAt>

     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	f7f8 f9e4 	bl	80015c8 <BSP_LCD_SetTextColor>
      BSP_LCD_SetFont(&Font24);
 8009200:	4829      	ldr	r0, [pc, #164]	; (80092a8 <gameOver+0x154>)
 8009202:	f7f8 fa13 	bl	800162c <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(0, 185, (uint8_t *)"SCORE", CENTER_MODE);
 8009206:	2301      	movs	r3, #1
 8009208:	4a29      	ldr	r2, [pc, #164]	; (80092b0 <gameOver+0x15c>)
 800920a:	21b9      	movs	r1, #185	; 0xb9
 800920c:	2000      	movs	r0, #0
 800920e:	f7f8 fa93 	bl	8001738 <BSP_LCD_DisplayStringAt>

      sprintf(score_x, "Player 1: %d", cnt_x);
 8009212:	f107 0314 	add.w	r3, r7, #20
 8009216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009218:	4926      	ldr	r1, [pc, #152]	; (80092b4 <gameOver+0x160>)
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fb44 	bl	80098a8 <siprintf>
      BSP_LCD_DisplayStringAt(0, 215, (uint8_t *)score_x, CENTER_MODE);
 8009220:	f107 0214 	add.w	r2, r7, #20
 8009224:	2301      	movs	r3, #1
 8009226:	21d7      	movs	r1, #215	; 0xd7
 8009228:	2000      	movs	r0, #0
 800922a:	f7f8 fa85 	bl	8001738 <BSP_LCD_DisplayStringAt>
      sprintf(score_o, "Player 2: %d", cnt_o);
 800922e:	463b      	mov	r3, r7
 8009230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009232:	4921      	ldr	r1, [pc, #132]	; (80092b8 <gameOver+0x164>)
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fb37 	bl	80098a8 <siprintf>
      BSP_LCD_DisplayStringAt(0, 235, (uint8_t *)score_o, CENTER_MODE);
 800923a:	463a      	mov	r2, r7
 800923c:	2301      	movs	r3, #1
 800923e:	21eb      	movs	r1, #235	; 0xeb
 8009240:	2000      	movs	r0, #0
 8009242:	f7f8 fa79 	bl	8001738 <BSP_LCD_DisplayStringAt>


//volta a escrever a matriz
      for (int i=0;i<8;i++){
 8009246:	2300      	movs	r3, #0
 8009248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800924a:	e013      	b.n	8009274 <gameOver+0x120>
                  for (int j=0;j<8;j++){
 800924c:	2300      	movs	r3, #0
 800924e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009250:	e00a      	b.n	8009268 <gameOver+0x114>
                 board[i][j]='.';
 8009252:	4a13      	ldr	r2, [pc, #76]	; (80092a0 <gameOver+0x14c>)
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	441a      	add	r2, r3
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	4413      	add	r3, r2
 800925e:	222e      	movs	r2, #46	; 0x2e
 8009260:	701a      	strb	r2, [r3, #0]
                  for (int j=0;j<8;j++){
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	3301      	adds	r3, #1
 8009266:	62bb      	str	r3, [r7, #40]	; 0x28
 8009268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926a:	2b07      	cmp	r3, #7
 800926c:	ddf1      	ble.n	8009252 <gameOver+0xfe>
      for (int i=0;i<8;i++){
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	3301      	adds	r3, #1
 8009272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	2b07      	cmp	r3, #7
 8009278:	dde8      	ble.n	800924c <gameOver+0xf8>
                }
              }
              board[3][3]='x';
 800927a:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <gameOver+0x14c>)
 800927c:	2278      	movs	r2, #120	; 0x78
 800927e:	76da      	strb	r2, [r3, #27]
              board[3][4]='o';
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <gameOver+0x14c>)
 8009282:	226f      	movs	r2, #111	; 0x6f
 8009284:	771a      	strb	r2, [r3, #28]
              board[4][3]='o';
 8009286:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <gameOver+0x14c>)
 8009288:	226f      	movs	r2, #111	; 0x6f
 800928a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
              board[4][4]='x';
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <gameOver+0x14c>)
 8009290:	2278      	movs	r2, #120	; 0x78
 8009292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 8009296:	bf00      	nop
 8009298:	3740      	adds	r7, #64	; 0x40
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20000064 	.word	0x20000064
 80092a4:	ff000080 	.word	0xff000080
 80092a8:	2000003c 	.word	0x2000003c
 80092ac:	0800a150 	.word	0x0800a150
 80092b0:	0800a15c 	.word	0x0800a15c
 80092b4:	0800a164 	.word	0x0800a164
 80092b8:	0800a174 	.word	0x0800a174

080092bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80092c0:	bf00      	nop
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
	...

080092cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <HAL_MspInit+0x44>)
 80092d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d6:	4a0e      	ldr	r2, [pc, #56]	; (8009310 <HAL_MspInit+0x44>)
 80092d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092dc:	6413      	str	r3, [r2, #64]	; 0x40
 80092de:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <HAL_MspInit+0x44>)
 80092e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092e6:	607b      	str	r3, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <HAL_MspInit+0x44>)
 80092ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ee:	4a08      	ldr	r2, [pc, #32]	; (8009310 <HAL_MspInit+0x44>)
 80092f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092f4:	6453      	str	r3, [r2, #68]	; 0x44
 80092f6:	4b06      	ldr	r3, [pc, #24]	; (8009310 <HAL_MspInit+0x44>)
 80092f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	40023800 	.word	0x40023800

08009314 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a0d      	ldr	r2, [pc, #52]	; (8009358 <HAL_ADC_MspInit+0x44>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d113      	bne.n	800934e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009326:	4b0d      	ldr	r3, [pc, #52]	; (800935c <HAL_ADC_MspInit+0x48>)
 8009328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800932a:	4a0c      	ldr	r2, [pc, #48]	; (800935c <HAL_ADC_MspInit+0x48>)
 800932c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009330:	6453      	str	r3, [r2, #68]	; 0x44
 8009332:	4b0a      	ldr	r3, [pc, #40]	; (800935c <HAL_ADC_MspInit+0x48>)
 8009334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800933e:	2200      	movs	r2, #0
 8009340:	2100      	movs	r1, #0
 8009342:	2012      	movs	r0, #18
 8009344:	f7fa f925 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009348:	2012      	movs	r0, #18
 800934a:	f7fa f93e 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	40012000 	.word	0x40012000
 800935c:	40023800 	.word	0x40023800

08009360 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a0a      	ldr	r2, [pc, #40]	; (8009398 <HAL_DMA2D_MspInit+0x38>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d10b      	bne.n	800938a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009372:	4b0a      	ldr	r3, [pc, #40]	; (800939c <HAL_DMA2D_MspInit+0x3c>)
 8009374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009376:	4a09      	ldr	r2, [pc, #36]	; (800939c <HAL_DMA2D_MspInit+0x3c>)
 8009378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800937c:	6313      	str	r3, [r2, #48]	; 0x30
 800937e:	4b07      	ldr	r3, [pc, #28]	; (800939c <HAL_DMA2D_MspInit+0x3c>)
 8009380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800938a:	bf00      	nop
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	4002b000 	.word	0x4002b000
 800939c:	40023800 	.word	0x40023800

080093a0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08a      	sub	sp, #40	; 0x28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093a8:	f107 0314 	add.w	r3, r7, #20
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	605a      	str	r2, [r3, #4]
 80093b2:	609a      	str	r2, [r3, #8]
 80093b4:	60da      	str	r2, [r3, #12]
 80093b6:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a17      	ldr	r2, [pc, #92]	; (800941c <HAL_DSI_MspInit+0x7c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d127      	bne.n	8009412 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80093c2:	4b17      	ldr	r3, [pc, #92]	; (8009420 <HAL_DSI_MspInit+0x80>)
 80093c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c6:	4a16      	ldr	r2, [pc, #88]	; (8009420 <HAL_DSI_MspInit+0x80>)
 80093c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093cc:	6453      	str	r3, [r2, #68]	; 0x44
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <HAL_DSI_MspInit+0x80>)
 80093d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093d6:	613b      	str	r3, [r7, #16]
 80093d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80093da:	4b11      	ldr	r3, [pc, #68]	; (8009420 <HAL_DSI_MspInit+0x80>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	4a10      	ldr	r2, [pc, #64]	; (8009420 <HAL_DSI_MspInit+0x80>)
 80093e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093e4:	6313      	str	r3, [r2, #48]	; 0x30
 80093e6:	4b0e      	ldr	r3, [pc, #56]	; (8009420 <HAL_DSI_MspInit+0x80>)
 80093e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80093f2:	2304      	movs	r3, #4
 80093f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093f6:	2302      	movs	r3, #2
 80093f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093fe:	2300      	movs	r3, #0
 8009400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8009402:	230d      	movs	r3, #13
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009406:	f107 0314 	add.w	r3, r7, #20
 800940a:	4619      	mov	r1, r3
 800940c:	4805      	ldr	r0, [pc, #20]	; (8009424 <HAL_DSI_MspInit+0x84>)
 800940e:	f7fb fdcb 	bl	8004fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8009412:	bf00      	nop
 8009414:	3728      	adds	r7, #40	; 0x28
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	40016c00 	.word	0x40016c00
 8009420:	40023800 	.word	0x40023800
 8009424:	40022400 	.word	0x40022400

08009428 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a08      	ldr	r2, [pc, #32]	; (8009458 <HAL_DSI_MspDeInit+0x30>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d109      	bne.n	800944e <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800943a:	4b08      	ldr	r3, [pc, #32]	; (800945c <HAL_DSI_MspDeInit+0x34>)
 800943c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943e:	4a07      	ldr	r2, [pc, #28]	; (800945c <HAL_DSI_MspDeInit+0x34>)
 8009440:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009444:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 8009446:	2104      	movs	r1, #4
 8009448:	4805      	ldr	r0, [pc, #20]	; (8009460 <HAL_DSI_MspDeInit+0x38>)
 800944a:	f7fb ff57 	bl	80052fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800944e:	bf00      	nop
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40016c00 	.word	0x40016c00
 800945c:	40023800 	.word	0x40023800
 8009460:	40022400 	.word	0x40022400

08009464 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a0a      	ldr	r2, [pc, #40]	; (800949c <HAL_LTDC_MspInit+0x38>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d10b      	bne.n	800948e <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009476:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <HAL_LTDC_MspInit+0x3c>)
 8009478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800947a:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <HAL_LTDC_MspInit+0x3c>)
 800947c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009480:	6453      	str	r3, [r2, #68]	; 0x44
 8009482:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <HAL_LTDC_MspInit+0x3c>)
 8009484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009486:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800948e:	bf00      	nop
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40016800 	.word	0x40016800
 80094a0:	40023800 	.word	0x40023800

080094a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a1a      	ldr	r2, [pc, #104]	; (800951c <HAL_TIM_Base_MspInit+0x78>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d114      	bne.n	80094e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80094b6:	4b1a      	ldr	r3, [pc, #104]	; (8009520 <HAL_TIM_Base_MspInit+0x7c>)
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	4a19      	ldr	r2, [pc, #100]	; (8009520 <HAL_TIM_Base_MspInit+0x7c>)
 80094bc:	f043 0310 	orr.w	r3, r3, #16
 80094c0:	6413      	str	r3, [r2, #64]	; 0x40
 80094c2:	4b17      	ldr	r3, [pc, #92]	; (8009520 <HAL_TIM_Base_MspInit+0x7c>)
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80094ce:	2200      	movs	r2, #0
 80094d0:	2100      	movs	r1, #0
 80094d2:	2036      	movs	r0, #54	; 0x36
 80094d4:	f7fa f85d 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80094d8:	2036      	movs	r0, #54	; 0x36
 80094da:	f7fa f876 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80094de:	e018      	b.n	8009512 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a0f      	ldr	r2, [pc, #60]	; (8009524 <HAL_TIM_Base_MspInit+0x80>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d113      	bne.n	8009512 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80094ea:	4b0d      	ldr	r3, [pc, #52]	; (8009520 <HAL_TIM_Base_MspInit+0x7c>)
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	4a0c      	ldr	r2, [pc, #48]	; (8009520 <HAL_TIM_Base_MspInit+0x7c>)
 80094f0:	f043 0320 	orr.w	r3, r3, #32
 80094f4:	6413      	str	r3, [r2, #64]	; 0x40
 80094f6:	4b0a      	ldr	r3, [pc, #40]	; (8009520 <HAL_TIM_Base_MspInit+0x7c>)
 80094f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	60bb      	str	r3, [r7, #8]
 8009500:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	2037      	movs	r0, #55	; 0x37
 8009508:	f7fa f843 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800950c:	2037      	movs	r0, #55	; 0x37
 800950e:	f7fa f85c 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 8009512:	bf00      	nop
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	40001000 	.word	0x40001000
 8009520:	40023800 	.word	0x40023800
 8009524:	40001400 	.word	0x40001400

08009528 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	605a      	str	r2, [r3, #4]
 8009536:	609a      	str	r2, [r3, #8]
 8009538:	60da      	str	r2, [r3, #12]
 800953a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800953c:	4b43      	ldr	r3, [pc, #268]	; (800964c <HAL_FMC_MspInit+0x124>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d17e      	bne.n	8009642 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8009544:	4b41      	ldr	r3, [pc, #260]	; (800964c <HAL_FMC_MspInit+0x124>)
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800954a:	4b41      	ldr	r3, [pc, #260]	; (8009650 <HAL_FMC_MspInit+0x128>)
 800954c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954e:	4a40      	ldr	r2, [pc, #256]	; (8009650 <HAL_FMC_MspInit+0x128>)
 8009550:	f043 0301 	orr.w	r3, r3, #1
 8009554:	6393      	str	r3, [r2, #56]	; 0x38
 8009556:	4b3e      	ldr	r3, [pc, #248]	; (8009650 <HAL_FMC_MspInit+0x128>)
 8009558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	603b      	str	r3, [r7, #0]
 8009560:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8009562:	f64f 7383 	movw	r3, #65411	; 0xff83
 8009566:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009568:	2302      	movs	r3, #2
 800956a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009570:	2303      	movs	r3, #3
 8009572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009574:	230c      	movs	r3, #12
 8009576:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009578:	1d3b      	adds	r3, r7, #4
 800957a:	4619      	mov	r1, r3
 800957c:	4835      	ldr	r0, [pc, #212]	; (8009654 <HAL_FMC_MspInit+0x12c>)
 800957e:	f7fb fd13 	bl	8004fa8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009582:	2360      	movs	r3, #96	; 0x60
 8009584:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009586:	2302      	movs	r3, #2
 8009588:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800958e:	2303      	movs	r3, #3
 8009590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009592:	230c      	movs	r3, #12
 8009594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009596:	1d3b      	adds	r3, r7, #4
 8009598:	4619      	mov	r1, r3
 800959a:	482f      	ldr	r0, [pc, #188]	; (8009658 <HAL_FMC_MspInit+0x130>)
 800959c:	f7fb fd04 	bl	8004fa8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 80095a0:	f248 1337 	movw	r3, #33079	; 0x8137
 80095a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095a6:	2302      	movs	r3, #2
 80095a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095ae:	2303      	movs	r3, #3
 80095b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80095b2:	230c      	movs	r3, #12
 80095b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80095b6:	1d3b      	adds	r3, r7, #4
 80095b8:	4619      	mov	r1, r3
 80095ba:	4828      	ldr	r0, [pc, #160]	; (800965c <HAL_FMC_MspInit+0x134>)
 80095bc:	f7fb fcf4 	bl	8004fa8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 80095c0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80095c4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095c6:	2302      	movs	r3, #2
 80095c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095ce:	2303      	movs	r3, #3
 80095d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80095d2:	230c      	movs	r3, #12
 80095d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80095d6:	1d3b      	adds	r3, r7, #4
 80095d8:	4619      	mov	r1, r3
 80095da:	4821      	ldr	r0, [pc, #132]	; (8009660 <HAL_FMC_MspInit+0x138>)
 80095dc:	f7fb fce4 	bl	8004fa8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 80095e0:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80095e4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095e6:	2302      	movs	r3, #2
 80095e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095ee:	2303      	movs	r3, #3
 80095f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80095f2:	230c      	movs	r3, #12
 80095f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80095f6:	1d3b      	adds	r3, r7, #4
 80095f8:	4619      	mov	r1, r3
 80095fa:	481a      	ldr	r0, [pc, #104]	; (8009664 <HAL_FMC_MspInit+0x13c>)
 80095fc:	f7fb fcd4 	bl	8004fa8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009600:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009604:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009606:	2302      	movs	r3, #2
 8009608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800960a:	2300      	movs	r3, #0
 800960c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800960e:	2303      	movs	r3, #3
 8009610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009612:	230c      	movs	r3, #12
 8009614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009616:	1d3b      	adds	r3, r7, #4
 8009618:	4619      	mov	r1, r3
 800961a:	4813      	ldr	r0, [pc, #76]	; (8009668 <HAL_FMC_MspInit+0x140>)
 800961c:	f7fb fcc4 	bl	8004fa8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 8009620:	f64f 7320 	movw	r3, #65312	; 0xff20
 8009624:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009626:	2302      	movs	r3, #2
 8009628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800962e:	2303      	movs	r3, #3
 8009630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009632:	230c      	movs	r3, #12
 8009634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009636:	1d3b      	adds	r3, r7, #4
 8009638:	4619      	mov	r1, r3
 800963a:	480c      	ldr	r0, [pc, #48]	; (800966c <HAL_FMC_MspInit+0x144>)
 800963c:	f7fb fcb4 	bl	8004fa8 <HAL_GPIO_Init>
 8009640:	e000      	b.n	8009644 <HAL_FMC_MspInit+0x11c>
    return;
 8009642:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	2000034c 	.word	0x2000034c
 8009650:	40023800 	.word	0x40023800
 8009654:	40021000 	.word	0x40021000
 8009658:	40020400 	.word	0x40020400
 800965c:	40021800 	.word	0x40021800
 8009660:	40020c00 	.word	0x40020c00
 8009664:	40022000 	.word	0x40022000
 8009668:	40021400 	.word	0x40021400
 800966c:	40021c00 	.word	0x40021c00

08009670 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009678:	f7ff ff56 	bl	8009528 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009684:	b480      	push	{r7}
 8009686:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009688:	bf00      	nop
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009692:	b480      	push	{r7}
 8009694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009696:	e7fe      	b.n	8009696 <HardFault_Handler+0x4>

08009698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800969c:	e7fe      	b.n	800969c <MemManage_Handler+0x4>

0800969e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800969e:	b480      	push	{r7}
 80096a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80096a2:	e7fe      	b.n	80096a2 <BusFault_Handler+0x4>

080096a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80096a8:	e7fe      	b.n	80096a8 <UsageFault_Handler+0x4>

080096aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80096aa:	b480      	push	{r7}
 80096ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80096ae:	bf00      	nop
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80096bc:	bf00      	nop
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80096c6:	b480      	push	{r7}
 80096c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80096ca:	bf00      	nop
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80096d8:	f7f9 f912 	bl	8002900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80096dc:	bf00      	nop
 80096de:	bd80      	pop	{r7, pc}

080096e0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80096e4:	4802      	ldr	r0, [pc, #8]	; (80096f0 <ADC_IRQHandler+0x10>)
 80096e6:	f7f9 fad5 	bl	8002c94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80096ea:	bf00      	nop
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	2000057c 	.word	0x2000057c

080096f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80096f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80096fc:	f7fb ff3a 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009700:	bf00      	nop
 8009702:	bd80      	pop	{r7, pc}

08009704 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009708:	4802      	ldr	r0, [pc, #8]	; (8009714 <TIM6_DAC_IRQHandler+0x10>)
 800970a:	f7fe f8c5 	bl	8007898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800970e:	bf00      	nop
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	200005cc 	.word	0x200005cc

08009718 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800971c:	4802      	ldr	r0, [pc, #8]	; (8009728 <TIM7_IRQHandler+0x10>)
 800971e:	f7fe f8bb 	bl	8007898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009722:	bf00      	nop
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20000708 	.word	0x20000708

0800972c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009734:	4b11      	ldr	r3, [pc, #68]	; (800977c <_sbrk+0x50>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <_sbrk+0x16>
		heap_end = &end;
 800973c:	4b0f      	ldr	r3, [pc, #60]	; (800977c <_sbrk+0x50>)
 800973e:	4a10      	ldr	r2, [pc, #64]	; (8009780 <_sbrk+0x54>)
 8009740:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009742:	4b0e      	ldr	r3, [pc, #56]	; (800977c <_sbrk+0x50>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009748:	4b0c      	ldr	r3, [pc, #48]	; (800977c <_sbrk+0x50>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4413      	add	r3, r2
 8009750:	466a      	mov	r2, sp
 8009752:	4293      	cmp	r3, r2
 8009754:	d907      	bls.n	8009766 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009756:	f000 f875 	bl	8009844 <__errno>
 800975a:	4602      	mov	r2, r0
 800975c:	230c      	movs	r3, #12
 800975e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009760:	f04f 33ff 	mov.w	r3, #4294967295
 8009764:	e006      	b.n	8009774 <_sbrk+0x48>
	}

	heap_end += incr;
 8009766:	4b05      	ldr	r3, [pc, #20]	; (800977c <_sbrk+0x50>)
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4413      	add	r3, r2
 800976e:	4a03      	ldr	r2, [pc, #12]	; (800977c <_sbrk+0x50>)
 8009770:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009772:	68fb      	ldr	r3, [r7, #12]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	20000350 	.word	0x20000350
 8009780:	20000778 	.word	0x20000778

08009784 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009784:	b480      	push	{r7}
 8009786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009788:	4b15      	ldr	r3, [pc, #84]	; (80097e0 <SystemInit+0x5c>)
 800978a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978e:	4a14      	ldr	r2, [pc, #80]	; (80097e0 <SystemInit+0x5c>)
 8009790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009798:	4b12      	ldr	r3, [pc, #72]	; (80097e4 <SystemInit+0x60>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a11      	ldr	r2, [pc, #68]	; (80097e4 <SystemInit+0x60>)
 800979e:	f043 0301 	orr.w	r3, r3, #1
 80097a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80097a4:	4b0f      	ldr	r3, [pc, #60]	; (80097e4 <SystemInit+0x60>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80097aa:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <SystemInit+0x60>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	490d      	ldr	r1, [pc, #52]	; (80097e4 <SystemInit+0x60>)
 80097b0:	4b0d      	ldr	r3, [pc, #52]	; (80097e8 <SystemInit+0x64>)
 80097b2:	4013      	ands	r3, r2
 80097b4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80097b6:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <SystemInit+0x60>)
 80097b8:	4a0c      	ldr	r2, [pc, #48]	; (80097ec <SystemInit+0x68>)
 80097ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <SystemInit+0x60>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a08      	ldr	r2, [pc, #32]	; (80097e4 <SystemInit+0x60>)
 80097c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80097c8:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <SystemInit+0x60>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80097ce:	4b04      	ldr	r3, [pc, #16]	; (80097e0 <SystemInit+0x5c>)
 80097d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80097d4:	609a      	str	r2, [r3, #8]
#endif
}
 80097d6:	bf00      	nop
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	e000ed00 	.word	0xe000ed00
 80097e4:	40023800 	.word	0x40023800
 80097e8:	fef6ffff 	.word	0xfef6ffff
 80097ec:	24003010 	.word	0x24003010

080097f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80097f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009828 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80097f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80097f6:	e003      	b.n	8009800 <LoopCopyDataInit>

080097f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80097f8:	4b0c      	ldr	r3, [pc, #48]	; (800982c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80097fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80097fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80097fe:	3104      	adds	r1, #4

08009800 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009800:	480b      	ldr	r0, [pc, #44]	; (8009830 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009802:	4b0c      	ldr	r3, [pc, #48]	; (8009834 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009804:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009806:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009808:	d3f6      	bcc.n	80097f8 <CopyDataInit>
  ldr  r2, =_sbss
 800980a:	4a0b      	ldr	r2, [pc, #44]	; (8009838 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800980c:	e002      	b.n	8009814 <LoopFillZerobss>

0800980e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800980e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009810:	f842 3b04 	str.w	r3, [r2], #4

08009814 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009814:	4b09      	ldr	r3, [pc, #36]	; (800983c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009816:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009818:	d3f9      	bcc.n	800980e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800981a:	f7ff ffb3 	bl	8009784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800981e:	f000 f817 	bl	8009850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009822:	f7fe fc75 	bl	8008110 <main>
  bx  lr    
 8009826:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009828:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800982c:	0800ca8c 	.word	0x0800ca8c
  ldr  r0, =_sdata
 8009830:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009834:	2000010c 	.word	0x2000010c
  ldr  r2, =_sbss
 8009838:	2000010c 	.word	0x2000010c
  ldr  r3, = _ebss
 800983c:	20000774 	.word	0x20000774

08009840 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009840:	e7fe      	b.n	8009840 <CAN1_RX0_IRQHandler>
	...

08009844 <__errno>:
 8009844:	4b01      	ldr	r3, [pc, #4]	; (800984c <__errno+0x8>)
 8009846:	6818      	ldr	r0, [r3, #0]
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	200000a8 	.word	0x200000a8

08009850 <__libc_init_array>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	4e0d      	ldr	r6, [pc, #52]	; (8009888 <__libc_init_array+0x38>)
 8009854:	4c0d      	ldr	r4, [pc, #52]	; (800988c <__libc_init_array+0x3c>)
 8009856:	1ba4      	subs	r4, r4, r6
 8009858:	10a4      	asrs	r4, r4, #2
 800985a:	2500      	movs	r5, #0
 800985c:	42a5      	cmp	r5, r4
 800985e:	d109      	bne.n	8009874 <__libc_init_array+0x24>
 8009860:	4e0b      	ldr	r6, [pc, #44]	; (8009890 <__libc_init_array+0x40>)
 8009862:	4c0c      	ldr	r4, [pc, #48]	; (8009894 <__libc_init_array+0x44>)
 8009864:	f000 fc26 	bl	800a0b4 <_init>
 8009868:	1ba4      	subs	r4, r4, r6
 800986a:	10a4      	asrs	r4, r4, #2
 800986c:	2500      	movs	r5, #0
 800986e:	42a5      	cmp	r5, r4
 8009870:	d105      	bne.n	800987e <__libc_init_array+0x2e>
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009878:	4798      	blx	r3
 800987a:	3501      	adds	r5, #1
 800987c:	e7ee      	b.n	800985c <__libc_init_array+0xc>
 800987e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009882:	4798      	blx	r3
 8009884:	3501      	adds	r5, #1
 8009886:	e7f2      	b.n	800986e <__libc_init_array+0x1e>
 8009888:	0800ca84 	.word	0x0800ca84
 800988c:	0800ca84 	.word	0x0800ca84
 8009890:	0800ca84 	.word	0x0800ca84
 8009894:	0800ca88 	.word	0x0800ca88

08009898 <memset>:
 8009898:	4402      	add	r2, r0
 800989a:	4603      	mov	r3, r0
 800989c:	4293      	cmp	r3, r2
 800989e:	d100      	bne.n	80098a2 <memset+0xa>
 80098a0:	4770      	bx	lr
 80098a2:	f803 1b01 	strb.w	r1, [r3], #1
 80098a6:	e7f9      	b.n	800989c <memset+0x4>

080098a8 <siprintf>:
 80098a8:	b40e      	push	{r1, r2, r3}
 80098aa:	b500      	push	{lr}
 80098ac:	b09c      	sub	sp, #112	; 0x70
 80098ae:	ab1d      	add	r3, sp, #116	; 0x74
 80098b0:	9002      	str	r0, [sp, #8]
 80098b2:	9006      	str	r0, [sp, #24]
 80098b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098b8:	4809      	ldr	r0, [pc, #36]	; (80098e0 <siprintf+0x38>)
 80098ba:	9107      	str	r1, [sp, #28]
 80098bc:	9104      	str	r1, [sp, #16]
 80098be:	4909      	ldr	r1, [pc, #36]	; (80098e4 <siprintf+0x3c>)
 80098c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c4:	9105      	str	r1, [sp, #20]
 80098c6:	6800      	ldr	r0, [r0, #0]
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	a902      	add	r1, sp, #8
 80098cc:	f000 f866 	bl	800999c <_svfiprintf_r>
 80098d0:	9b02      	ldr	r3, [sp, #8]
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	b01c      	add	sp, #112	; 0x70
 80098d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098dc:	b003      	add	sp, #12
 80098de:	4770      	bx	lr
 80098e0:	200000a8 	.word	0x200000a8
 80098e4:	ffff0208 	.word	0xffff0208

080098e8 <__ssputs_r>:
 80098e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ec:	688e      	ldr	r6, [r1, #8]
 80098ee:	429e      	cmp	r6, r3
 80098f0:	4682      	mov	sl, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	4690      	mov	r8, r2
 80098f6:	4699      	mov	r9, r3
 80098f8:	d837      	bhi.n	800996a <__ssputs_r+0x82>
 80098fa:	898a      	ldrh	r2, [r1, #12]
 80098fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009900:	d031      	beq.n	8009966 <__ssputs_r+0x7e>
 8009902:	6825      	ldr	r5, [r4, #0]
 8009904:	6909      	ldr	r1, [r1, #16]
 8009906:	1a6f      	subs	r7, r5, r1
 8009908:	6965      	ldr	r5, [r4, #20]
 800990a:	2302      	movs	r3, #2
 800990c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009910:	fb95 f5f3 	sdiv	r5, r5, r3
 8009914:	f109 0301 	add.w	r3, r9, #1
 8009918:	443b      	add	r3, r7
 800991a:	429d      	cmp	r5, r3
 800991c:	bf38      	it	cc
 800991e:	461d      	movcc	r5, r3
 8009920:	0553      	lsls	r3, r2, #21
 8009922:	d530      	bpl.n	8009986 <__ssputs_r+0x9e>
 8009924:	4629      	mov	r1, r5
 8009926:	f000 fb2b 	bl	8009f80 <_malloc_r>
 800992a:	4606      	mov	r6, r0
 800992c:	b950      	cbnz	r0, 8009944 <__ssputs_r+0x5c>
 800992e:	230c      	movs	r3, #12
 8009930:	f8ca 3000 	str.w	r3, [sl]
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993a:	81a3      	strh	r3, [r4, #12]
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009944:	463a      	mov	r2, r7
 8009946:	6921      	ldr	r1, [r4, #16]
 8009948:	f000 faa8 	bl	8009e9c <memcpy>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	6126      	str	r6, [r4, #16]
 800995a:	6165      	str	r5, [r4, #20]
 800995c:	443e      	add	r6, r7
 800995e:	1bed      	subs	r5, r5, r7
 8009960:	6026      	str	r6, [r4, #0]
 8009962:	60a5      	str	r5, [r4, #8]
 8009964:	464e      	mov	r6, r9
 8009966:	454e      	cmp	r6, r9
 8009968:	d900      	bls.n	800996c <__ssputs_r+0x84>
 800996a:	464e      	mov	r6, r9
 800996c:	4632      	mov	r2, r6
 800996e:	4641      	mov	r1, r8
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	f000 fa9e 	bl	8009eb2 <memmove>
 8009976:	68a3      	ldr	r3, [r4, #8]
 8009978:	1b9b      	subs	r3, r3, r6
 800997a:	60a3      	str	r3, [r4, #8]
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	441e      	add	r6, r3
 8009980:	6026      	str	r6, [r4, #0]
 8009982:	2000      	movs	r0, #0
 8009984:	e7dc      	b.n	8009940 <__ssputs_r+0x58>
 8009986:	462a      	mov	r2, r5
 8009988:	f000 fb54 	bl	800a034 <_realloc_r>
 800998c:	4606      	mov	r6, r0
 800998e:	2800      	cmp	r0, #0
 8009990:	d1e2      	bne.n	8009958 <__ssputs_r+0x70>
 8009992:	6921      	ldr	r1, [r4, #16]
 8009994:	4650      	mov	r0, sl
 8009996:	f000 faa5 	bl	8009ee4 <_free_r>
 800999a:	e7c8      	b.n	800992e <__ssputs_r+0x46>

0800999c <_svfiprintf_r>:
 800999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a0:	461d      	mov	r5, r3
 80099a2:	898b      	ldrh	r3, [r1, #12]
 80099a4:	061f      	lsls	r7, r3, #24
 80099a6:	b09d      	sub	sp, #116	; 0x74
 80099a8:	4680      	mov	r8, r0
 80099aa:	460c      	mov	r4, r1
 80099ac:	4616      	mov	r6, r2
 80099ae:	d50f      	bpl.n	80099d0 <_svfiprintf_r+0x34>
 80099b0:	690b      	ldr	r3, [r1, #16]
 80099b2:	b96b      	cbnz	r3, 80099d0 <_svfiprintf_r+0x34>
 80099b4:	2140      	movs	r1, #64	; 0x40
 80099b6:	f000 fae3 	bl	8009f80 <_malloc_r>
 80099ba:	6020      	str	r0, [r4, #0]
 80099bc:	6120      	str	r0, [r4, #16]
 80099be:	b928      	cbnz	r0, 80099cc <_svfiprintf_r+0x30>
 80099c0:	230c      	movs	r3, #12
 80099c2:	f8c8 3000 	str.w	r3, [r8]
 80099c6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ca:	e0c8      	b.n	8009b5e <_svfiprintf_r+0x1c2>
 80099cc:	2340      	movs	r3, #64	; 0x40
 80099ce:	6163      	str	r3, [r4, #20]
 80099d0:	2300      	movs	r3, #0
 80099d2:	9309      	str	r3, [sp, #36]	; 0x24
 80099d4:	2320      	movs	r3, #32
 80099d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099da:	2330      	movs	r3, #48	; 0x30
 80099dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099e0:	9503      	str	r5, [sp, #12]
 80099e2:	f04f 0b01 	mov.w	fp, #1
 80099e6:	4637      	mov	r7, r6
 80099e8:	463d      	mov	r5, r7
 80099ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80099ee:	b10b      	cbz	r3, 80099f4 <_svfiprintf_r+0x58>
 80099f0:	2b25      	cmp	r3, #37	; 0x25
 80099f2:	d13e      	bne.n	8009a72 <_svfiprintf_r+0xd6>
 80099f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80099f8:	d00b      	beq.n	8009a12 <_svfiprintf_r+0x76>
 80099fa:	4653      	mov	r3, sl
 80099fc:	4632      	mov	r2, r6
 80099fe:	4621      	mov	r1, r4
 8009a00:	4640      	mov	r0, r8
 8009a02:	f7ff ff71 	bl	80098e8 <__ssputs_r>
 8009a06:	3001      	adds	r0, #1
 8009a08:	f000 80a4 	beq.w	8009b54 <_svfiprintf_r+0x1b8>
 8009a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a0e:	4453      	add	r3, sl
 8009a10:	9309      	str	r3, [sp, #36]	; 0x24
 8009a12:	783b      	ldrb	r3, [r7, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 809d 	beq.w	8009b54 <_svfiprintf_r+0x1b8>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a24:	9304      	str	r3, [sp, #16]
 8009a26:	9307      	str	r3, [sp, #28]
 8009a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a2e:	462f      	mov	r7, r5
 8009a30:	2205      	movs	r2, #5
 8009a32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009a36:	4850      	ldr	r0, [pc, #320]	; (8009b78 <_svfiprintf_r+0x1dc>)
 8009a38:	f7f6 fc02 	bl	8000240 <memchr>
 8009a3c:	9b04      	ldr	r3, [sp, #16]
 8009a3e:	b9d0      	cbnz	r0, 8009a76 <_svfiprintf_r+0xda>
 8009a40:	06d9      	lsls	r1, r3, #27
 8009a42:	bf44      	itt	mi
 8009a44:	2220      	movmi	r2, #32
 8009a46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a4a:	071a      	lsls	r2, r3, #28
 8009a4c:	bf44      	itt	mi
 8009a4e:	222b      	movmi	r2, #43	; 0x2b
 8009a50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a54:	782a      	ldrb	r2, [r5, #0]
 8009a56:	2a2a      	cmp	r2, #42	; 0x2a
 8009a58:	d015      	beq.n	8009a86 <_svfiprintf_r+0xea>
 8009a5a:	9a07      	ldr	r2, [sp, #28]
 8009a5c:	462f      	mov	r7, r5
 8009a5e:	2000      	movs	r0, #0
 8009a60:	250a      	movs	r5, #10
 8009a62:	4639      	mov	r1, r7
 8009a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a68:	3b30      	subs	r3, #48	; 0x30
 8009a6a:	2b09      	cmp	r3, #9
 8009a6c:	d94d      	bls.n	8009b0a <_svfiprintf_r+0x16e>
 8009a6e:	b1b8      	cbz	r0, 8009aa0 <_svfiprintf_r+0x104>
 8009a70:	e00f      	b.n	8009a92 <_svfiprintf_r+0xf6>
 8009a72:	462f      	mov	r7, r5
 8009a74:	e7b8      	b.n	80099e8 <_svfiprintf_r+0x4c>
 8009a76:	4a40      	ldr	r2, [pc, #256]	; (8009b78 <_svfiprintf_r+0x1dc>)
 8009a78:	1a80      	subs	r0, r0, r2
 8009a7a:	fa0b f000 	lsl.w	r0, fp, r0
 8009a7e:	4318      	orrs	r0, r3
 8009a80:	9004      	str	r0, [sp, #16]
 8009a82:	463d      	mov	r5, r7
 8009a84:	e7d3      	b.n	8009a2e <_svfiprintf_r+0x92>
 8009a86:	9a03      	ldr	r2, [sp, #12]
 8009a88:	1d11      	adds	r1, r2, #4
 8009a8a:	6812      	ldr	r2, [r2, #0]
 8009a8c:	9103      	str	r1, [sp, #12]
 8009a8e:	2a00      	cmp	r2, #0
 8009a90:	db01      	blt.n	8009a96 <_svfiprintf_r+0xfa>
 8009a92:	9207      	str	r2, [sp, #28]
 8009a94:	e004      	b.n	8009aa0 <_svfiprintf_r+0x104>
 8009a96:	4252      	negs	r2, r2
 8009a98:	f043 0302 	orr.w	r3, r3, #2
 8009a9c:	9207      	str	r2, [sp, #28]
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	783b      	ldrb	r3, [r7, #0]
 8009aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8009aa4:	d10c      	bne.n	8009ac0 <_svfiprintf_r+0x124>
 8009aa6:	787b      	ldrb	r3, [r7, #1]
 8009aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aaa:	d133      	bne.n	8009b14 <_svfiprintf_r+0x178>
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	1d1a      	adds	r2, r3, #4
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	9203      	str	r2, [sp, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	bfb8      	it	lt
 8009ab8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009abc:	3702      	adds	r7, #2
 8009abe:	9305      	str	r3, [sp, #20]
 8009ac0:	4d2e      	ldr	r5, [pc, #184]	; (8009b7c <_svfiprintf_r+0x1e0>)
 8009ac2:	7839      	ldrb	r1, [r7, #0]
 8009ac4:	2203      	movs	r2, #3
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f7f6 fbba 	bl	8000240 <memchr>
 8009acc:	b138      	cbz	r0, 8009ade <_svfiprintf_r+0x142>
 8009ace:	2340      	movs	r3, #64	; 0x40
 8009ad0:	1b40      	subs	r0, r0, r5
 8009ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ad6:	9b04      	ldr	r3, [sp, #16]
 8009ad8:	4303      	orrs	r3, r0
 8009ada:	3701      	adds	r7, #1
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	7839      	ldrb	r1, [r7, #0]
 8009ae0:	4827      	ldr	r0, [pc, #156]	; (8009b80 <_svfiprintf_r+0x1e4>)
 8009ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ae6:	2206      	movs	r2, #6
 8009ae8:	1c7e      	adds	r6, r7, #1
 8009aea:	f7f6 fba9 	bl	8000240 <memchr>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d038      	beq.n	8009b64 <_svfiprintf_r+0x1c8>
 8009af2:	4b24      	ldr	r3, [pc, #144]	; (8009b84 <_svfiprintf_r+0x1e8>)
 8009af4:	bb13      	cbnz	r3, 8009b3c <_svfiprintf_r+0x1a0>
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	3307      	adds	r3, #7
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	3308      	adds	r3, #8
 8009b00:	9303      	str	r3, [sp, #12]
 8009b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b04:	444b      	add	r3, r9
 8009b06:	9309      	str	r3, [sp, #36]	; 0x24
 8009b08:	e76d      	b.n	80099e6 <_svfiprintf_r+0x4a>
 8009b0a:	fb05 3202 	mla	r2, r5, r2, r3
 8009b0e:	2001      	movs	r0, #1
 8009b10:	460f      	mov	r7, r1
 8009b12:	e7a6      	b.n	8009a62 <_svfiprintf_r+0xc6>
 8009b14:	2300      	movs	r3, #0
 8009b16:	3701      	adds	r7, #1
 8009b18:	9305      	str	r3, [sp, #20]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	250a      	movs	r5, #10
 8009b1e:	4638      	mov	r0, r7
 8009b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b24:	3a30      	subs	r2, #48	; 0x30
 8009b26:	2a09      	cmp	r2, #9
 8009b28:	d903      	bls.n	8009b32 <_svfiprintf_r+0x196>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0c8      	beq.n	8009ac0 <_svfiprintf_r+0x124>
 8009b2e:	9105      	str	r1, [sp, #20]
 8009b30:	e7c6      	b.n	8009ac0 <_svfiprintf_r+0x124>
 8009b32:	fb05 2101 	mla	r1, r5, r1, r2
 8009b36:	2301      	movs	r3, #1
 8009b38:	4607      	mov	r7, r0
 8009b3a:	e7f0      	b.n	8009b1e <_svfiprintf_r+0x182>
 8009b3c:	ab03      	add	r3, sp, #12
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	4622      	mov	r2, r4
 8009b42:	4b11      	ldr	r3, [pc, #68]	; (8009b88 <_svfiprintf_r+0x1ec>)
 8009b44:	a904      	add	r1, sp, #16
 8009b46:	4640      	mov	r0, r8
 8009b48:	f3af 8000 	nop.w
 8009b4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009b50:	4681      	mov	r9, r0
 8009b52:	d1d6      	bne.n	8009b02 <_svfiprintf_r+0x166>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	065b      	lsls	r3, r3, #25
 8009b58:	f53f af35 	bmi.w	80099c6 <_svfiprintf_r+0x2a>
 8009b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b5e:	b01d      	add	sp, #116	; 0x74
 8009b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b64:	ab03      	add	r3, sp, #12
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	4622      	mov	r2, r4
 8009b6a:	4b07      	ldr	r3, [pc, #28]	; (8009b88 <_svfiprintf_r+0x1ec>)
 8009b6c:	a904      	add	r1, sp, #16
 8009b6e:	4640      	mov	r0, r8
 8009b70:	f000 f882 	bl	8009c78 <_printf_i>
 8009b74:	e7ea      	b.n	8009b4c <_svfiprintf_r+0x1b0>
 8009b76:	bf00      	nop
 8009b78:	0800ca48 	.word	0x0800ca48
 8009b7c:	0800ca4e 	.word	0x0800ca4e
 8009b80:	0800ca52 	.word	0x0800ca52
 8009b84:	00000000 	.word	0x00000000
 8009b88:	080098e9 	.word	0x080098e9

08009b8c <_printf_common>:
 8009b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b90:	4691      	mov	r9, r2
 8009b92:	461f      	mov	r7, r3
 8009b94:	688a      	ldr	r2, [r1, #8]
 8009b96:	690b      	ldr	r3, [r1, #16]
 8009b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	bfb8      	it	lt
 8009ba0:	4613      	movlt	r3, r2
 8009ba2:	f8c9 3000 	str.w	r3, [r9]
 8009ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009baa:	4606      	mov	r6, r0
 8009bac:	460c      	mov	r4, r1
 8009bae:	b112      	cbz	r2, 8009bb6 <_printf_common+0x2a>
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	f8c9 3000 	str.w	r3, [r9]
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	0699      	lsls	r1, r3, #26
 8009bba:	bf42      	ittt	mi
 8009bbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009bc0:	3302      	addmi	r3, #2
 8009bc2:	f8c9 3000 	strmi.w	r3, [r9]
 8009bc6:	6825      	ldr	r5, [r4, #0]
 8009bc8:	f015 0506 	ands.w	r5, r5, #6
 8009bcc:	d107      	bne.n	8009bde <_printf_common+0x52>
 8009bce:	f104 0a19 	add.w	sl, r4, #25
 8009bd2:	68e3      	ldr	r3, [r4, #12]
 8009bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8009bd8:	1a9b      	subs	r3, r3, r2
 8009bda:	42ab      	cmp	r3, r5
 8009bdc:	dc28      	bgt.n	8009c30 <_printf_common+0xa4>
 8009bde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009be2:	6822      	ldr	r2, [r4, #0]
 8009be4:	3300      	adds	r3, #0
 8009be6:	bf18      	it	ne
 8009be8:	2301      	movne	r3, #1
 8009bea:	0692      	lsls	r2, r2, #26
 8009bec:	d42d      	bmi.n	8009c4a <_printf_common+0xbe>
 8009bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bf2:	4639      	mov	r1, r7
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	47c0      	blx	r8
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d020      	beq.n	8009c3e <_printf_common+0xb2>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	68e5      	ldr	r5, [r4, #12]
 8009c00:	f8d9 2000 	ldr.w	r2, [r9]
 8009c04:	f003 0306 	and.w	r3, r3, #6
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	bf08      	it	eq
 8009c0c:	1aad      	subeq	r5, r5, r2
 8009c0e:	68a3      	ldr	r3, [r4, #8]
 8009c10:	6922      	ldr	r2, [r4, #16]
 8009c12:	bf0c      	ite	eq
 8009c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c18:	2500      	movne	r5, #0
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	bfc4      	itt	gt
 8009c1e:	1a9b      	subgt	r3, r3, r2
 8009c20:	18ed      	addgt	r5, r5, r3
 8009c22:	f04f 0900 	mov.w	r9, #0
 8009c26:	341a      	adds	r4, #26
 8009c28:	454d      	cmp	r5, r9
 8009c2a:	d11a      	bne.n	8009c62 <_printf_common+0xd6>
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	e008      	b.n	8009c42 <_printf_common+0xb6>
 8009c30:	2301      	movs	r3, #1
 8009c32:	4652      	mov	r2, sl
 8009c34:	4639      	mov	r1, r7
 8009c36:	4630      	mov	r0, r6
 8009c38:	47c0      	blx	r8
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d103      	bne.n	8009c46 <_printf_common+0xba>
 8009c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c46:	3501      	adds	r5, #1
 8009c48:	e7c3      	b.n	8009bd2 <_printf_common+0x46>
 8009c4a:	18e1      	adds	r1, r4, r3
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	2030      	movs	r0, #48	; 0x30
 8009c50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c54:	4422      	add	r2, r4
 8009c56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c5e:	3302      	adds	r3, #2
 8009c60:	e7c5      	b.n	8009bee <_printf_common+0x62>
 8009c62:	2301      	movs	r3, #1
 8009c64:	4622      	mov	r2, r4
 8009c66:	4639      	mov	r1, r7
 8009c68:	4630      	mov	r0, r6
 8009c6a:	47c0      	blx	r8
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d0e6      	beq.n	8009c3e <_printf_common+0xb2>
 8009c70:	f109 0901 	add.w	r9, r9, #1
 8009c74:	e7d8      	b.n	8009c28 <_printf_common+0x9c>
	...

08009c78 <_printf_i>:
 8009c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009c80:	460c      	mov	r4, r1
 8009c82:	7e09      	ldrb	r1, [r1, #24]
 8009c84:	b085      	sub	sp, #20
 8009c86:	296e      	cmp	r1, #110	; 0x6e
 8009c88:	4617      	mov	r7, r2
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	4698      	mov	r8, r3
 8009c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c90:	f000 80b3 	beq.w	8009dfa <_printf_i+0x182>
 8009c94:	d822      	bhi.n	8009cdc <_printf_i+0x64>
 8009c96:	2963      	cmp	r1, #99	; 0x63
 8009c98:	d036      	beq.n	8009d08 <_printf_i+0x90>
 8009c9a:	d80a      	bhi.n	8009cb2 <_printf_i+0x3a>
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	f000 80b9 	beq.w	8009e14 <_printf_i+0x19c>
 8009ca2:	2958      	cmp	r1, #88	; 0x58
 8009ca4:	f000 8083 	beq.w	8009dae <_printf_i+0x136>
 8009ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009cb0:	e032      	b.n	8009d18 <_printf_i+0xa0>
 8009cb2:	2964      	cmp	r1, #100	; 0x64
 8009cb4:	d001      	beq.n	8009cba <_printf_i+0x42>
 8009cb6:	2969      	cmp	r1, #105	; 0x69
 8009cb8:	d1f6      	bne.n	8009ca8 <_printf_i+0x30>
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	6813      	ldr	r3, [r2, #0]
 8009cbe:	0605      	lsls	r5, r0, #24
 8009cc0:	f103 0104 	add.w	r1, r3, #4
 8009cc4:	d52a      	bpl.n	8009d1c <_printf_i+0xa4>
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6011      	str	r1, [r2, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da03      	bge.n	8009cd6 <_printf_i+0x5e>
 8009cce:	222d      	movs	r2, #45	; 0x2d
 8009cd0:	425b      	negs	r3, r3
 8009cd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009cd6:	486f      	ldr	r0, [pc, #444]	; (8009e94 <_printf_i+0x21c>)
 8009cd8:	220a      	movs	r2, #10
 8009cda:	e039      	b.n	8009d50 <_printf_i+0xd8>
 8009cdc:	2973      	cmp	r1, #115	; 0x73
 8009cde:	f000 809d 	beq.w	8009e1c <_printf_i+0x1a4>
 8009ce2:	d808      	bhi.n	8009cf6 <_printf_i+0x7e>
 8009ce4:	296f      	cmp	r1, #111	; 0x6f
 8009ce6:	d020      	beq.n	8009d2a <_printf_i+0xb2>
 8009ce8:	2970      	cmp	r1, #112	; 0x70
 8009cea:	d1dd      	bne.n	8009ca8 <_printf_i+0x30>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	f043 0320 	orr.w	r3, r3, #32
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	e003      	b.n	8009cfe <_printf_i+0x86>
 8009cf6:	2975      	cmp	r1, #117	; 0x75
 8009cf8:	d017      	beq.n	8009d2a <_printf_i+0xb2>
 8009cfa:	2978      	cmp	r1, #120	; 0x78
 8009cfc:	d1d4      	bne.n	8009ca8 <_printf_i+0x30>
 8009cfe:	2378      	movs	r3, #120	; 0x78
 8009d00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d04:	4864      	ldr	r0, [pc, #400]	; (8009e98 <_printf_i+0x220>)
 8009d06:	e055      	b.n	8009db4 <_printf_i+0x13c>
 8009d08:	6813      	ldr	r3, [r2, #0]
 8009d0a:	1d19      	adds	r1, r3, #4
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6011      	str	r1, [r2, #0]
 8009d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e08c      	b.n	8009e36 <_printf_i+0x1be>
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6011      	str	r1, [r2, #0]
 8009d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d24:	bf18      	it	ne
 8009d26:	b21b      	sxthne	r3, r3
 8009d28:	e7cf      	b.n	8009cca <_printf_i+0x52>
 8009d2a:	6813      	ldr	r3, [r2, #0]
 8009d2c:	6825      	ldr	r5, [r4, #0]
 8009d2e:	1d18      	adds	r0, r3, #4
 8009d30:	6010      	str	r0, [r2, #0]
 8009d32:	0628      	lsls	r0, r5, #24
 8009d34:	d501      	bpl.n	8009d3a <_printf_i+0xc2>
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	e002      	b.n	8009d40 <_printf_i+0xc8>
 8009d3a:	0668      	lsls	r0, r5, #25
 8009d3c:	d5fb      	bpl.n	8009d36 <_printf_i+0xbe>
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	4854      	ldr	r0, [pc, #336]	; (8009e94 <_printf_i+0x21c>)
 8009d42:	296f      	cmp	r1, #111	; 0x6f
 8009d44:	bf14      	ite	ne
 8009d46:	220a      	movne	r2, #10
 8009d48:	2208      	moveq	r2, #8
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d50:	6865      	ldr	r5, [r4, #4]
 8009d52:	60a5      	str	r5, [r4, #8]
 8009d54:	2d00      	cmp	r5, #0
 8009d56:	f2c0 8095 	blt.w	8009e84 <_printf_i+0x20c>
 8009d5a:	6821      	ldr	r1, [r4, #0]
 8009d5c:	f021 0104 	bic.w	r1, r1, #4
 8009d60:	6021      	str	r1, [r4, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d13d      	bne.n	8009de2 <_printf_i+0x16a>
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	f040 808e 	bne.w	8009e88 <_printf_i+0x210>
 8009d6c:	4665      	mov	r5, ip
 8009d6e:	2a08      	cmp	r2, #8
 8009d70:	d10b      	bne.n	8009d8a <_printf_i+0x112>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	07db      	lsls	r3, r3, #31
 8009d76:	d508      	bpl.n	8009d8a <_printf_i+0x112>
 8009d78:	6923      	ldr	r3, [r4, #16]
 8009d7a:	6862      	ldr	r2, [r4, #4]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	bfde      	ittt	le
 8009d80:	2330      	movle	r3, #48	; 0x30
 8009d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d8a:	ebac 0305 	sub.w	r3, ip, r5
 8009d8e:	6123      	str	r3, [r4, #16]
 8009d90:	f8cd 8000 	str.w	r8, [sp]
 8009d94:	463b      	mov	r3, r7
 8009d96:	aa03      	add	r2, sp, #12
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	f7ff fef6 	bl	8009b8c <_printf_common>
 8009da0:	3001      	adds	r0, #1
 8009da2:	d14d      	bne.n	8009e40 <_printf_i+0x1c8>
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	b005      	add	sp, #20
 8009daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dae:	4839      	ldr	r0, [pc, #228]	; (8009e94 <_printf_i+0x21c>)
 8009db0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009db4:	6813      	ldr	r3, [r2, #0]
 8009db6:	6821      	ldr	r1, [r4, #0]
 8009db8:	1d1d      	adds	r5, r3, #4
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6015      	str	r5, [r2, #0]
 8009dbe:	060a      	lsls	r2, r1, #24
 8009dc0:	d50b      	bpl.n	8009dda <_printf_i+0x162>
 8009dc2:	07ca      	lsls	r2, r1, #31
 8009dc4:	bf44      	itt	mi
 8009dc6:	f041 0120 	orrmi.w	r1, r1, #32
 8009dca:	6021      	strmi	r1, [r4, #0]
 8009dcc:	b91b      	cbnz	r3, 8009dd6 <_printf_i+0x15e>
 8009dce:	6822      	ldr	r2, [r4, #0]
 8009dd0:	f022 0220 	bic.w	r2, r2, #32
 8009dd4:	6022      	str	r2, [r4, #0]
 8009dd6:	2210      	movs	r2, #16
 8009dd8:	e7b7      	b.n	8009d4a <_printf_i+0xd2>
 8009dda:	064d      	lsls	r5, r1, #25
 8009ddc:	bf48      	it	mi
 8009dde:	b29b      	uxthmi	r3, r3
 8009de0:	e7ef      	b.n	8009dc2 <_printf_i+0x14a>
 8009de2:	4665      	mov	r5, ip
 8009de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009de8:	fb02 3311 	mls	r3, r2, r1, r3
 8009dec:	5cc3      	ldrb	r3, [r0, r3]
 8009dee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009df2:	460b      	mov	r3, r1
 8009df4:	2900      	cmp	r1, #0
 8009df6:	d1f5      	bne.n	8009de4 <_printf_i+0x16c>
 8009df8:	e7b9      	b.n	8009d6e <_printf_i+0xf6>
 8009dfa:	6813      	ldr	r3, [r2, #0]
 8009dfc:	6825      	ldr	r5, [r4, #0]
 8009dfe:	6961      	ldr	r1, [r4, #20]
 8009e00:	1d18      	adds	r0, r3, #4
 8009e02:	6010      	str	r0, [r2, #0]
 8009e04:	0628      	lsls	r0, r5, #24
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	d501      	bpl.n	8009e0e <_printf_i+0x196>
 8009e0a:	6019      	str	r1, [r3, #0]
 8009e0c:	e002      	b.n	8009e14 <_printf_i+0x19c>
 8009e0e:	066a      	lsls	r2, r5, #25
 8009e10:	d5fb      	bpl.n	8009e0a <_printf_i+0x192>
 8009e12:	8019      	strh	r1, [r3, #0]
 8009e14:	2300      	movs	r3, #0
 8009e16:	6123      	str	r3, [r4, #16]
 8009e18:	4665      	mov	r5, ip
 8009e1a:	e7b9      	b.n	8009d90 <_printf_i+0x118>
 8009e1c:	6813      	ldr	r3, [r2, #0]
 8009e1e:	1d19      	adds	r1, r3, #4
 8009e20:	6011      	str	r1, [r2, #0]
 8009e22:	681d      	ldr	r5, [r3, #0]
 8009e24:	6862      	ldr	r2, [r4, #4]
 8009e26:	2100      	movs	r1, #0
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f7f6 fa09 	bl	8000240 <memchr>
 8009e2e:	b108      	cbz	r0, 8009e34 <_printf_i+0x1bc>
 8009e30:	1b40      	subs	r0, r0, r5
 8009e32:	6060      	str	r0, [r4, #4]
 8009e34:	6863      	ldr	r3, [r4, #4]
 8009e36:	6123      	str	r3, [r4, #16]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e3e:	e7a7      	b.n	8009d90 <_printf_i+0x118>
 8009e40:	6923      	ldr	r3, [r4, #16]
 8009e42:	462a      	mov	r2, r5
 8009e44:	4639      	mov	r1, r7
 8009e46:	4630      	mov	r0, r6
 8009e48:	47c0      	blx	r8
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	d0aa      	beq.n	8009da4 <_printf_i+0x12c>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	079b      	lsls	r3, r3, #30
 8009e52:	d413      	bmi.n	8009e7c <_printf_i+0x204>
 8009e54:	68e0      	ldr	r0, [r4, #12]
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	4298      	cmp	r0, r3
 8009e5a:	bfb8      	it	lt
 8009e5c:	4618      	movlt	r0, r3
 8009e5e:	e7a3      	b.n	8009da8 <_printf_i+0x130>
 8009e60:	2301      	movs	r3, #1
 8009e62:	464a      	mov	r2, r9
 8009e64:	4639      	mov	r1, r7
 8009e66:	4630      	mov	r0, r6
 8009e68:	47c0      	blx	r8
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d09a      	beq.n	8009da4 <_printf_i+0x12c>
 8009e6e:	3501      	adds	r5, #1
 8009e70:	68e3      	ldr	r3, [r4, #12]
 8009e72:	9a03      	ldr	r2, [sp, #12]
 8009e74:	1a9b      	subs	r3, r3, r2
 8009e76:	42ab      	cmp	r3, r5
 8009e78:	dcf2      	bgt.n	8009e60 <_printf_i+0x1e8>
 8009e7a:	e7eb      	b.n	8009e54 <_printf_i+0x1dc>
 8009e7c:	2500      	movs	r5, #0
 8009e7e:	f104 0919 	add.w	r9, r4, #25
 8009e82:	e7f5      	b.n	8009e70 <_printf_i+0x1f8>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1ac      	bne.n	8009de2 <_printf_i+0x16a>
 8009e88:	7803      	ldrb	r3, [r0, #0]
 8009e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e92:	e76c      	b.n	8009d6e <_printf_i+0xf6>
 8009e94:	0800ca59 	.word	0x0800ca59
 8009e98:	0800ca6a 	.word	0x0800ca6a

08009e9c <memcpy>:
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	1e43      	subs	r3, r0, #1
 8009ea0:	440a      	add	r2, r1
 8009ea2:	4291      	cmp	r1, r2
 8009ea4:	d100      	bne.n	8009ea8 <memcpy+0xc>
 8009ea6:	bd10      	pop	{r4, pc}
 8009ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eb0:	e7f7      	b.n	8009ea2 <memcpy+0x6>

08009eb2 <memmove>:
 8009eb2:	4288      	cmp	r0, r1
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	eb01 0302 	add.w	r3, r1, r2
 8009eba:	d807      	bhi.n	8009ecc <memmove+0x1a>
 8009ebc:	1e42      	subs	r2, r0, #1
 8009ebe:	4299      	cmp	r1, r3
 8009ec0:	d00a      	beq.n	8009ed8 <memmove+0x26>
 8009ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ec6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009eca:	e7f8      	b.n	8009ebe <memmove+0xc>
 8009ecc:	4283      	cmp	r3, r0
 8009ece:	d9f5      	bls.n	8009ebc <memmove+0xa>
 8009ed0:	1881      	adds	r1, r0, r2
 8009ed2:	1ad2      	subs	r2, r2, r3
 8009ed4:	42d3      	cmn	r3, r2
 8009ed6:	d100      	bne.n	8009eda <memmove+0x28>
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ede:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009ee2:	e7f7      	b.n	8009ed4 <memmove+0x22>

08009ee4 <_free_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	2900      	cmp	r1, #0
 8009eea:	d045      	beq.n	8009f78 <_free_r+0x94>
 8009eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef0:	1f0c      	subs	r4, r1, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bfb8      	it	lt
 8009ef6:	18e4      	addlt	r4, r4, r3
 8009ef8:	f000 f8d2 	bl	800a0a0 <__malloc_lock>
 8009efc:	4a1f      	ldr	r2, [pc, #124]	; (8009f7c <_free_r+0x98>)
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	4610      	mov	r0, r2
 8009f02:	b933      	cbnz	r3, 8009f12 <_free_r+0x2e>
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	6014      	str	r4, [r2, #0]
 8009f08:	4628      	mov	r0, r5
 8009f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f0e:	f000 b8c8 	b.w	800a0a2 <__malloc_unlock>
 8009f12:	42a3      	cmp	r3, r4
 8009f14:	d90c      	bls.n	8009f30 <_free_r+0x4c>
 8009f16:	6821      	ldr	r1, [r4, #0]
 8009f18:	1862      	adds	r2, r4, r1
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	bf04      	itt	eq
 8009f1e:	681a      	ldreq	r2, [r3, #0]
 8009f20:	685b      	ldreq	r3, [r3, #4]
 8009f22:	6063      	str	r3, [r4, #4]
 8009f24:	bf04      	itt	eq
 8009f26:	1852      	addeq	r2, r2, r1
 8009f28:	6022      	streq	r2, [r4, #0]
 8009f2a:	6004      	str	r4, [r0, #0]
 8009f2c:	e7ec      	b.n	8009f08 <_free_r+0x24>
 8009f2e:	4613      	mov	r3, r2
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	b10a      	cbz	r2, 8009f38 <_free_r+0x54>
 8009f34:	42a2      	cmp	r2, r4
 8009f36:	d9fa      	bls.n	8009f2e <_free_r+0x4a>
 8009f38:	6819      	ldr	r1, [r3, #0]
 8009f3a:	1858      	adds	r0, r3, r1
 8009f3c:	42a0      	cmp	r0, r4
 8009f3e:	d10b      	bne.n	8009f58 <_free_r+0x74>
 8009f40:	6820      	ldr	r0, [r4, #0]
 8009f42:	4401      	add	r1, r0
 8009f44:	1858      	adds	r0, r3, r1
 8009f46:	4282      	cmp	r2, r0
 8009f48:	6019      	str	r1, [r3, #0]
 8009f4a:	d1dd      	bne.n	8009f08 <_free_r+0x24>
 8009f4c:	6810      	ldr	r0, [r2, #0]
 8009f4e:	6852      	ldr	r2, [r2, #4]
 8009f50:	605a      	str	r2, [r3, #4]
 8009f52:	4401      	add	r1, r0
 8009f54:	6019      	str	r1, [r3, #0]
 8009f56:	e7d7      	b.n	8009f08 <_free_r+0x24>
 8009f58:	d902      	bls.n	8009f60 <_free_r+0x7c>
 8009f5a:	230c      	movs	r3, #12
 8009f5c:	602b      	str	r3, [r5, #0]
 8009f5e:	e7d3      	b.n	8009f08 <_free_r+0x24>
 8009f60:	6820      	ldr	r0, [r4, #0]
 8009f62:	1821      	adds	r1, r4, r0
 8009f64:	428a      	cmp	r2, r1
 8009f66:	bf04      	itt	eq
 8009f68:	6811      	ldreq	r1, [r2, #0]
 8009f6a:	6852      	ldreq	r2, [r2, #4]
 8009f6c:	6062      	str	r2, [r4, #4]
 8009f6e:	bf04      	itt	eq
 8009f70:	1809      	addeq	r1, r1, r0
 8009f72:	6021      	streq	r1, [r4, #0]
 8009f74:	605c      	str	r4, [r3, #4]
 8009f76:	e7c7      	b.n	8009f08 <_free_r+0x24>
 8009f78:	bd38      	pop	{r3, r4, r5, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20000354 	.word	0x20000354

08009f80 <_malloc_r>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	1ccd      	adds	r5, r1, #3
 8009f84:	f025 0503 	bic.w	r5, r5, #3
 8009f88:	3508      	adds	r5, #8
 8009f8a:	2d0c      	cmp	r5, #12
 8009f8c:	bf38      	it	cc
 8009f8e:	250c      	movcc	r5, #12
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	4606      	mov	r6, r0
 8009f94:	db01      	blt.n	8009f9a <_malloc_r+0x1a>
 8009f96:	42a9      	cmp	r1, r5
 8009f98:	d903      	bls.n	8009fa2 <_malloc_r+0x22>
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	6033      	str	r3, [r6, #0]
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
 8009fa2:	f000 f87d 	bl	800a0a0 <__malloc_lock>
 8009fa6:	4a21      	ldr	r2, [pc, #132]	; (800a02c <_malloc_r+0xac>)
 8009fa8:	6814      	ldr	r4, [r2, #0]
 8009faa:	4621      	mov	r1, r4
 8009fac:	b991      	cbnz	r1, 8009fd4 <_malloc_r+0x54>
 8009fae:	4c20      	ldr	r4, [pc, #128]	; (800a030 <_malloc_r+0xb0>)
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	b91b      	cbnz	r3, 8009fbc <_malloc_r+0x3c>
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f000 f863 	bl	800a080 <_sbrk_r>
 8009fba:	6020      	str	r0, [r4, #0]
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f000 f85e 	bl	800a080 <_sbrk_r>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d124      	bne.n	800a012 <_malloc_r+0x92>
 8009fc8:	230c      	movs	r3, #12
 8009fca:	6033      	str	r3, [r6, #0]
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f000 f868 	bl	800a0a2 <__malloc_unlock>
 8009fd2:	e7e4      	b.n	8009f9e <_malloc_r+0x1e>
 8009fd4:	680b      	ldr	r3, [r1, #0]
 8009fd6:	1b5b      	subs	r3, r3, r5
 8009fd8:	d418      	bmi.n	800a00c <_malloc_r+0x8c>
 8009fda:	2b0b      	cmp	r3, #11
 8009fdc:	d90f      	bls.n	8009ffe <_malloc_r+0x7e>
 8009fde:	600b      	str	r3, [r1, #0]
 8009fe0:	50cd      	str	r5, [r1, r3]
 8009fe2:	18cc      	adds	r4, r1, r3
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f000 f85c 	bl	800a0a2 <__malloc_unlock>
 8009fea:	f104 000b 	add.w	r0, r4, #11
 8009fee:	1d23      	adds	r3, r4, #4
 8009ff0:	f020 0007 	bic.w	r0, r0, #7
 8009ff4:	1ac3      	subs	r3, r0, r3
 8009ff6:	d0d3      	beq.n	8009fa0 <_malloc_r+0x20>
 8009ff8:	425a      	negs	r2, r3
 8009ffa:	50e2      	str	r2, [r4, r3]
 8009ffc:	e7d0      	b.n	8009fa0 <_malloc_r+0x20>
 8009ffe:	428c      	cmp	r4, r1
 800a000:	684b      	ldr	r3, [r1, #4]
 800a002:	bf16      	itet	ne
 800a004:	6063      	strne	r3, [r4, #4]
 800a006:	6013      	streq	r3, [r2, #0]
 800a008:	460c      	movne	r4, r1
 800a00a:	e7eb      	b.n	8009fe4 <_malloc_r+0x64>
 800a00c:	460c      	mov	r4, r1
 800a00e:	6849      	ldr	r1, [r1, #4]
 800a010:	e7cc      	b.n	8009fac <_malloc_r+0x2c>
 800a012:	1cc4      	adds	r4, r0, #3
 800a014:	f024 0403 	bic.w	r4, r4, #3
 800a018:	42a0      	cmp	r0, r4
 800a01a:	d005      	beq.n	800a028 <_malloc_r+0xa8>
 800a01c:	1a21      	subs	r1, r4, r0
 800a01e:	4630      	mov	r0, r6
 800a020:	f000 f82e 	bl	800a080 <_sbrk_r>
 800a024:	3001      	adds	r0, #1
 800a026:	d0cf      	beq.n	8009fc8 <_malloc_r+0x48>
 800a028:	6025      	str	r5, [r4, #0]
 800a02a:	e7db      	b.n	8009fe4 <_malloc_r+0x64>
 800a02c:	20000354 	.word	0x20000354
 800a030:	20000358 	.word	0x20000358

0800a034 <_realloc_r>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	4607      	mov	r7, r0
 800a038:	4614      	mov	r4, r2
 800a03a:	460e      	mov	r6, r1
 800a03c:	b921      	cbnz	r1, 800a048 <_realloc_r+0x14>
 800a03e:	4611      	mov	r1, r2
 800a040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a044:	f7ff bf9c 	b.w	8009f80 <_malloc_r>
 800a048:	b922      	cbnz	r2, 800a054 <_realloc_r+0x20>
 800a04a:	f7ff ff4b 	bl	8009ee4 <_free_r>
 800a04e:	4625      	mov	r5, r4
 800a050:	4628      	mov	r0, r5
 800a052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a054:	f000 f826 	bl	800a0a4 <_malloc_usable_size_r>
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d20f      	bcs.n	800a07c <_realloc_r+0x48>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4638      	mov	r0, r7
 800a060:	f7ff ff8e 	bl	8009f80 <_malloc_r>
 800a064:	4605      	mov	r5, r0
 800a066:	2800      	cmp	r0, #0
 800a068:	d0f2      	beq.n	800a050 <_realloc_r+0x1c>
 800a06a:	4631      	mov	r1, r6
 800a06c:	4622      	mov	r2, r4
 800a06e:	f7ff ff15 	bl	8009e9c <memcpy>
 800a072:	4631      	mov	r1, r6
 800a074:	4638      	mov	r0, r7
 800a076:	f7ff ff35 	bl	8009ee4 <_free_r>
 800a07a:	e7e9      	b.n	800a050 <_realloc_r+0x1c>
 800a07c:	4635      	mov	r5, r6
 800a07e:	e7e7      	b.n	800a050 <_realloc_r+0x1c>

0800a080 <_sbrk_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4c06      	ldr	r4, [pc, #24]	; (800a09c <_sbrk_r+0x1c>)
 800a084:	2300      	movs	r3, #0
 800a086:	4605      	mov	r5, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	f7ff fb4e 	bl	800972c <_sbrk>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_sbrk_r+0x1a>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	b103      	cbz	r3, 800a09a <_sbrk_r+0x1a>
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	20000770 	.word	0x20000770

0800a0a0 <__malloc_lock>:
 800a0a0:	4770      	bx	lr

0800a0a2 <__malloc_unlock>:
 800a0a2:	4770      	bx	lr

0800a0a4 <_malloc_usable_size_r>:
 800a0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a8:	1f18      	subs	r0, r3, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bfbc      	itt	lt
 800a0ae:	580b      	ldrlt	r3, [r1, r0]
 800a0b0:	18c0      	addlt	r0, r0, r3
 800a0b2:	4770      	bx	lr

0800a0b4 <_init>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	bf00      	nop
 800a0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ba:	bc08      	pop	{r3}
 800a0bc:	469e      	mov	lr, r3
 800a0be:	4770      	bx	lr

0800a0c0 <_fini>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr
