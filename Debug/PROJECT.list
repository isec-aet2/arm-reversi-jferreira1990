
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eed0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002aec  0800f0d0  0800f0d0  0001f0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bbc  08011bbc  00030118  2**0
                  CONTENTS
  4 .ARM          00000008  08011bbc  08011bbc  00021bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bc4  08011bc4  00030118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bc4  08011bc4  00021bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bc8  08011bc8  00021bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08011bcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c78  20000118  08011ce4  00030118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d90  08011ce4  00030d90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a066  00000000  00000000  00030146  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d2c  00000000  00000000  0005a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002018  00000000  00000000  0005eed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001db0  00000000  00000000  00060ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000328bc  00000000  00000000  00062ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ca38  00000000  00000000  0009555c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012a8e1  00000000  00000000  000b1f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dc875  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ba4  00000000  00000000  001dc8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  001e5494  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001e54b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000118 	.word	0x20000118
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f0b8 	.word	0x0800f0b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000011c 	.word	0x2000011c
 800023c:	0800f0b8 	.word	0x0800f0b8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f90d 	bl	800081c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d10e      	bne.n	800062a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f905 	bl	800081c <ft6x06_GetInstance>
 8000612:	4603      	mov	r3, r0
 8000614:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d806      	bhi.n	800062a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	b2d1      	uxtb	r1, r2
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <ft6x06_Init+0x44>)
 8000624:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000626:	f000 fd89 	bl	800113c <TS_IO_Init>
    }
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000134 	.word	0x20000134

08000638 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000658:	f000 fd70 	bl	800113c <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	21a8      	movs	r1, #168	; 0xa8
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fd8e 	bl	8001184 <TS_IO_Read>
 8000668:	4603      	mov	r3, r0
 800066a:	b29b      	uxth	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8bc 	bl	80007fe <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f88d 	bl	80007a8 <ft6x06_TS_DisableIT>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd69 	bl	8001184 <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d901      	bls.n	80006ce <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000138 	.word	0x20000138

080006ec <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000700:	789a      	ldrb	r2, [r3, #2]
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	429a      	cmp	r2, r3
 8000708:	d234      	bcs.n	8000774 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <ft6x06_TS_GetXY+0x2c>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000716:	e005      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000718:	2303      	movs	r3, #3
 800071a:	75fb      	strb	r3, [r7, #23]
      break;
 800071c:	e002      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800071e:	2309      	movs	r3, #9
 8000720:	75fb      	strb	r3, [r7, #23]
      break;
 8000722:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	7df9      	ldrb	r1, [r7, #23]
 800072e:	2304      	movs	r3, #4
 8000730:	f000 fd46 	bl	80011c0 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000734:	7c3b      	ldrb	r3, [r7, #16]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21b      	sxth	r3, r3
 800073a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800073e:	b21a      	sxth	r2, r3
 8000740:	7c7b      	ldrb	r3, [r7, #17]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800074e:	7cbb      	ldrb	r3, [r7, #18]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21b      	sxth	r3, r3
 8000754:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000758:	b21a      	sxth	r2, r3
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	b21b      	sxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b21b      	sxth	r3, r3
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000772:	709a      	strb	r2, [r3, #2]
  }
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000138 	.word	0x20000138

08000780 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	21a4      	movs	r1, #164	; 0xa4
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fcd8 	bl	8001150 <TS_IO_Write>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	21a4      	movs	r1, #164	; 0xa4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fcc4 	bl	8001150 <TS_IO_Write>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e00b      	b.n	8000848 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <ft6x06_GetInstance+0x40>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	b29b      	uxth	r3, r3
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	429a      	cmp	r2, r3
 800083c:	d101      	bne.n	8000842 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	e006      	b.n	8000850 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d9f0      	bls.n	8000830 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800084e:	23ff      	movs	r3, #255	; 0xff
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	20000134 	.word	0x20000134

08000860 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800086a:	49be      	ldr	r1, [pc, #760]	; (8000b64 <OTM8009A_Init+0x304>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fae5 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000872:	49bd      	ldr	r1, [pc, #756]	; (8000b68 <OTM8009A_Init+0x308>)
 8000874:	2003      	movs	r0, #3
 8000876:	f001 fae1 	bl	8001e3c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800087a:	49bc      	ldr	r1, [pc, #752]	; (8000b6c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fadd 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000882:	49bb      	ldr	r1, [pc, #748]	; (8000b70 <OTM8009A_Init+0x310>)
 8000884:	2002      	movs	r0, #2
 8000886:	f001 fad9 	bl	8001e3c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800088a:	49b8      	ldr	r1, [pc, #736]	; (8000b6c <OTM8009A_Init+0x30c>)
 800088c:	2000      	movs	r0, #0
 800088e:	f001 fad5 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000892:	49b8      	ldr	r1, [pc, #736]	; (8000b74 <OTM8009A_Init+0x314>)
 8000894:	2000      	movs	r0, #0
 8000896:	f001 fad1 	bl	8001e3c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f000 fcae 	bl	80011fc <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80008a0:	49b5      	ldr	r1, [pc, #724]	; (8000b78 <OTM8009A_Init+0x318>)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 faca 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80008a8:	49b4      	ldr	r1, [pc, #720]	; (8000b7c <OTM8009A_Init+0x31c>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 fac6 	bl	8001e3c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fca3 	bl	80011fc <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008b6:	49b2      	ldr	r1, [pc, #712]	; (8000b80 <OTM8009A_Init+0x320>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fabf 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008be:	49b1      	ldr	r1, [pc, #708]	; (8000b84 <OTM8009A_Init+0x324>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fabb 	bl	8001e3c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008c6:	49b0      	ldr	r1, [pc, #704]	; (8000b88 <OTM8009A_Init+0x328>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fab7 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008ce:	49af      	ldr	r1, [pc, #700]	; (8000b8c <OTM8009A_Init+0x32c>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fab3 	bl	8001e3c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008d6:	49ae      	ldr	r1, [pc, #696]	; (8000b90 <OTM8009A_Init+0x330>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 faaf 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008de:	49ad      	ldr	r1, [pc, #692]	; (8000b94 <OTM8009A_Init+0x334>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 faab 	bl	8001e3c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008e6:	499f      	ldr	r1, [pc, #636]	; (8000b64 <OTM8009A_Init+0x304>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 faa7 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008ee:	49aa      	ldr	r1, [pc, #680]	; (8000b98 <OTM8009A_Init+0x338>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 faa3 	bl	8001e3c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008f6:	49a9      	ldr	r1, [pc, #676]	; (8000b9c <OTM8009A_Init+0x33c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa9f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008fe:	49a8      	ldr	r1, [pc, #672]	; (8000ba0 <OTM8009A_Init+0x340>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa9b 	bl	8001e3c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000906:	49a7      	ldr	r1, [pc, #668]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa97 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800090e:	49a6      	ldr	r1, [pc, #664]	; (8000ba8 <OTM8009A_Init+0x348>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa93 	bl	8001e3c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000916:	49a5      	ldr	r1, [pc, #660]	; (8000bac <OTM8009A_Init+0x34c>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa8f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800091e:	49a4      	ldr	r1, [pc, #656]	; (8000bb0 <OTM8009A_Init+0x350>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa8b 	bl	8001e3c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000926:	49a3      	ldr	r1, [pc, #652]	; (8000bb4 <OTM8009A_Init+0x354>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa87 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800092e:	4997      	ldr	r1, [pc, #604]	; (8000b8c <OTM8009A_Init+0x32c>)
 8000930:	2000      	movs	r0, #0
 8000932:	f001 fa83 	bl	8001e3c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000936:	498b      	ldr	r1, [pc, #556]	; (8000b64 <OTM8009A_Init+0x304>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa7f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800093e:	499e      	ldr	r1, [pc, #632]	; (8000bb8 <OTM8009A_Init+0x358>)
 8000940:	2002      	movs	r0, #2
 8000942:	f001 fa7b 	bl	8001e3c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000946:	499d      	ldr	r1, [pc, #628]	; (8000bbc <OTM8009A_Init+0x35c>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa77 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800094e:	499c      	ldr	r1, [pc, #624]	; (8000bc0 <OTM8009A_Init+0x360>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa73 	bl	8001e3c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000956:	499b      	ldr	r1, [pc, #620]	; (8000bc4 <OTM8009A_Init+0x364>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa6f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800095e:	499a      	ldr	r1, [pc, #616]	; (8000bc8 <OTM8009A_Init+0x368>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa6b 	bl	8001e3c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000966:	4999      	ldr	r1, [pc, #612]	; (8000bcc <OTM8009A_Init+0x36c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa67 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800096e:	4998      	ldr	r1, [pc, #608]	; (8000bd0 <OTM8009A_Init+0x370>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa63 	bl	8001e3c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000976:	4989      	ldr	r1, [pc, #548]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fa5f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800097e:	4995      	ldr	r1, [pc, #596]	; (8000bd4 <OTM8009A_Init+0x374>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa5b 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000986:	4987      	ldr	r1, [pc, #540]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa57 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800098e:	4992      	ldr	r1, [pc, #584]	; (8000bd8 <OTM8009A_Init+0x378>)
 8000990:	2000      	movs	r0, #0
 8000992:	f001 fa53 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000996:	4991      	ldr	r1, [pc, #580]	; (8000bdc <OTM8009A_Init+0x37c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa4f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800099e:	4990      	ldr	r1, [pc, #576]	; (8000be0 <OTM8009A_Init+0x380>)
 80009a0:	2002      	movs	r0, #2
 80009a2:	f001 fa4b 	bl	8001e3c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009a6:	4971      	ldr	r1, [pc, #452]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa47 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80009ae:	498d      	ldr	r1, [pc, #564]	; (8000be4 <OTM8009A_Init+0x384>)
 80009b0:	2006      	movs	r0, #6
 80009b2:	f001 fa43 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009b6:	498c      	ldr	r1, [pc, #560]	; (8000be8 <OTM8009A_Init+0x388>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa3f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009be:	498b      	ldr	r1, [pc, #556]	; (8000bec <OTM8009A_Init+0x38c>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa3b 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009c6:	498a      	ldr	r1, [pc, #552]	; (8000bf0 <OTM8009A_Init+0x390>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fa37 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009ce:	4989      	ldr	r1, [pc, #548]	; (8000bf4 <OTM8009A_Init+0x394>)
 80009d0:	200e      	movs	r0, #14
 80009d2:	f001 fa33 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009d6:	4988      	ldr	r1, [pc, #544]	; (8000bf8 <OTM8009A_Init+0x398>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa2f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009de:	4987      	ldr	r1, [pc, #540]	; (8000bfc <OTM8009A_Init+0x39c>)
 80009e0:	200a      	movs	r0, #10
 80009e2:	f001 fa2b 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009e6:	4986      	ldr	r1, [pc, #536]	; (8000c00 <OTM8009A_Init+0x3a0>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fa27 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009ee:	4985      	ldr	r1, [pc, #532]	; (8000c04 <OTM8009A_Init+0x3a4>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 fa23 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009f6:	495d      	ldr	r1, [pc, #372]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 fa1f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009fe:	4982      	ldr	r1, [pc, #520]	; (8000c08 <OTM8009A_Init+0x3a8>)
 8000a00:	200a      	movs	r0, #10
 8000a02:	f001 fa1b 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a06:	4981      	ldr	r1, [pc, #516]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 fa17 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000a0e:	4980      	ldr	r1, [pc, #512]	; (8000c10 <OTM8009A_Init+0x3b0>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 fa13 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a16:	4974      	ldr	r1, [pc, #464]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fa0f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a1e:	497d      	ldr	r1, [pc, #500]	; (8000c14 <OTM8009A_Init+0x3b4>)
 8000a20:	200f      	movs	r0, #15
 8000a22:	f001 fa0b 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a26:	4972      	ldr	r1, [pc, #456]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fa07 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a2e:	497a      	ldr	r1, [pc, #488]	; (8000c18 <OTM8009A_Init+0x3b8>)
 8000a30:	200a      	movs	r0, #10
 8000a32:	f001 fa03 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a36:	4970      	ldr	r1, [pc, #448]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f9ff 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a3e:	4977      	ldr	r1, [pc, #476]	; (8000c1c <OTM8009A_Init+0x3bc>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f9fb 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a46:	496e      	ldr	r1, [pc, #440]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f9f7 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a4e:	4974      	ldr	r1, [pc, #464]	; (8000c20 <OTM8009A_Init+0x3c0>)
 8000a50:	200f      	movs	r0, #15
 8000a52:	f001 f9f3 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a56:	4973      	ldr	r1, [pc, #460]	; (8000c24 <OTM8009A_Init+0x3c4>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f9ef 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a5e:	4972      	ldr	r1, [pc, #456]	; (8000c28 <OTM8009A_Init+0x3c8>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f9eb 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a66:	4971      	ldr	r1, [pc, #452]	; (8000c2c <OTM8009A_Init+0x3cc>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f9e7 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a6e:	4970      	ldr	r1, [pc, #448]	; (8000c30 <OTM8009A_Init+0x3d0>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f9e3 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a76:	493d      	ldr	r1, [pc, #244]	; (8000b6c <OTM8009A_Init+0x30c>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f9df 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a7e:	496d      	ldr	r1, [pc, #436]	; (8000c34 <OTM8009A_Init+0x3d4>)
 8000a80:	200a      	movs	r0, #10
 8000a82:	f001 f9db 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a86:	4961      	ldr	r1, [pc, #388]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f9d7 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a8e:	496a      	ldr	r1, [pc, #424]	; (8000c38 <OTM8009A_Init+0x3d8>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f9d3 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a96:	4954      	ldr	r1, [pc, #336]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f9cf 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a9e:	4967      	ldr	r1, [pc, #412]	; (8000c3c <OTM8009A_Init+0x3dc>)
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f001 f9cb 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000aa6:	4952      	ldr	r1, [pc, #328]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f9c7 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000aae:	4964      	ldr	r1, [pc, #400]	; (8000c40 <OTM8009A_Init+0x3e0>)
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f001 f9c3 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000ab6:	4950      	ldr	r1, [pc, #320]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f9bf 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000abe:	4961      	ldr	r1, [pc, #388]	; (8000c44 <OTM8009A_Init+0x3e4>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f9bb 	bl	8001e3c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ac6:	494e      	ldr	r1, [pc, #312]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f9b7 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000ace:	495e      	ldr	r1, [pc, #376]	; (8000c48 <OTM8009A_Init+0x3e8>)
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f001 f9b3 	bl	8001e3c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ad6:	4931      	ldr	r1, [pc, #196]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f9af 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ade:	495b      	ldr	r1, [pc, #364]	; (8000c4c <OTM8009A_Init+0x3ec>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f9ab 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ae6:	495a      	ldr	r1, [pc, #360]	; (8000c50 <OTM8009A_Init+0x3f0>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f9a7 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000aee:	4959      	ldr	r1, [pc, #356]	; (8000c54 <OTM8009A_Init+0x3f4>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f9a3 	bl	8001e3c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000af6:	4958      	ldr	r1, [pc, #352]	; (8000c58 <OTM8009A_Init+0x3f8>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f99f 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000afe:	4957      	ldr	r1, [pc, #348]	; (8000c5c <OTM8009A_Init+0x3fc>)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 f99b 	bl	8001e3c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4917      	ldr	r1, [pc, #92]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f997 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000b0e:	4954      	ldr	r1, [pc, #336]	; (8000c60 <OTM8009A_Init+0x400>)
 8000b10:	2003      	movs	r0, #3
 8000b12:	f001 f993 	bl	8001e3c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 f98f 	bl	8001e3c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	4911      	ldr	r1, [pc, #68]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f98b 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b26:	494f      	ldr	r1, [pc, #316]	; (8000c64 <OTM8009A_Init+0x404>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f987 	bl	8001e3c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f983 	bl	8001e3c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b36:	494c      	ldr	r1, [pc, #304]	; (8000c68 <OTM8009A_Init+0x408>)
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f001 f97f 	bl	8001e3c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b3e:	494b      	ldr	r1, [pc, #300]	; (8000c6c <OTM8009A_Init+0x40c>)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 f97b 	bl	8001e3c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b46:	2078      	movs	r0, #120	; 0x78
 8000b48:	f000 fb58 	bl	80011fc <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8090 	beq.w	8000c74 <OTM8009A_Init+0x414>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d000      	beq.n	8000b5a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b58:	e091      	b.n	8000c7e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b5a:	4945      	ldr	r1, [pc, #276]	; (8000c70 <OTM8009A_Init+0x410>)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 f96d 	bl	8001e3c <DSI_IO_WriteCmd>
    break;
 8000b62:	e08c      	b.n	8000c7e <OTM8009A_Init+0x41e>
 8000b64:	0800f378 	.word	0x0800f378
 8000b68:	0800f230 	.word	0x0800f230
 8000b6c:	0800f37c 	.word	0x0800f37c
 8000b70:	0800f234 	.word	0x0800f234
 8000b74:	0800f380 	.word	0x0800f380
 8000b78:	0800f384 	.word	0x0800f384
 8000b7c:	0800f388 	.word	0x0800f388
 8000b80:	0800f38c 	.word	0x0800f38c
 8000b84:	0800f390 	.word	0x0800f390
 8000b88:	0800f394 	.word	0x0800f394
 8000b8c:	0800f398 	.word	0x0800f398
 8000b90:	0800f39c 	.word	0x0800f39c
 8000b94:	0800f3a0 	.word	0x0800f3a0
 8000b98:	0800f3a4 	.word	0x0800f3a4
 8000b9c:	0800f3a8 	.word	0x0800f3a8
 8000ba0:	0800f3ac 	.word	0x0800f3ac
 8000ba4:	0800f3b0 	.word	0x0800f3b0
 8000ba8:	0800f3b4 	.word	0x0800f3b4
 8000bac:	0800f3b8 	.word	0x0800f3b8
 8000bb0:	0800f3bc 	.word	0x0800f3bc
 8000bb4:	0800f3c0 	.word	0x0800f3c0
 8000bb8:	0800f260 	.word	0x0800f260
 8000bbc:	0800f3c4 	.word	0x0800f3c4
 8000bc0:	0800f3c8 	.word	0x0800f3c8
 8000bc4:	0800f3cc 	.word	0x0800f3cc
 8000bc8:	0800f3d0 	.word	0x0800f3d0
 8000bcc:	0800f3d4 	.word	0x0800f3d4
 8000bd0:	0800f3d8 	.word	0x0800f3d8
 8000bd4:	0800f3dc 	.word	0x0800f3dc
 8000bd8:	0800f3e0 	.word	0x0800f3e0
 8000bdc:	0800f3e4 	.word	0x0800f3e4
 8000be0:	0800f264 	.word	0x0800f264
 8000be4:	0800f268 	.word	0x0800f268
 8000be8:	0800f3e8 	.word	0x0800f3e8
 8000bec:	0800f270 	.word	0x0800f270
 8000bf0:	0800f3ec 	.word	0x0800f3ec
 8000bf4:	0800f280 	.word	0x0800f280
 8000bf8:	0800f3f0 	.word	0x0800f3f0
 8000bfc:	0800f290 	.word	0x0800f290
 8000c00:	0800f3f4 	.word	0x0800f3f4
 8000c04:	0800f42c 	.word	0x0800f42c
 8000c08:	0800f29c 	.word	0x0800f29c
 8000c0c:	0800f3f8 	.word	0x0800f3f8
 8000c10:	0800f2a8 	.word	0x0800f2a8
 8000c14:	0800f2b8 	.word	0x0800f2b8
 8000c18:	0800f2c8 	.word	0x0800f2c8
 8000c1c:	0800f2d4 	.word	0x0800f2d4
 8000c20:	0800f2e4 	.word	0x0800f2e4
 8000c24:	0800f3fc 	.word	0x0800f3fc
 8000c28:	0800f2f4 	.word	0x0800f2f4
 8000c2c:	0800f400 	.word	0x0800f400
 8000c30:	0800f300 	.word	0x0800f300
 8000c34:	0800f30c 	.word	0x0800f30c
 8000c38:	0800f318 	.word	0x0800f318
 8000c3c:	0800f328 	.word	0x0800f328
 8000c40:	0800f338 	.word	0x0800f338
 8000c44:	0800f344 	.word	0x0800f344
 8000c48:	0800f354 	.word	0x0800f354
 8000c4c:	0800f430 	.word	0x0800f430
 8000c50:	0800f434 	.word	0x0800f434
 8000c54:	0800f438 	.word	0x0800f438
 8000c58:	0800f43c 	.word	0x0800f43c
 8000c5c:	0800f440 	.word	0x0800f440
 8000c60:	0800f364 	.word	0x0800f364
 8000c64:	0800f238 	.word	0x0800f238
 8000c68:	0800f24c 	.word	0x0800f24c
 8000c6c:	0800f404 	.word	0x0800f404
 8000c70:	0800f408 	.word	0x0800f408
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c74:	491a      	ldr	r1, [pc, #104]	; (8000ce0 <OTM8009A_Init+0x480>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f8e0 	bl	8001e3c <DSI_IO_WriteCmd>
    break;
 8000c7c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10b      	bne.n	8000c9c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <OTM8009A_Init+0x484>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 f8d8 	bl	8001e3c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c8c:	4916      	ldr	r1, [pc, #88]	; (8000ce8 <OTM8009A_Init+0x488>)
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f001 f8d4 	bl	8001e3c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c94:	4915      	ldr	r1, [pc, #84]	; (8000cec <OTM8009A_Init+0x48c>)
 8000c96:	2004      	movs	r0, #4
 8000c98:	f001 f8d0 	bl	8001e3c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <OTM8009A_Init+0x490>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f8cc 	bl	8001e3c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000ca4:	4913      	ldr	r1, [pc, #76]	; (8000cf4 <OTM8009A_Init+0x494>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f8c8 	bl	8001e3c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000cac:	4912      	ldr	r1, [pc, #72]	; (8000cf8 <OTM8009A_Init+0x498>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f8c4 	bl	8001e3c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <OTM8009A_Init+0x49c>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f8c0 	bl	8001e3c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cbc:	4910      	ldr	r1, [pc, #64]	; (8000d00 <OTM8009A_Init+0x4a0>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f8bc 	bl	8001e3c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cc4:	490f      	ldr	r1, [pc, #60]	; (8000d04 <OTM8009A_Init+0x4a4>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 f8b8 	bl	8001e3c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000ccc:	490e      	ldr	r1, [pc, #56]	; (8000d08 <OTM8009A_Init+0x4a8>)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 f8b4 	bl	8001e3c <DSI_IO_WriteCmd>

  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	0800f40c 	.word	0x0800f40c
 8000ce4:	0800f410 	.word	0x0800f410
 8000ce8:	0800f368 	.word	0x0800f368
 8000cec:	0800f370 	.word	0x0800f370
 8000cf0:	0800f414 	.word	0x0800f414
 8000cf4:	0800f418 	.word	0x0800f418
 8000cf8:	0800f41c 	.word	0x0800f41c
 8000cfc:	0800f420 	.word	0x0800f420
 8000d00:	0800f424 	.word	0x0800f424
 8000d04:	0800f378 	.word	0x0800f378
 8000d08:	0800f428 	.word	0x0800f428

08000d0c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <BSP_LED_Init+0x58>)
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <BSP_LED_Init+0x5c>)
 8000d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4c:	f107 020c 	add.w	r2, r7, #12
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 f94a 	bl	8004fec <HAL_GPIO_Init>

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	20000028 	.word	0x20000028
 8000d68:	20000030 	.word	0x20000030

08000d6c <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <BSP_LED_On+0x2c>)
 8000d7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <BSP_LED_On+0x30>)
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f004 fbfa 	bl	8005584 <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000030 	.word	0x20000030
 8000d9c:	20000028 	.word	0x20000028

08000da0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <BSP_PB_Init+0x9c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <BSP_PB_Init+0x9c>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <BSP_PB_Init+0x9c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d111      	bne.n	8000df2 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000dce:	2301      	movs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <BSP_PB_Init+0xa0>)
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	f107 020c 	add.w	r2, r7, #12
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 f8fd 	bl	8004fec <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d11d      	bne.n	8000e34 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000df8:	2301      	movs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <BSP_PB_Init+0xa4>)
 8000e06:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <BSP_PB_Init+0xa0>)
 8000e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e10:	f107 020c 	add.w	r2, r7, #12
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f004 f8e8 	bl	8004fec <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	210f      	movs	r1, #15
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fbd6 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fbed 	bl	800360e <HAL_NVIC_EnableIRQ>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	20000038 	.word	0x20000038
 8000e44:	10110000 	.word	0x10110000

08000e48 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <BSP_PB_GetState+0x28>)
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 fb78 	bl	8005554 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000038 	.word	0x20000038

08000e74 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a58      	ldr	r2, [pc, #352]	; (8000fe0 <I2Cx_MspInit+0x16c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d15b      	bne.n	8000f3c <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e84:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b54      	ldr	r3, [pc, #336]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e9c:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b4e      	ldr	r3, [pc, #312]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000eba:	2312      	movs	r3, #18
 8000ebc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4845      	ldr	r0, [pc, #276]	; (8000fe8 <I2Cx_MspInit+0x174>)
 8000ed2:	f004 f88b 	bl	8004fec <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000eda:	230b      	movs	r3, #11
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4841      	ldr	r0, [pc, #260]	; (8000fec <I2Cx_MspInit+0x178>)
 8000ee6:	f004 f881 	bl	8004fec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000eea:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a3d      	ldr	r2, [pc, #244]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000f02:	4b38      	ldr	r3, [pc, #224]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a37      	ldr	r2, [pc, #220]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f0c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000f0e:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a34      	ldr	r2, [pc, #208]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f18:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	205f      	movs	r0, #95	; 0x5f
 8000f20:	f002 fb59 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000f24:	205f      	movs	r0, #95	; 0x5f
 8000f26:	f002 fb72 	bl	800360e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	2060      	movs	r0, #96	; 0x60
 8000f30:	f002 fb51 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000f34:	2060      	movs	r0, #96	; 0x60
 8000f36:	f002 fb6a 	bl	800360e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000f3a:	e04d      	b.n	8000fd8 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f5a:	2312      	movs	r3, #18
 8000f5c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f66:	2304      	movs	r3, #4
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481e      	ldr	r0, [pc, #120]	; (8000fec <I2Cx_MspInit+0x178>)
 8000f72:	f004 f83b 	bl	8004fec <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	481a      	ldr	r0, [pc, #104]	; (8000fec <I2Cx_MspInit+0x178>)
 8000f84:	f004 f832 	bl	8004fec <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000faa:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000fb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000fb6:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	210f      	movs	r1, #15
 8000fbc:	201f      	movs	r0, #31
 8000fbe:	f002 fb0a 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000fc2:	201f      	movs	r0, #31
 8000fc4:	f002 fb23 	bl	800360e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	210f      	movs	r1, #15
 8000fcc:	2020      	movs	r0, #32
 8000fce:	f002 fb02 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000fd2:	2020      	movs	r0, #32
 8000fd4:	f002 fb1b 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000013c 	.word	0x2000013c
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40020400 	.word	0x40020400

08000ff0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f004 fdf7 	bl	8005bec <HAL_I2C_GetState>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d125      	bne.n	8001050 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <I2Cx_Init+0x68>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d103      	bne.n	8001014 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <I2Cx_Init+0x6c>)
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e002      	b.n	800101a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <I2Cx_Init+0x70>)
 8001018:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <I2Cx_Init+0x74>)
 800101e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff15 	bl	8000e74 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f004 facc 	bl	80055e8 <HAL_I2C_Init>
  }
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000013c 	.word	0x2000013c
 800105c:	40006000 	.word	0x40006000
 8001060:	40005400 	.word	0x40005400
 8001064:	40912732 	.word	0x40912732

08001068 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af04      	add	r7, sp, #16
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	4608      	mov	r0, r1
 8001072:	4611      	mov	r1, r2
 8001074:	461a      	mov	r2, r3
 8001076:	4603      	mov	r3, r0
 8001078:	72fb      	strb	r3, [r7, #11]
 800107a:	460b      	mov	r3, r1
 800107c:	813b      	strh	r3, [r7, #8]
 800107e:	4613      	mov	r3, r2
 8001080:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001086:	7afb      	ldrb	r3, [r7, #11]
 8001088:	b299      	uxth	r1, r3
 800108a:	88f8      	ldrh	r0, [r7, #6]
 800108c:	893a      	ldrh	r2, [r7, #8]
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4603      	mov	r3, r0
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f004 fc8a 	bl	80059b8 <HAL_I2C_Mem_Read>
 80010a4:	4603      	mov	r3, r0
 80010a6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d004      	beq.n	80010b8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f832 	bl	800111c <I2Cx_Error>
  }
  return status;
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b08a      	sub	sp, #40	; 0x28
 80010c6:	af04      	add	r7, sp, #16
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	4608      	mov	r0, r1
 80010cc:	4611      	mov	r1, r2
 80010ce:	461a      	mov	r2, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	72fb      	strb	r3, [r7, #11]
 80010d4:	460b      	mov	r3, r1
 80010d6:	813b      	strh	r3, [r7, #8]
 80010d8:	4613      	mov	r3, r2
 80010da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	b299      	uxth	r1, r3
 80010e4:	88f8      	ldrh	r0, [r7, #6]
 80010e6:	893a      	ldrh	r2, [r7, #8]
 80010e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	4603      	mov	r3, r0
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f004 fb49 	bl	8005790 <HAL_I2C_Mem_Write>
 80010fe:	4603      	mov	r3, r0
 8001100:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	4619      	mov	r1, r3
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 f805 	bl	800111c <I2Cx_Error>
  }
  return status;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f004 faed 	bl	8005708 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff5e 	bl	8000ff0 <I2Cx_Init>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <TS_IO_Init+0x10>)
 8001142:	f7ff ff55 	bl	8000ff0 <I2Cx_Init>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000013c 	.word	0x2000013c

08001150 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af02      	add	r7, sp, #8
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	460b      	mov	r3, r1
 800115c:	71bb      	strb	r3, [r7, #6]
 800115e:	4613      	mov	r3, r2
 8001160:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	b29a      	uxth	r2, r3
 8001166:	79f9      	ldrb	r1, [r7, #7]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	1d7b      	adds	r3, r7, #5
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <TS_IO_Write+0x30>)
 8001174:	f7ff ffa5 	bl	80010c2 <I2Cx_WriteMultiple>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000013c 	.word	0x2000013c

08001184 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	b29a      	uxth	r2, r3
 800119c:	79f9      	ldrb	r1, [r7, #7]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	f107 030f 	add.w	r3, r7, #15
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <TS_IO_Read+0x38>)
 80011ac:	f7ff ff5c 	bl	8001068 <I2Cx_ReadMultiple>

  return read_value;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000013c 	.word	0x2000013c

080011c0 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	603a      	str	r2, [r7, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
 80011ce:	460b      	mov	r3, r1
 80011d0:	71bb      	strb	r3, [r7, #6]
 80011d2:	4613      	mov	r3, r2
 80011d4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	79f9      	ldrb	r1, [r7, #7]
 80011dc:	88bb      	ldrh	r3, [r7, #4]
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <TS_IO_ReadMultiple+0x38>)
 80011e8:	f7ff ff3e 	bl	8001068 <I2Cx_ReadMultiple>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29b      	uxth	r3, r3
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000013c 	.word	0x2000013c

080011fc <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f001 fbbd 	bl	8002984 <HAL_Delay>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001216:	2001      	movs	r0, #1
 8001218:	f000 f804 	bl	8001224 <BSP_LCD_InitEx>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b090      	sub	sp, #64	; 0x40
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 800122e:	f646 3325 	movw	r3, #27429	; 0x6b25
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 800123c:	f000 f936 	bl	80014ac <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8001240:	f000 fe26 	bl	8001e90 <LCD_IO_GetID>
 8001244:	4603      	mov	r3, r0
 8001246:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001248:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800124a:	2b11      	cmp	r3, #17
 800124c:	d001      	beq.n	8001252 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 800124e:	2301      	movs	r3, #1
 8001250:	e113      	b.n	800147a <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8001252:	f000 fe25 	bl	8001ea0 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001256:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001258:	4a8b      	ldr	r2, [pc, #556]	; (8001488 <BSP_LCD_InitEx+0x264>)
 800125a:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 800125c:	4889      	ldr	r0, [pc, #548]	; (8001484 <BSP_LCD_InitEx+0x260>)
 800125e:	f002 ffb7 	bl	80041d0 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001266:	2305      	movs	r3, #5
 8001268:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800126e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001272:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001274:	4b83      	ldr	r3, [pc, #524]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001276:	2201      	movs	r2, #1
 8001278:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800127a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	4a83      	ldr	r2, [pc, #524]	; (800148c <BSP_LCD_InitEx+0x268>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0a9b      	lsrs	r3, r3, #10
 8001286:	4a7f      	ldr	r2, [pc, #508]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001288:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4619      	mov	r1, r3
 8001290:	487c      	ldr	r0, [pc, #496]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001292:	f002 fe83 	bl	8003f9c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d108      	bne.n	80012ae <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 800129c:	4b7c      	ldr	r3, [pc, #496]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 800129e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012a2:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80012a4:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <BSP_LCD_InitEx+0x270>)
 80012a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e007      	b.n	80012be <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80012ae:	4b78      	ldr	r3, [pc, #480]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80012b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80012b4:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80012b6:	4b77      	ldr	r3, [pc, #476]	; (8001494 <BSP_LCD_InitEx+0x270>)
 80012b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012bc:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80012be:	4b74      	ldr	r3, [pc, #464]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80012c4:	4b73      	ldr	r3, [pc, #460]	; (8001494 <BSP_LCD_InitEx+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80012ca:	2301      	movs	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80012ce:	230f      	movs	r3, #15
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80012d2:	2310      	movs	r3, #16
 80012d4:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80012d6:	2302      	movs	r3, #2
 80012d8:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80012da:	2322      	movs	r3, #34	; 0x22
 80012dc:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80012de:	2322      	movs	r3, #34	; 0x22
 80012e0:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80012e2:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80012e8:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012ea:	2205      	movs	r2, #5
 80012ec:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80012ee:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80012f4:	4b68      	ldr	r3, [pc, #416]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001300:	4b65      	ldr	r3, [pc, #404]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001302:	2202      	movs	r2, #2
 8001304:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8001306:	4b64      	ldr	r3, [pc, #400]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001308:	f640 72ff 	movw	r2, #4095	; 0xfff
 800130c:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 800130e:	4b62      	ldr	r3, [pc, #392]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8001314:	4a60      	ldr	r2, [pc, #384]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800131e:	fb02 f203 	mul.w	r2, r2, r3
 8001322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	4a5b      	ldr	r2, [pc, #364]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800132a:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001330:	fb02 f203 	mul.w	r2, r2, r3
 8001334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4a57      	ldr	r2, [pc, #348]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800133c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800133e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	441a      	add	r2, r3
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	441a      	add	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	4413      	add	r3, r2
 800134c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800134e:	fb02 f203 	mul.w	r2, r2, r3
 8001352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800135a:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 800135c:	4a4e      	ldr	r2, [pc, #312]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001360:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001362:	4a4d      	ldr	r2, [pc, #308]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001368:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800136e:	4a4a      	ldr	r2, [pc, #296]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001376:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800137a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 800137c:	4b46      	ldr	r3, [pc, #280]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800137e:	2210      	movs	r2, #16
 8001380:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001384:	2200      	movs	r2, #0
 8001386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800138a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138e:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800139a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139e:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80013a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80013aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ae:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80013b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80013b8:	4937      	ldr	r1, [pc, #220]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80013ba:	4832      	ldr	r0, [pc, #200]	; (8001484 <BSP_LCD_InitEx+0x260>)
 80013bc:	f003 f860 	bl	8004480 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	4a35      	ldr	r2, [pc, #212]	; (800149c <BSP_LCD_InitEx+0x278>)
 80013c6:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4413      	add	r3, r2
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4a32      	ldr	r2, [pc, #200]	; (800149c <BSP_LCD_InitEx+0x278>)
 80013d2:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	441a      	add	r2, r3
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	4413      	add	r3, r2
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a2e      	ldr	r2, [pc, #184]	; (800149c <BSP_LCD_InitEx+0x278>)
 80013e4:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	441a      	add	r2, r3
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	3b01      	subs	r3, #1
 80013f8:	4a28      	ldr	r2, [pc, #160]	; (800149c <BSP_LCD_InitEx+0x278>)
 80013fa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <BSP_LCD_InitEx+0x278>)
 8001402:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <BSP_LCD_InitEx+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a24      	ldr	r2, [pc, #144]	; (800149c <BSP_LCD_InitEx+0x278>)
 800140a:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 800140e:	2208      	movs	r2, #8
 8001410:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 8001414:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001418:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 800141c:	2207      	movs	r2, #7
 800141e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001426:	481e      	ldr	r0, [pc, #120]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 8001428:	f005 fd5e 	bl	8006ee8 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <BSP_LCD_InitEx+0x278>)
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <BSP_LCD_InitEx+0x278>)
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <BSP_LCD_InitEx+0x278>)
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <BSP_LCD_InitEx+0x278>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <BSP_LCD_InitEx+0x278>)
 800144c:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <BSP_LCD_InitEx+0x280>)
 800144e:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001450:	4911      	ldr	r1, [pc, #68]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <BSP_LCD_InitEx+0x278>)
 8001454:	f005 f89c 	bl	8006590 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001458:	4810      	ldr	r0, [pc, #64]	; (800149c <BSP_LCD_InitEx+0x278>)
 800145a:	f004 fdf1 	bl	8006040 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001460:	f003 fca0 	bl	8004da4 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001464:	f000 fe9c 	bl	80021a0 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <BSP_LCD_InitEx+0x284>)
 800146a:	f000 f901 	bl	8001670 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4619      	mov	r1, r3
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff f9f4 	bl	8000860 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3740      	adds	r7, #64	; 0x40
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000574 	.word	0x20000574
 8001488:	40016c00 	.word	0x40016c00
 800148c:	43215e57 	.word	0x43215e57
 8001490:	2000004c 	.word	0x2000004c
 8001494:	20000050 	.word	0x20000050
 8001498:	20000188 	.word	0x20000188
 800149c:	200004cc 	.word	0x200004cc
 80014a0:	20000210 	.word	0x20000210
 80014a4:	40016800 	.word	0x40016800
 80014a8:	2000003c 	.word	0x2000003c

080014ac <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <BSP_LCD_Reset+0x68>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <BSP_LCD_Reset+0x68>)
 80014b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <BSP_LCD_Reset+0x68>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80014ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ce:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <BSP_LCD_Reset+0x6c>)
 80014e2:	f003 fd83 	bl	8004fec <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ec:	480a      	ldr	r0, [pc, #40]	; (8001518 <BSP_LCD_Reset+0x6c>)
 80014ee:	f004 f849 	bl	8005584 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80014f2:	2014      	movs	r0, #20
 80014f4:	f001 fa46 	bl	8002984 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <BSP_LCD_Reset+0x6c>)
 8001500:	f004 f840 	bl	8005584 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8001504:	200a      	movs	r0, #10
 8001506:	f001 fa3d 	bl	8002984 <HAL_Delay>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40022400 	.word	0x40022400

0800151c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <BSP_LCD_GetXSize+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000004c 	.word	0x2000004c

08001534 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <BSP_LCD_GetYSize+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000050 	.word	0x20000050

0800154c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b090      	sub	sp, #64	; 0x40
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800155c:	f7ff ffde 	bl	800151c <BSP_LCD_GetXSize>
 8001560:	4603      	mov	r3, r0
 8001562:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001568:	f7ff ffe4 	bl	8001534 <BSP_LCD_GetYSize>
 800156c:	4603      	mov	r3, r0
 800156e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001578:	23ff      	movs	r3, #255	; 0xff
 800157a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001592:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001598:	2307      	movs	r3, #7
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800159c:	f7ff ffbe 	bl	800151c <BSP_LCD_GetXSize>
 80015a0:	4603      	mov	r3, r0
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80015a4:	f7ff ffc6 	bl	8001534 <BSP_LCD_GetYSize>
 80015a8:	4603      	mov	r3, r0
 80015aa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80015ac:	88fa      	ldrh	r2, [r7, #6]
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <BSP_LCD_LayerDefaultInit+0xb4>)
 80015b6:	f004 fe13 	bl	80061e0 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	4911      	ldr	r1, [pc, #68]	; (8001604 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	3304      	adds	r3, #4
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295
 80015ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80015d0:	88fa      	ldrh	r2, [r7, #6]
 80015d2:	490c      	ldr	r1, [pc, #48]	; (8001604 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3308      	adds	r3, #8
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80015e4:	88fa      	ldrh	r2, [r7, #6]
 80015e6:	4907      	ldr	r1, [pc, #28]	; (8001604 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3740      	adds	r7, #64	; 0x40
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200004cc 	.word	0x200004cc
 8001604:	200001f8 	.word	0x200001f8
 8001608:	2000003c 	.word	0x2000003c

0800160c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <BSP_LCD_SetTextColor+0x28>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <BSP_LCD_SetTextColor+0x2c>)
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	601a      	str	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	200001f4 	.word	0x200001f4
 8001638:	200001f8 	.word	0x200001f8

0800163c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <BSP_LCD_SetBackColor+0x2c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4908      	ldr	r1, [pc, #32]	; (800166c <BSP_LCD_SetBackColor+0x30>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3304      	adds	r3, #4
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	601a      	str	r2, [r3, #0]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200001f4 	.word	0x200001f4
 800166c:	200001f8 	.word	0x200001f8

08001670 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <BSP_LCD_SetFont+0x2c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4908      	ldr	r1, [pc, #32]	; (80016a0 <BSP_LCD_SetFont+0x30>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3308      	adds	r3, #8
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200001f4 	.word	0x200001f4
 80016a0:	200001f8 	.word	0x200001f8

080016a4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <BSP_LCD_Clear+0x48>)
 80016ae:	681c      	ldr	r4, [r3, #0]
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <BSP_LCD_Clear+0x48>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <BSP_LCD_Clear+0x4c>)
 80016b6:	2134      	movs	r1, #52	; 0x34
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	335c      	adds	r3, #92	; 0x5c
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	461d      	mov	r5, r3
 80016c4:	f7ff ff2a 	bl	800151c <BSP_LCD_GetXSize>
 80016c8:	4606      	mov	r6, r0
 80016ca:	f7ff ff33 	bl	8001534 <BSP_LCD_GetYSize>
 80016ce:	4602      	mov	r2, r0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	2300      	movs	r3, #0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	4632      	mov	r2, r6
 80016dc:	4629      	mov	r1, r5
 80016de:	4620      	mov	r0, r4
 80016e0:	f000 fd26 	bl	8002130 <LL_FillBuffer>
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ec:	200001f4 	.word	0x200001f4
 80016f0:	200004cc 	.word	0x200004cc

080016f4 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
 80016fe:	460b      	mov	r3, r1
 8001700:	80bb      	strh	r3, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <BSP_LCD_DisplayChar+0x80>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	491b      	ldr	r1, [pc, #108]	; (8001778 <BSP_LCD_DisplayChar+0x84>)
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	3308      	adds	r3, #8
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <BSP_LCD_DisplayChar+0x80>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4c14      	ldr	r4, [pc, #80]	; (8001778 <BSP_LCD_DisplayChar+0x84>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4423      	add	r3, r4
 8001732:	3308      	adds	r3, #8
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001738:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <BSP_LCD_DisplayChar+0x80>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4c0d      	ldr	r4, [pc, #52]	; (8001778 <BSP_LCD_DisplayChar+0x84>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4423      	add	r3, r4
 800174c:	3308      	adds	r3, #8
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	3307      	adds	r3, #7
 8001754:	2b00      	cmp	r3, #0
 8001756:	da00      	bge.n	800175a <BSP_LCD_DisplayChar+0x66>
 8001758:	3307      	adds	r3, #7
 800175a:	10db      	asrs	r3, r3, #3
 800175c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001760:	18ca      	adds	r2, r1, r3
 8001762:	88b9      	ldrh	r1, [r7, #4]
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fc2a 	bl	8001fc0 <DrawChar>
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	200001f4 	.word	0x200001f4
 8001778:	200001f8 	.word	0x200001f8

0800177c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800177c:	b5b0      	push	{r4, r5, r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	81fb      	strh	r3, [r7, #14]
 800178a:	460b      	mov	r3, r1
 800178c:	81bb      	strh	r3, [r7, #12]
 800178e:	4613      	mov	r3, r2
 8001790:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001792:	2301      	movs	r3, #1
 8001794:	83fb      	strh	r3, [r7, #30]
 8001796:	2300      	movs	r3, #0
 8001798:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80017a6:	e002      	b.n	80017ae <BSP_LCD_DisplayStringAt+0x32>
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	3301      	adds	r3, #1
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	617a      	str	r2, [r7, #20]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f6      	bne.n	80017a8 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80017ba:	f7ff feaf 	bl	800151c <BSP_LCD_GetXSize>
 80017be:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	494f      	ldr	r1, [pc, #316]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3308      	adds	r3, #8
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	889b      	ldrh	r3, [r3, #4]
 80017d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d8:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d01c      	beq.n	800181a <BSP_LCD_DisplayStringAt+0x9e>
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <BSP_LCD_DisplayStringAt+0x98>
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d12e      	bne.n	8001846 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	1ad1      	subs	r1, r2, r3
 80017ee:	4b43      	ldr	r3, [pc, #268]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4843      	ldr	r0, [pc, #268]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4403      	add	r3, r0
 80017fe:	3308      	adds	r3, #8
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	889b      	ldrh	r3, [r3, #4]
 8001804:	fb03 f301 	mul.w	r3, r3, r1
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	4413      	add	r3, r2
 8001810:	83fb      	strh	r3, [r7, #30]
      break;
 8001812:	e01b      	b.n	800184c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001814:	89fb      	ldrh	r3, [r7, #14]
 8001816:	83fb      	strh	r3, [r7, #30]
      break;
 8001818:	e018      	b.n	800184c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4836      	ldr	r0, [pc, #216]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4403      	add	r3, r0
 8001832:	3308      	adds	r3, #8
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	fb11 f303 	smulbb	r3, r1, r3
 800183c:	b29a      	uxth	r2, r3
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	83fb      	strh	r3, [r7, #30]
      break;
 8001844:	e002      	b.n	800184c <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8001846:	89fb      	ldrh	r3, [r7, #14]
 8001848:	83fb      	strh	r3, [r7, #30]
      break;
 800184a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800184c:	8bfb      	ldrh	r3, [r7, #30]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <BSP_LCD_DisplayStringAt+0xde>
 8001852:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da1d      	bge.n	8001896 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800185a:	2301      	movs	r3, #1
 800185c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800185e:	e01a      	b.n	8001896 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	89b9      	ldrh	r1, [r7, #12]
 8001866:	8bfb      	ldrh	r3, [r7, #30]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff43 	bl	80016f4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4923      	ldr	r1, [pc, #140]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	3308      	adds	r3, #8
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	889a      	ldrh	r2, [r3, #4]
 8001884:	8bfb      	ldrh	r3, [r7, #30]
 8001886:	4413      	add	r3, r2
 8001888:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	3301      	adds	r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
    i++;
 8001890:	8bbb      	ldrh	r3, [r7, #28]
 8001892:	3301      	adds	r3, #1
 8001894:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf14      	ite	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	2300      	moveq	r3, #0
 80018a2:	b2dc      	uxtb	r4, r3
 80018a4:	f7ff fe3a 	bl	800151c <BSP_LCD_GetXSize>
 80018a8:	4605      	mov	r5, r0
 80018aa:	8bb9      	ldrh	r1, [r7, #28]
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4813      	ldr	r0, [pc, #76]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4403      	add	r3, r0
 80018bc:	3308      	adds	r3, #8
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	889b      	ldrh	r3, [r3, #4]
 80018c2:	fb03 f301 	mul.w	r3, r3, r1
 80018c6:	1aeb      	subs	r3, r5, r3
 80018c8:	b299      	uxth	r1, r3
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4403      	add	r3, r0
 80018da:	3308      	adds	r3, #8
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	889b      	ldrh	r3, [r3, #4]
 80018e0:	4299      	cmp	r1, r3
 80018e2:	bf2c      	ite	cs
 80018e4:	2301      	movcs	r3, #1
 80018e6:	2300      	movcc	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4023      	ands	r3, r4
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1b6      	bne.n	8001860 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdb0      	pop	{r4, r5, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200001f4 	.word	0x200001f4
 8001900:	200001f8 	.word	0x200001f8

08001904 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af02      	add	r7, sp, #8
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
 800190e:	460b      	mov	r3, r1
 8001910:	80bb      	strh	r3, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <BSP_LCD_DrawHLine+0x70>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <BSP_LCD_DrawHLine+0x74>)
 8001920:	2134      	movs	r1, #52	; 0x34
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	335c      	adds	r3, #92	; 0x5c
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	f7ff fdf6 	bl	800151c <BSP_LCD_GetXSize>
 8001930:	4602      	mov	r2, r0
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	fb03 f202 	mul.w	r2, r3, r2
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4423      	add	r3, r4
 8001940:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <BSP_LCD_DrawHLine+0x70>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	68fc      	ldr	r4, [r7, #12]
 8001948:	887d      	ldrh	r5, [r7, #2]
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <BSP_LCD_DrawHLine+0x70>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	490b      	ldr	r1, [pc, #44]	; (800197c <BSP_LCD_DrawHLine+0x78>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	462a      	mov	r2, r5
 8001966:	4621      	mov	r1, r4
 8001968:	f000 fbe2 	bl	8002130 <LL_FillBuffer>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	200001f4 	.word	0x200001f4
 8001978:	200004cc 	.word	0x200004cc
 800197c:	200001f8 	.word	0x200001f8

08001980 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af02      	add	r7, sp, #8
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
 800198a:	460b      	mov	r3, r1
 800198c:	80bb      	strh	r3, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <BSP_LCD_DrawVLine+0x78>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a18      	ldr	r2, [pc, #96]	; (80019fc <BSP_LCD_DrawVLine+0x7c>)
 800199c:	2134      	movs	r1, #52	; 0x34
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	335c      	adds	r3, #92	; 0x5c
 80019a6:	681c      	ldr	r4, [r3, #0]
 80019a8:	f7ff fdb8 	bl	800151c <BSP_LCD_GetXSize>
 80019ac:	4602      	mov	r2, r0
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	fb03 f202 	mul.w	r2, r3, r2
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4423      	add	r3, r4
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <BSP_LCD_DrawVLine+0x78>)
 80019c0:	681c      	ldr	r4, [r3, #0]
 80019c2:	68fd      	ldr	r5, [r7, #12]
 80019c4:	887e      	ldrh	r6, [r7, #2]
 80019c6:	f7ff fda9 	bl	800151c <BSP_LCD_GetXSize>
 80019ca:	4603      	mov	r3, r0
 80019cc:	1e59      	subs	r1, r3, #1
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <BSP_LCD_DrawVLine+0x78>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	480b      	ldr	r0, [pc, #44]	; (8001a00 <BSP_LCD_DrawVLine+0x80>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4403      	add	r3, r0
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	9100      	str	r1, [sp, #0]
 80019e4:	4633      	mov	r3, r6
 80019e6:	2201      	movs	r2, #1
 80019e8:	4629      	mov	r1, r5
 80019ea:	4620      	mov	r0, r4
 80019ec:	f000 fba0 	bl	8002130 <LL_FillBuffer>
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f8:	200001f4 	.word	0x200001f4
 80019fc:	200004cc 	.word	0x200004cc
 8001a00:	200001f8 	.word	0x200001f8

08001a04 <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	80fb      	strh	r3, [r7, #6]
 8001a16:	4603      	mov	r3, r0
 8001a18:	80bb      	strh	r3, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	88b9      	ldrh	r1, [r7, #4]
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff6b 	bl	8001904 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001a2e:	88ba      	ldrh	r2, [r7, #4]
 8001a30:	883b      	ldrh	r3, [r7, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	b299      	uxth	r1, r3
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff62 	bl	8001904 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001a40:	883a      	ldrh	r2, [r7, #0]
 8001a42:	88b9      	ldrh	r1, [r7, #4]
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff9a 	bl	8001980 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	4413      	add	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	883a      	ldrh	r2, [r7, #0]
 8001a56:	88b9      	ldrh	r1, [r7, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff91 	bl	8001980 <BSP_LCD_DrawVLine>
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd90      	pop	{r4, r7, pc}
	...

08001a68 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
 8001a72:	460b      	mov	r3, r1
 8001a74:	80bb      	strh	r3, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	f1c3 0303 	rsb	r3, r3, #3
 8001a82:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001a8c:	e0cf      	b.n	8001c2e <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4413      	add	r3, r2
 8001a96:	b298      	uxth	r0, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	88ba      	ldrh	r2, [r7, #4]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	b29c      	uxth	r4, r3
 8001aa2:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <BSP_LCD_DrawCircle+0x1d8>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4967      	ldr	r1, [pc, #412]	; (8001c44 <BSP_LCD_DrawCircle+0x1dc>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	f000 fa5c 	bl	8001f74 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	b298      	uxth	r0, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	88ba      	ldrh	r2, [r7, #4]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	b29c      	uxth	r4, r3
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <BSP_LCD_DrawCircle+0x1d8>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	495b      	ldr	r1, [pc, #364]	; (8001c44 <BSP_LCD_DrawCircle+0x1dc>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	f000 fa45 	bl	8001f74 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	4413      	add	r3, r2
 8001af2:	b298      	uxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	88ba      	ldrh	r2, [r7, #4]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	b29c      	uxth	r4, r3
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <BSP_LCD_DrawCircle+0x1d8>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4950      	ldr	r1, [pc, #320]	; (8001c44 <BSP_LCD_DrawCircle+0x1dc>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4621      	mov	r1, r4
 8001b14:	f000 fa2e 	bl	8001f74 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	88fa      	ldrh	r2, [r7, #6]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	b298      	uxth	r0, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	88ba      	ldrh	r2, [r7, #4]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b29c      	uxth	r4, r3
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <BSP_LCD_DrawCircle+0x1d8>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4944      	ldr	r1, [pc, #272]	; (8001c44 <BSP_LCD_DrawCircle+0x1dc>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4621      	mov	r1, r4
 8001b42:	f000 fa17 	bl	8001f74 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b298      	uxth	r0, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	b29c      	uxth	r4, r3
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <BSP_LCD_DrawCircle+0x1d8>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4939      	ldr	r1, [pc, #228]	; (8001c44 <BSP_LCD_DrawCircle+0x1dc>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4621      	mov	r1, r4
 8001b70:	f000 fa00 	bl	8001f74 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	b298      	uxth	r0, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	88bb      	ldrh	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	b29c      	uxth	r4, r3
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <BSP_LCD_DrawCircle+0x1d8>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	492d      	ldr	r1, [pc, #180]	; (8001c44 <BSP_LCD_DrawCircle+0x1dc>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	f000 f9e9 	bl	8001f74 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b298      	uxth	r0, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	88bb      	ldrh	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b29c      	uxth	r4, r3
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <BSP_LCD_DrawCircle+0x1d8>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4922      	ldr	r1, [pc, #136]	; (8001c44 <BSP_LCD_DrawCircle+0x1dc>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f000 f9d2 	bl	8001f74 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	b298      	uxth	r0, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	88bb      	ldrh	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	b29c      	uxth	r4, r3
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <BSP_LCD_DrawCircle+0x1d8>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4916      	ldr	r1, [pc, #88]	; (8001c44 <BSP_LCD_DrawCircle+0x1dc>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	f000 f9bb 	bl	8001f74 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da06      	bge.n	8001c12 <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	009a      	lsls	r2, r3, #2
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3306      	adds	r3, #6
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e00a      	b.n	8001c28 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	009a      	lsls	r2, r3, #2
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	330a      	adds	r3, #10
 8001c20:	617b      	str	r3, [r7, #20]
      CurY--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	f67f af2b 	bls.w	8001a8e <BSP_LCD_DrawCircle+0x26>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	200001f4 	.word	0x200001f4
 8001c44:	200001f8 	.word	0x200001f8

08001c48 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af02      	add	r7, sp, #8
 8001c50:	4604      	mov	r4, r0
 8001c52:	4608      	mov	r0, r1
 8001c54:	4611      	mov	r1, r2
 8001c56:	461a      	mov	r2, r3
 8001c58:	4623      	mov	r3, r4
 8001c5a:	80fb      	strh	r3, [r7, #6]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80bb      	strh	r3, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
 8001c64:	4613      	mov	r3, r2
 8001c66:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <BSP_LCD_FillRect+0xa8>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4920      	ldr	r1, [pc, #128]	; (8001cf4 <BSP_LCD_FillRect+0xac>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fcc4 	bl	800160c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <BSP_LCD_FillRect+0xa8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <BSP_LCD_FillRect+0xb0>)
 8001c8a:	2134      	movs	r1, #52	; 0x34
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	335c      	adds	r3, #92	; 0x5c
 8001c94:	681c      	ldr	r4, [r3, #0]
 8001c96:	f7ff fc41 	bl	800151c <BSP_LCD_GetXSize>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4423      	add	r3, r4
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <BSP_LCD_FillRect+0xa8>)
 8001cae:	681c      	ldr	r4, [r3, #0]
 8001cb0:	68fd      	ldr	r5, [r7, #12]
 8001cb2:	887e      	ldrh	r6, [r7, #2]
 8001cb4:	f8b7 8000 	ldrh.w	r8, [r7]
 8001cb8:	f7ff fc30 	bl	800151c <BSP_LCD_GetXSize>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	1ad1      	subs	r1, r2, r3
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <BSP_LCD_FillRect+0xa8>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <BSP_LCD_FillRect+0xac>)
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4403      	add	r3, r0
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	9100      	str	r1, [sp, #0]
 8001cd8:	4643      	mov	r3, r8
 8001cda:	4632      	mov	r2, r6
 8001cdc:	4629      	mov	r1, r5
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f000 fa26 	bl	8002130 <LL_FillBuffer>
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cee:	bf00      	nop
 8001cf0:	200001f4 	.word	0x200001f4
 8001cf4:	200001f8 	.word	0x200001f8
 8001cf8:	200004cc 	.word	0x200004cc

08001cfc <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
 8001d06:	460b      	mov	r3, r1
 8001d08:	80bb      	strh	r3, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	f1c3 0303 	rsb	r3, r3, #3
 8001d16:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d20:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <BSP_LCD_FillCircle+0x138>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4944      	ldr	r1, [pc, #272]	; (8001e38 <BSP_LCD_FillCircle+0x13c>)
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fc6a 	bl	800160c <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001d38:	e061      	b.n	8001dfe <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d021      	beq.n	8001d84 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	b298      	uxth	r0, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	b299      	uxth	r1, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f7ff fdd1 	bl	8001904 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	88fa      	ldrh	r2, [r7, #6]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	b298      	uxth	r0, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	88ba      	ldrh	r2, [r7, #4]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	b299      	uxth	r1, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f7ff fdc0 	bl	8001904 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d021      	beq.n	8001dce <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	88fa      	ldrh	r2, [r7, #6]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	b298      	uxth	r0, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	88ba      	ldrh	r2, [r7, #4]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	f7ff fdac 	bl	8001904 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	88fa      	ldrh	r2, [r7, #6]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	b298      	uxth	r0, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	88bb      	ldrh	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b299      	uxth	r1, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f7ff fd9b 	bl	8001904 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	da06      	bge.n	8001de2 <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	009a      	lsls	r2, r3, #2
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	4413      	add	r3, r2
 8001ddc:	3306      	adds	r3, #6
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	e00a      	b.n	8001df8 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	009a      	lsls	r2, r3, #2
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4413      	add	r3, r2
 8001dee:	330a      	adds	r3, #10
 8001df0:	617b      	str	r3, [r7, #20]
      CurY--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d999      	bls.n	8001d3a <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <BSP_LCD_FillCircle+0x138>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	490b      	ldr	r1, [pc, #44]	; (8001e38 <BSP_LCD_FillCircle+0x13c>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fbf7 	bl	800160c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	88b9      	ldrh	r1, [r7, #4]
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fe1f 	bl	8001a68 <BSP_LCD_DrawCircle>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200001f4 	.word	0x200001f4
 8001e38:	200001f8 	.word	0x200001f8

08001e3c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d80d      	bhi.n	8001e68 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	2215      	movs	r2, #21
 8001e5e:	2100      	movs	r1, #0
 8001e60:	480a      	ldr	r0, [pc, #40]	; (8001e8c <DSI_IO_WriteCmd+0x50>)
 8001e62:	f002 ffdb 	bl	8004e1c <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001e66:	e00d      	b.n	8001e84 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	9200      	str	r2, [sp, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2239      	movs	r2, #57	; 0x39
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <DSI_IO_WriteCmd+0x50>)
 8001e80:	f002 ffee 	bl	8004e60 <HAL_DSI_LongWrite>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000574 	.word	0x20000574

08001e90 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001e94:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a31      	ldr	r2, [pc, #196]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001eac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001ec4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ec8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001ed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ed4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001edc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ef8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001f00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f04:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001f0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001f24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f28:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <BSP_LCD_MspInit+0xd0>)
 8001f30:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001f34:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2103      	movs	r1, #3
 8001f3a:	2058      	movs	r0, #88	; 0x58
 8001f3c:	f001 fb4b 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f40:	2058      	movs	r0, #88	; 0x58
 8001f42:	f001 fb64 	bl	800360e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2103      	movs	r1, #3
 8001f4a:	205a      	movs	r0, #90	; 0x5a
 8001f4c:	f001 fb43 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f50:	205a      	movs	r0, #90	; 0x5a
 8001f52:	f001 fb5c 	bl	800360e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2103      	movs	r1, #3
 8001f5a:	2062      	movs	r0, #98	; 0x62
 8001f5c:	f001 fb3b 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001f60:	2062      	movs	r0, #98	; 0x62
 8001f62:	f001 fb54 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001f74:	b5b0      	push	{r4, r5, r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	603a      	str	r2, [r7, #0]
 8001f7e:	80fb      	strh	r3, [r7, #6]
 8001f80:	460b      	mov	r3, r1
 8001f82:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <BSP_LCD_DrawPixel+0x44>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <BSP_LCD_DrawPixel+0x48>)
 8001f8a:	2134      	movs	r1, #52	; 0x34
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	335c      	adds	r3, #92	; 0x5c
 8001f94:	681c      	ldr	r4, [r3, #0]
 8001f96:	88bd      	ldrh	r5, [r7, #4]
 8001f98:	f7ff fac0 	bl	800151c <BSP_LCD_GetXSize>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	fb03 f205 	mul.w	r2, r3, r5
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4423      	add	r3, r4
 8001faa:	461a      	mov	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb8:	200001f4 	.word	0x200001f4
 8001fbc:	200004cc 	.word	0x200004cc

08001fc0 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	603a      	str	r2, [r7, #0]
 8001fca:	80fb      	strh	r3, [r7, #6]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <DrawChar+0x168>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4953      	ldr	r1, [pc, #332]	; (800212c <DrawChar+0x16c>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3308      	adds	r3, #8
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	88db      	ldrh	r3, [r3, #6]
 8001fee:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001ff0:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <DrawChar+0x168>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <DrawChar+0x16c>)
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3308      	adds	r3, #8
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	889b      	ldrh	r3, [r3, #4]
 8002006:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8002008:	8a3b      	ldrh	r3, [r7, #16]
 800200a:	3307      	adds	r3, #7
 800200c:	2b00      	cmp	r3, #0
 800200e:	da00      	bge.n	8002012 <DrawChar+0x52>
 8002010:	3307      	adds	r3, #7
 8002012:	10db      	asrs	r3, r3, #3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	b2da      	uxtb	r2, r3
 800201a:	8a3b      	ldrh	r3, [r7, #16]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e076      	b.n	8002116 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002028:	8a3b      	ldrh	r3, [r7, #16]
 800202a:	3307      	adds	r3, #7
 800202c:	2b00      	cmp	r3, #0
 800202e:	da00      	bge.n	8002032 <DrawChar+0x72>
 8002030:	3307      	adds	r3, #7
 8002032:	10db      	asrs	r3, r3, #3
 8002034:	461a      	mov	r2, r3
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fb03 f302 	mul.w	r3, r3, r2
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	4413      	add	r3, r2
 8002040:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002042:	8a3b      	ldrh	r3, [r7, #16]
 8002044:	3307      	adds	r3, #7
 8002046:	2b00      	cmp	r3, #0
 8002048:	da00      	bge.n	800204c <DrawChar+0x8c>
 800204a:	3307      	adds	r3, #7
 800204c:	10db      	asrs	r3, r3, #3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d002      	beq.n	8002058 <DrawChar+0x98>
 8002052:	2b02      	cmp	r3, #2
 8002054:	d004      	beq.n	8002060 <DrawChar+0xa0>
 8002056:	e00c      	b.n	8002072 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	617b      	str	r3, [r7, #20]
      break;
 800205e:	e016      	b.n	800208e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	3201      	adds	r2, #1
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
      break;
 8002070:	e00d      	b.n	800208e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	041a      	lsls	r2, r3, #16
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3301      	adds	r3, #1
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	4313      	orrs	r3, r2
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	3202      	adds	r2, #2
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
      break;
 800208c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	e036      	b.n	8002102 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002094:	8a3a      	ldrh	r2, [r7, #16]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	1ad2      	subs	r2, r2, r3
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	4413      	add	r3, r2
 800209e:	3b01      	subs	r3, #1
 80020a0:	2201      	movs	r2, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d012      	beq.n	80020d6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	4413      	add	r3, r2
 80020b8:	b298      	uxth	r0, r3
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <DrawChar+0x168>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	491b      	ldr	r1, [pc, #108]	; (800212c <DrawChar+0x16c>)
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	88bb      	ldrh	r3, [r7, #4]
 80020ce:	4619      	mov	r1, r3
 80020d0:	f7ff ff50 	bl	8001f74 <BSP_LCD_DrawPixel>
 80020d4:	e012      	b.n	80020fc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4413      	add	r3, r2
 80020de:	b298      	uxth	r0, r3
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <DrawChar+0x168>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4911      	ldr	r1, [pc, #68]	; (800212c <DrawChar+0x16c>)
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3304      	adds	r3, #4
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	88bb      	ldrh	r3, [r7, #4]
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7ff ff3c 	bl	8001f74 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	3301      	adds	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	8a3b      	ldrh	r3, [r7, #16]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	429a      	cmp	r2, r3
 8002108:	d3c4      	bcc.n	8002094 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800210a:	88bb      	ldrh	r3, [r7, #4]
 800210c:	3301      	adds	r3, #1
 800210e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	3301      	adds	r3, #1
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	8a7b      	ldrh	r3, [r7, #18]
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	429a      	cmp	r2, r3
 800211c:	d384      	bcc.n	8002028 <DrawChar+0x68>
  }
}
 800211e:	bf00      	nop
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200001f4 	.word	0x200001f4
 800212c:	200001f8 	.word	0x200001f8

08002130 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <LL_FillBuffer+0x68>)
 8002140:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002144:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <LL_FillBuffer+0x68>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <LL_FillBuffer+0x68>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <LL_FillBuffer+0x68>)
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <LL_FillBuffer+0x6c>)
 8002156:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8002158:	480f      	ldr	r0, [pc, #60]	; (8002198 <LL_FillBuffer+0x68>)
 800215a:	f001 fc2f 	bl	80039bc <HAL_DMA2D_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d115      	bne.n	8002190 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	480c      	ldr	r0, [pc, #48]	; (8002198 <LL_FillBuffer+0x68>)
 8002168:	f001 fd96 	bl	8003c98 <HAL_DMA2D_ConfigLayer>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10e      	bne.n	8002190 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69f9      	ldr	r1, [r7, #28]
 800217c:	4806      	ldr	r0, [pc, #24]	; (8002198 <LL_FillBuffer+0x68>)
 800217e:	f001 fc77 	bl	8003a70 <HAL_DMA2D_Start>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002188:	210a      	movs	r1, #10
 800218a:	4803      	ldr	r0, [pc, #12]	; (8002198 <LL_FillBuffer+0x68>)
 800218c:	f001 fc9b 	bl	8003ac6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000474 	.word	0x20000474
 800219c:	4002b000 	.word	0x4002b000

080021a0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <BSP_SDRAM_Init+0xac>)
 80021a6:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <BSP_SDRAM_Init+0xb0>)
 80021a8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80021aa:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <BSP_SDRAM_Init+0xb4>)
 80021ac:	2202      	movs	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80021b0:	4b28      	ldr	r3, [pc, #160]	; (8002254 <BSP_SDRAM_Init+0xb4>)
 80021b2:	2207      	movs	r2, #7
 80021b4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <BSP_SDRAM_Init+0xb4>)
 80021b8:	2204      	movs	r2, #4
 80021ba:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <BSP_SDRAM_Init+0xb4>)
 80021be:	2207      	movs	r2, #7
 80021c0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <BSP_SDRAM_Init+0xb4>)
 80021c4:	2202      	movs	r2, #2
 80021c6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <BSP_SDRAM_Init+0xb4>)
 80021ca:	2202      	movs	r2, #2
 80021cc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <BSP_SDRAM_Init+0xb4>)
 80021d0:	2202      	movs	r2, #2
 80021d2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <BSP_SDRAM_Init+0xac>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <BSP_SDRAM_Init+0xac>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <BSP_SDRAM_Init+0xac>)
 80021e2:	2204      	movs	r2, #4
 80021e4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <BSP_SDRAM_Init+0xac>)
 80021e8:	2220      	movs	r2, #32
 80021ea:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <BSP_SDRAM_Init+0xac>)
 80021ee:	2240      	movs	r2, #64	; 0x40
 80021f0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <BSP_SDRAM_Init+0xac>)
 80021f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021f8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <BSP_SDRAM_Init+0xac>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <BSP_SDRAM_Init+0xac>)
 8002202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002206:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <BSP_SDRAM_Init+0xac>)
 800220a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <BSP_SDRAM_Init+0xac>)
 8002212:	2200      	movs	r2, #0
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002216:	2100      	movs	r1, #0
 8002218:	480c      	ldr	r0, [pc, #48]	; (800224c <BSP_SDRAM_Init+0xac>)
 800221a:	f000 f87f 	bl	800231c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800221e:	490d      	ldr	r1, [pc, #52]	; (8002254 <BSP_SDRAM_Init+0xb4>)
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <BSP_SDRAM_Init+0xac>)
 8002222:	f006 fc06 	bl	8008a32 <HAL_SDRAM_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <BSP_SDRAM_Init+0xb8>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e002      	b.n	800223a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <BSP_SDRAM_Init+0xb8>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800223a:	f240 6003 	movw	r0, #1539	; 0x603
 800223e:	f000 f80d 	bl	800225c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <BSP_SDRAM_Init+0xb8>)
 8002244:	781b      	ldrb	r3, [r3, #0]
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000590 	.word	0x20000590
 8002250:	a0000140 	.word	0xa0000140
 8002254:	200002a0 	.word	0x200002a0
 8002258:	20000054 	.word	0x20000054

0800225c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002270:	2210      	movs	r2, #16
 8002272:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002276:	2201      	movs	r2, #1
 8002278:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800227c:	2200      	movs	r2, #0
 800227e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002284:	4923      	ldr	r1, [pc, #140]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002286:	4824      	ldr	r0, [pc, #144]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002288:	f006 fc07 	bl	8008a9a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800228c:	2001      	movs	r0, #1
 800228e:	f000 fb79 	bl	8002984 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800229a:	2210      	movs	r2, #16
 800229c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80022aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ae:	4919      	ldr	r1, [pc, #100]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b0:	4819      	ldr	r0, [pc, #100]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022b2:	f006 fbf2 	bl	8008a9a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b8:	2203      	movs	r2, #3
 80022ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022be:	2210      	movs	r2, #16
 80022c0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022c4:	2208      	movs	r2, #8
 80022c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d2:	4910      	ldr	r1, [pc, #64]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022d4:	4810      	ldr	r0, [pc, #64]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022d6:	f006 fbe0 	bl	8008a9a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80022da:	f44f 730c 	mov.w	r3, #560	; 0x230
 80022de:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022e2:	2204      	movs	r2, #4
 80022e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022e8:	2210      	movs	r2, #16
 80022ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fc:	4905      	ldr	r1, [pc, #20]	; (8002314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002300:	f006 fbcb 	bl	8008a9a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4804      	ldr	r0, [pc, #16]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002308:	f006 fbf2 	bl	8008af0 <HAL_SDRAM_ProgramRefreshRate>
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200002bc 	.word	0x200002bc
 8002318:	20000590 	.word	0x20000590

0800231c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800231c:	b580      	push	{r7, lr}
 800231e:	b090      	sub	sp, #64	; 0x40
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002326:	4b71      	ldr	r3, [pc, #452]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	4a70      	ldr	r2, [pc, #448]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6393      	str	r3, [r2, #56]	; 0x38
 8002332:	4b6e      	ldr	r3, [pc, #440]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800233e:	4b6b      	ldr	r3, [pc, #428]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a6a      	ldr	r2, [pc, #424]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b68      	ldr	r3, [pc, #416]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002356:	4b65      	ldr	r3, [pc, #404]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a64      	ldr	r2, [pc, #400]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b62      	ldr	r3, [pc, #392]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800236e:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a5e      	ldr	r2, [pc, #376]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002374:	f043 0310 	orr.w	r3, r3, #16
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b5c      	ldr	r3, [pc, #368]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002386:	4b59      	ldr	r3, [pc, #356]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a58      	ldr	r2, [pc, #352]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 800238c:	f043 0320 	orr.w	r3, r3, #32
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b56      	ldr	r3, [pc, #344]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a52      	ldr	r2, [pc, #328]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 80023a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b50      	ldr	r3, [pc, #320]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b6:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a4c      	ldr	r2, [pc, #304]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a46      	ldr	r2, [pc, #280]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b44      	ldr	r3, [pc, #272]	; (80024ec <BSP_SDRAM_MspInit+0x1d0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80023f2:	230c      	movs	r3, #12
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80023f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80023fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002400:	4619      	mov	r1, r3
 8002402:	483b      	ldr	r0, [pc, #236]	; (80024f0 <BSP_SDRAM_MspInit+0x1d4>)
 8002404:	f002 fdf2 	bl	8004fec <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002408:	f64f 7383 	movw	r3, #65411	; 0xff83
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800240e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002412:	4619      	mov	r1, r3
 8002414:	4837      	ldr	r0, [pc, #220]	; (80024f4 <BSP_SDRAM_MspInit+0x1d8>)
 8002416:	f002 fde9 	bl	8004fec <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800241a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002424:	4619      	mov	r1, r3
 8002426:	4834      	ldr	r0, [pc, #208]	; (80024f8 <BSP_SDRAM_MspInit+0x1dc>)
 8002428:	f002 fde0 	bl	8004fec <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 800242c:	f248 1337 	movw	r3, #33079	; 0x8137
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002436:	4619      	mov	r1, r3
 8002438:	4830      	ldr	r0, [pc, #192]	; (80024fc <BSP_SDRAM_MspInit+0x1e0>)
 800243a:	f002 fdd7 	bl	8004fec <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800243e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002448:	4619      	mov	r1, r3
 800244a:	482d      	ldr	r0, [pc, #180]	; (8002500 <BSP_SDRAM_MspInit+0x1e4>)
 800244c:	f002 fdce 	bl	8004fec <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002450:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8002456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245a:	4619      	mov	r1, r3
 800245c:	4829      	ldr	r0, [pc, #164]	; (8002504 <BSP_SDRAM_MspInit+0x1e8>)
 800245e:	f002 fdc5 	bl	8004fec <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 8002464:	2200      	movs	r2, #0
 8002466:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 8002470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002474:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 8002478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800247c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 8002480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002484:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 8002488:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800248c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 8002490:	2200      	movs	r2, #0
 8002492:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002494:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 8002496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800249a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 80024a4:	2203      	movs	r2, #3
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 80024b6:	4a15      	ldr	r2, [pc, #84]	; (800250c <BSP_SDRAM_MspInit+0x1f0>)
 80024b8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
 80024c0:	4a11      	ldr	r2, [pc, #68]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80024c6:	4810      	ldr	r0, [pc, #64]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 80024c8:	f001 f96a 	bl	80037a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80024cc:	480e      	ldr	r0, [pc, #56]	; (8002508 <BSP_SDRAM_MspInit+0x1ec>)
 80024ce:	f001 f8b9 	bl	8003644 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	210f      	movs	r1, #15
 80024d6:	2038      	movs	r0, #56	; 0x38
 80024d8:	f001 f87d 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80024dc:	2038      	movs	r0, #56	; 0x38
 80024de:	f001 f896 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 80024e2:	bf00      	nop
 80024e4:	3740      	adds	r7, #64	; 0x40
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40021400 	.word	0x40021400
 80024fc:	40021800 	.word	0x40021800
 8002500:	40021c00 	.word	0x40021c00
 8002504:	40022000 	.word	0x40022000
 8002508:	200002cc 	.word	0x200002cc
 800250c:	40026410 	.word	0x40026410

08002510 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	460a      	mov	r2, r1
 800251a:	80fb      	strh	r3, [r7, #6]
 800251c:	4613      	mov	r3, r2
 800251e:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <BSP_TS_Init+0xb0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <BSP_TS_Init+0xb4>)
 800252e:	7812      	ldrb	r2, [r2, #0]
 8002530:	b292      	uxth	r2, r2
 8002532:	4610      	mov	r0, r2
 8002534:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <BSP_TS_Init+0xb0>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2054      	movs	r0, #84	; 0x54
 800253c:	4798      	blx	r3
 800253e:	4603      	mov	r3, r0
 8002540:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002542:	7b7b      	ldrb	r3, [r7, #13]
 8002544:	2b11      	cmp	r3, #17
 8002546:	d009      	beq.n	800255c <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <BSP_TS_Init+0xb0>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2070      	movs	r0, #112	; 0x70
 800254e:	4798      	blx	r3
 8002550:	4603      	mov	r3, r0
 8002552:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <BSP_TS_Init+0xb4>)
 8002556:	2270      	movs	r2, #112	; 0x70
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e002      	b.n	8002562 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <BSP_TS_Init+0xb4>)
 800255e:	2254      	movs	r2, #84	; 0x54
 8002560:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8002562:	7b7b      	ldrb	r3, [r7, #13]
 8002564:	2b11      	cmp	r3, #17
 8002566:	d002      	beq.n	800256e <BSP_TS_Init+0x5e>
 8002568:	7bbb      	ldrb	r3, [r7, #14]
 800256a:	2b11      	cmp	r3, #17
 800256c:	d121      	bne.n	80025b2 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <BSP_TS_Init+0xb8>)
 8002570:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <BSP_TS_Init+0xb0>)
 8002572:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	88bb      	ldrh	r3, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d203      	bcs.n	8002584 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <BSP_TS_Init+0xbc>)
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e002      	b.n	800258a <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <BSP_TS_Init+0xbc>)
 8002586:	220c      	movs	r2, #12
 8002588:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d112      	bne.n	80025b6 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <BSP_TS_Init+0xb8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <BSP_TS_Init+0xb4>)
 8002598:	7812      	ldrb	r2, [r2, #0]
 800259a:	b292      	uxth	r2, r2
 800259c:	4610      	mov	r0, r2
 800259e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <BSP_TS_Init+0xb8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <BSP_TS_Init+0xb4>)
 80025a8:	7812      	ldrb	r2, [r2, #0]
 80025aa:	b292      	uxth	r2, r2
 80025ac:	4610      	mov	r0, r2
 80025ae:	4798      	blx	r3
    if(ts_status == TS_OK)
 80025b0:	e001      	b.n	80025b6 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80025b2:	2303      	movs	r3, #3
 80025b4:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000331 	.word	0x20000331
 80025c8:	2000032c 	.word	0x2000032c
 80025cc:	20000330 	.word	0x20000330

080025d0 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 80025da:	f000 f94f 	bl	800287c <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 80025de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e2:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025e8:	2302      	movs	r3, #2
 80025ea:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <BSP_TS_ITConfig+0x54>)
 80025ee:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80025f0:	463b      	mov	r3, r7
 80025f2:	4619      	mov	r1, r3
 80025f4:	480c      	ldr	r0, [pc, #48]	; (8002628 <BSP_TS_ITConfig+0x58>)
 80025f6:	f002 fcf9 	bl	8004fec <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 80025fa:	2200      	movs	r2, #0
 80025fc:	210f      	movs	r1, #15
 80025fe:	2028      	movs	r0, #40	; 0x28
 8002600:	f000 ffe9 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002604:	2028      	movs	r0, #40	; 0x28
 8002606:	f001 f802 	bl	800360e <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <BSP_TS_ITConfig+0x5c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4a07      	ldr	r2, [pc, #28]	; (8002630 <BSP_TS_ITConfig+0x60>)
 8002612:	7812      	ldrb	r2, [r2, #0]
 8002614:	b292      	uxth	r2, r2
 8002616:	4610      	mov	r0, r2
 8002618:	4798      	blx	r3

  return (ts_status);
 800261a:	7dfb      	ldrb	r3, [r7, #23]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	10210000 	.word	0x10210000
 8002628:	40022000 	.word	0x40022000
 800262c:	2000032c 	.word	0x2000032c
 8002630:	20000331 	.word	0x20000331

08002634 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002640:	4b89      	ldr	r3, [pc, #548]	; (8002868 <BSP_TS_GetState+0x234>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	4a89      	ldr	r2, [pc, #548]	; (800286c <BSP_TS_GetState+0x238>)
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	b292      	uxth	r2, r2
 800264c:	4610      	mov	r0, r2
 800264e:	4798      	blx	r3
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80fe 	beq.w	800285e <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e0f3      	b.n	8002850 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8002668:	4b7f      	ldr	r3, [pc, #508]	; (8002868 <BSP_TS_GetState+0x234>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	4a7f      	ldr	r2, [pc, #508]	; (800286c <BSP_TS_GetState+0x238>)
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	b290      	uxth	r0, r2
 8002674:	f107 0110 	add.w	r1, r7, #16
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	0052      	lsls	r2, r2, #1
 800267c:	188c      	adds	r4, r1, r2
 800267e:	f107 010c 	add.w	r1, r7, #12
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	0052      	lsls	r2, r2, #1
 8002686:	440a      	add	r2, r1
 8002688:	4621      	mov	r1, r4
 800268a:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <BSP_TS_GetState+0x23c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01d      	beq.n	80026d4 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	f107 0220 	add.w	r2, r7, #32
 80026a0:	4413      	add	r3, r2
 80026a2:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80026a6:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	f107 0220 	add.w	r2, r7, #32
 80026b0:	4413      	add	r3, r2
 80026b2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	f107 0120 	add.w	r1, r7, #32
 80026be:	440b      	add	r3, r1
 80026c0:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	f107 0220 	add.w	r2, r7, #32
 80026cc:	4413      	add	r3, r2
 80026ce:	8b3a      	ldrh	r2, [r7, #24]
 80026d0:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80026d4:	4b66      	ldr	r3, [pc, #408]	; (8002870 <BSP_TS_GetState+0x23c>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d011      	beq.n	8002704 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	f107 0220 	add.w	r2, r7, #32
 80026e8:	4413      	add	r3, r2
 80026ea:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80026ee:	f240 331f 	movw	r3, #799	; 0x31f
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	f107 0120 	add.w	r1, r7, #32
 80026fe:	440b      	add	r3, r1
 8002700:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002704:	4b5a      	ldr	r3, [pc, #360]	; (8002870 <BSP_TS_GetState+0x23c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d011      	beq.n	8002734 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	f107 0220 	add.w	r2, r7, #32
 8002718:	4413      	add	r3, r2
 800271a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800271e:	f240 13df 	movw	r3, #479	; 0x1df
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	b29a      	uxth	r2, r3
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	f107 0120 	add.w	r1, r7, #32
 800272e:	440b      	add	r3, r1
 8002730:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	f107 0220 	add.w	r2, r7, #32
 800273c:	4413      	add	r3, r2
 800273e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002742:	4619      	mov	r1, r3
 8002744:	4a4b      	ldr	r2, [pc, #300]	; (8002874 <BSP_TS_GetState+0x240>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	4299      	cmp	r1, r3
 800274e:	d90e      	bls.n	800276e <BSP_TS_GetState+0x13a>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	f107 0220 	add.w	r2, r7, #32
 8002758:	4413      	add	r3, r2
 800275a:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800275e:	4945      	ldr	r1, [pc, #276]	; (8002874 <BSP_TS_GetState+0x240>)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002766:	b29b      	uxth	r3, r3
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	b29b      	uxth	r3, r3
 800276c:	e00d      	b.n	800278a <BSP_TS_GetState+0x156>
 800276e:	4a41      	ldr	r2, [pc, #260]	; (8002874 <BSP_TS_GetState+0x240>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	b29a      	uxth	r2, r3
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	f107 0120 	add.w	r1, r7, #32
 8002780:	440b      	add	r3, r1
 8002782:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	b29b      	uxth	r3, r3
 800278a:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	f107 0220 	add.w	r2, r7, #32
 8002794:	4413      	add	r3, r2
 8002796:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800279a:	4619      	mov	r1, r3
 800279c:	4a36      	ldr	r2, [pc, #216]	; (8002878 <BSP_TS_GetState+0x244>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	4299      	cmp	r1, r3
 80027a6:	d90e      	bls.n	80027c6 <BSP_TS_GetState+0x192>
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	f107 0220 	add.w	r2, r7, #32
 80027b0:	4413      	add	r3, r2
 80027b2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80027b6:	4930      	ldr	r1, [pc, #192]	; (8002878 <BSP_TS_GetState+0x244>)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	e00d      	b.n	80027e2 <BSP_TS_GetState+0x1ae>
 80027c6:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <BSP_TS_GetState+0x244>)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	f107 0120 	add.w	r1, r7, #32
 80027d8:	440b      	add	r3, r1
 80027da:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80027e4:	8afa      	ldrh	r2, [r7, #22]
 80027e6:	8abb      	ldrh	r3, [r7, #20]
 80027e8:	4413      	add	r3, r2
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	dd17      	ble.n	800281e <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	f107 0220 	add.w	r2, r7, #32
 80027f6:	4413      	add	r3, r2
 80027f8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80027fc:	4619      	mov	r1, r3
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <BSP_TS_GetState+0x240>)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	f107 0220 	add.w	r2, r7, #32
 800280e:	4413      	add	r3, r2
 8002810:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002814:	4619      	mov	r1, r3
 8002816:	4a18      	ldr	r2, [pc, #96]	; (8002878 <BSP_TS_GetState+0x244>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800281e:	4a15      	ldr	r2, [pc, #84]	; (8002874 <BSP_TS_GetState+0x240>)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	b299      	uxth	r1, r3
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	460a      	mov	r2, r1
 8002832:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8002834:	4a10      	ldr	r2, [pc, #64]	; (8002878 <BSP_TS_GetState+0x244>)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283c:	b299      	uxth	r1, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	460a      	mov	r2, r1
 8002848:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3301      	adds	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4293      	cmp	r3, r2
 800285a:	f4ff af05 	bcc.w	8002668 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800285e:	7efb      	ldrb	r3, [r7, #27]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3724      	adds	r7, #36	; 0x24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	2000032c 	.word	0x2000032c
 800286c:	20000331 	.word	0x20000331
 8002870:	20000330 	.word	0x20000330
 8002874:	20000334 	.word	0x20000334
 8002878:	2000033c 	.word	0x2000033c

0800287c <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <BSP_TS_INT_MspInit+0x44>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <BSP_TS_INT_MspInit+0x44>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <BSP_TS_INT_MspInit+0x44>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800289a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289e:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	4619      	mov	r1, r3
 80028b0:	4804      	ldr	r0, [pc, #16]	; (80028c4 <BSP_TS_INT_MspInit+0x48>)
 80028b2:	f002 fb9b 	bl	8004fec <HAL_GPIO_Init>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40022000 	.word	0x40022000

080028c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028cc:	2003      	movs	r0, #3
 80028ce:	f000 fe77 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f000 f806 	bl	80028e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80028d8:	f00b fbe6 	bl	800e0a8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_InitTick+0x54>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_InitTick+0x58>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fe91 	bl	800362a <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f000 fe59 	bl	80035d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <HAL_InitTick+0x5c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	200000b0 	.word	0x200000b0
 800293c:	2000005c 	.word	0x2000005c
 8002940:	20000058 	.word	0x20000058

08002944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_IncTick+0x20>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x24>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_IncTick+0x24>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000005c 	.word	0x2000005c
 8002968:	200005c4 	.word	0x200005c4

0800296c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return uwTick;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_GetTick+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	200005c4 	.word	0x200005c4

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff ffee 	bl	800296c <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_Delay+0x40>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7ff ffde 	bl	800296c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000005c 	.word	0x2000005c

080029c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e031      	b.n	8002a42 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f00b fb82 	bl	800e0f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d116      	bne.n	8002a34 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_ADC_Init+0x84>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	f043 0202 	orr.w	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fbfe 	bl	8003218 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
 8002a32:	e001      	b.n	8002a38 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	ffffeefd 	.word	0xffffeefd

08002a50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_Start+0x1a>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e0a0      	b.n	8002bac <HAL_ADC_Start+0x15c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d018      	beq.n	8002ab2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a90:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <HAL_ADC_Start+0x168>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a49      	ldr	r2, [pc, #292]	; (8002bbc <HAL_ADC_Start+0x16c>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0c9a      	lsrs	r2, r3, #18
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d174      	bne.n	8002baa <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <HAL_ADC_Start+0x170>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ae6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d106      	bne.n	8002b0a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f023 0206 	bic.w	r2, r3, #6
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
 8002b08:	e002      	b.n	8002b10 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b20:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002b22:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_ADC_Start+0x174>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10f      	bne.n	8002b4e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d136      	bne.n	8002baa <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	e02d      	b.n	8002baa <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <HAL_ADC_Start+0x178>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10e      	bne.n	8002b76 <HAL_ADC_Start+0x126>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d107      	bne.n	8002b76 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b74:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_ADC_Start+0x174>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d113      	bne.n	8002baa <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <HAL_ADC_Start+0x17c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10e      	bne.n	8002baa <HAL_ADC_Start+0x15a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ba8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	200000b0 	.word	0x200000b0
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	fffff8fe 	.word	0xfffff8fe
 8002bc4:	40012300 	.word	0x40012300
 8002bc8:	40012000 	.word	0x40012000
 8002bcc:	40012200 	.word	0x40012200

08002bd0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d113      	bne.n	8002c16 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfc:	d10b      	bne.n	8002c16 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e05c      	b.n	8002cd0 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c16:	f7ff fea9 	bl	800296c <HAL_GetTick>
 8002c1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c1c:	e01a      	b.n	8002c54 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d016      	beq.n	8002c54 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_ADC_PollForConversion+0x6c>
 8002c2c:	f7ff fe9e 	bl	800296c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d20b      	bcs.n	8002c54 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e03d      	b.n	8002cd0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d1dd      	bne.n	8002c1e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0212 	mvn.w	r2, #18
 8002c6a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d123      	bne.n	8002cce <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11f      	bne.n	8002cce <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d111      	bne.n	8002cce <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	bf0c      	ite	eq
 8002cf6:	2301      	moveq	r3, #1
 8002cf8:	2300      	movne	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d049      	beq.n	8002dae <HAL_ADC_IRQHandler+0xd6>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d046      	beq.n	8002dae <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d12b      	bne.n	8002d9e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d127      	bne.n	8002d9e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d119      	bne.n	8002d9e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0220 	bic.w	r2, r2, #32
 8002d78:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8e8 	bl	8002f74 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0212 	mvn.w	r2, #18
 8002dac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	2b80      	cmp	r3, #128	; 0x80
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d057      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x1b8>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d054      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d139      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d12b      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d124      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d11d      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d119      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fac3 	bl	800340c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f06f 020c 	mvn.w	r2, #12
 8002e8e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d017      	beq.n	8002ef2 <HAL_ADC_IRQHandler+0x21a>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d014      	beq.n	8002ef2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10d      	bne.n	8002ef2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f850 	bl	8002f88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0201 	mvn.w	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d015      	beq.n	8002f52 <HAL_ADC_IRQHandler+0x27a>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d012      	beq.n	8002f52 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	f043 0202 	orr.w	r2, r3, #2
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0220 	mvn.w	r2, #32
 8002f40:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f82a 	bl	8002f9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0220 	mvn.w	r2, #32
 8002f50:	601a      	str	r2, [r3, #0]
  }
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x1c>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e115      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x248>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b09      	cmp	r3, #9
 8002fda:	d935      	bls.n	8003048 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68d9      	ldr	r1, [r3, #12]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b1e      	subs	r3, #30
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	400a      	ands	r2, r1
 8003000:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7f      	ldr	r2, [pc, #508]	; (8003204 <HAL_ADC_ConfigChannel+0x254>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10a      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	061a      	lsls	r2, r3, #24
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	e035      	b.n	800308e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	4618      	mov	r0, r3
 8003034:	4603      	mov	r3, r0
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4403      	add	r3, r0
 800303a:	3b1e      	subs	r3, #30
 800303c:	409a      	lsls	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	e022      	b.n	800308e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6919      	ldr	r1, [r3, #16]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	2207      	movs	r2, #7
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	400a      	ands	r2, r1
 800306a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6919      	ldr	r1, [r3, #16]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	4618      	mov	r0, r3
 800307e:	4603      	mov	r3, r0
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4403      	add	r3, r0
 8003084:	409a      	lsls	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b06      	cmp	r3, #6
 8003094:	d824      	bhi.n	80030e0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	3b05      	subs	r3, #5
 80030a8:	221f      	movs	r2, #31
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	400a      	ands	r2, r1
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4618      	mov	r0, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	3b05      	subs	r3, #5
 80030d2:	fa00 f203 	lsl.w	r2, r0, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34
 80030de:	e04c      	b.n	800317a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d824      	bhi.n	8003132 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	3b23      	subs	r3, #35	; 0x23
 80030fa:	221f      	movs	r2, #31
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43da      	mvns	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	400a      	ands	r2, r1
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	4618      	mov	r0, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	3b23      	subs	r3, #35	; 0x23
 8003124:	fa00 f203 	lsl.w	r2, r0, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
 8003130:	e023      	b.n	800317a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	3b41      	subs	r3, #65	; 0x41
 8003144:	221f      	movs	r2, #31
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	400a      	ands	r2, r1
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	4618      	mov	r0, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	3b41      	subs	r3, #65	; 0x41
 800316e:	fa00 f203 	lsl.w	r2, r0, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a22      	ldr	r2, [pc, #136]	; (8003208 <HAL_ADC_ConfigChannel+0x258>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d109      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1e8>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b12      	cmp	r3, #18
 800318a:	d105      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800318c:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_ADC_ConfigChannel+0x25c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <HAL_ADC_ConfigChannel+0x25c>)
 8003192:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003196:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_ADC_ConfigChannel+0x258>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d125      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x23e>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <HAL_ADC_ConfigChannel+0x254>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x204>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b11      	cmp	r3, #17
 80031b2:	d11c      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_ADC_ConfigChannel+0x25c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_ADC_ConfigChannel+0x25c>)
 80031ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031be:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <HAL_ADC_ConfigChannel+0x254>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d111      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_ADC_ConfigChannel+0x260>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a11      	ldr	r2, [pc, #68]	; (8003214 <HAL_ADC_ConfigChannel+0x264>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	0c9a      	lsrs	r2, r3, #18
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031e0:	e002      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f9      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	10000012 	.word	0x10000012
 8003208:	40012000 	.word	0x40012000
 800320c:	40012300 	.word	0x40012300
 8003210:	200000b0 	.word	0x200000b0
 8003214:	431bde83 	.word	0x431bde83

08003218 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003220:	4b78      	ldr	r3, [pc, #480]	; (8003404 <ADC_Init+0x1ec>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a77      	ldr	r2, [pc, #476]	; (8003404 <ADC_Init+0x1ec>)
 8003226:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800322a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800322c:	4b75      	ldr	r3, [pc, #468]	; (8003404 <ADC_Init+0x1ec>)
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4973      	ldr	r1, [pc, #460]	; (8003404 <ADC_Init+0x1ec>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003248:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	021a      	lsls	r2, r3, #8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800326c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6899      	ldr	r1, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	4a58      	ldr	r2, [pc, #352]	; (8003408 <ADC_Init+0x1f0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d022      	beq.n	80032f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	e00f      	b.n	8003312 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003310:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0202 	bic.w	r2, r2, #2
 8003320:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6899      	ldr	r1, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	005a      	lsls	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01b      	beq.n	8003378 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800335e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	3b01      	subs	r3, #1
 800336c:	035a      	lsls	r2, r3, #13
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	e007      	b.n	8003388 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003386:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003396:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	051a      	lsls	r2, r3, #20
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6899      	ldr	r1, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033ca:	025a      	lsls	r2, r3, #9
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6899      	ldr	r1, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	029a      	lsls	r2, r3, #10
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	40012300 	.word	0x40012300
 8003408:	0f000001 	.word	0x0f000001

0800340c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <__NVIC_SetPriorityGrouping+0x40>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 800344a:	4313      	orrs	r3, r2
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <__NVIC_SetPriorityGrouping+0x40>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00
 8003464:	05fa0000 	.word	0x05fa0000

08003468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
         );
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff29 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff3e 	bl	8003468 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff8e 	bl	8003514 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5d 	bl	80034c0 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff31 	bl	8003484 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffa2 	bl	800357c <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003650:	f7ff f98c 	bl	800296c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e099      	b.n	8003794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003680:	e00f      	b.n	80036a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003682:	f7ff f973 	bl	800296c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b05      	cmp	r3, #5
 800368e:	d908      	bls.n	80036a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2203      	movs	r2, #3
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e078      	b.n	8003794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e8      	bne.n	8003682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_DMA_Init+0x158>)
 80036bc:	4013      	ands	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4313      	orrs	r3, r2
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0307 	bic.w	r3, r3, #7
 8003722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b04      	cmp	r3, #4
 8003734:	d117      	bne.n	8003766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00e      	beq.n	8003766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8bd 	bl	80038c8 <DMA_CheckFifoParam>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003762:	2301      	movs	r3, #1
 8003764:	e016      	b.n	8003794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f874 	bl	800385c <DMA_CalcBaseAndBitshift>
 8003774:	4603      	mov	r3, r0
 8003776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	223f      	movs	r2, #63	; 0x3f
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	e010803f 	.word	0xe010803f

080037a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e050      	b.n	8003854 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d101      	bne.n	80037c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
 80037c0:	e048      	b.n	8003854 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2221      	movs	r2, #33	; 0x21
 8003800:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f82a 	bl	800385c <DMA_CalcBaseAndBitshift>
 8003808:	4603      	mov	r3, r0
 800380a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	223f      	movs	r2, #63	; 0x3f
 8003812:	409a      	lsls	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	3b10      	subs	r3, #16
 800386c:	4a13      	ldr	r2, [pc, #76]	; (80038bc <DMA_CalcBaseAndBitshift+0x60>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <DMA_CalcBaseAndBitshift+0x64>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d908      	bls.n	800389c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003892:	4013      	ands	r3, r2
 8003894:	1d1a      	adds	r2, r3, #4
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	659a      	str	r2, [r3, #88]	; 0x58
 800389a:	e006      	b.n	80038aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <DMA_CalcBaseAndBitshift+0x68>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	aaaaaaab 	.word	0xaaaaaaab
 80038c0:	08011adc 	.word	0x08011adc
 80038c4:	fffffc00 	.word	0xfffffc00

080038c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11f      	bne.n	8003922 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d855      	bhi.n	8003994 <DMA_CheckFifoParam+0xcc>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <DMA_CheckFifoParam+0x28>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003901 	.word	0x08003901
 80038f4:	08003913 	.word	0x08003913
 80038f8:	08003901 	.word	0x08003901
 80038fc:	08003995 	.word	0x08003995
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d045      	beq.n	8003998 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003910:	e042      	b.n	8003998 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800391a:	d13f      	bne.n	800399c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003920:	e03c      	b.n	800399c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800392a:	d121      	bne.n	8003970 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d836      	bhi.n	80039a0 <DMA_CheckFifoParam+0xd8>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <DMA_CheckFifoParam+0x70>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003949 	.word	0x08003949
 800393c:	0800394f 	.word	0x0800394f
 8003940:	08003949 	.word	0x08003949
 8003944:	08003961 	.word	0x08003961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e02f      	b.n	80039ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d024      	beq.n	80039a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800395e:	e021      	b.n	80039a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003968:	d11e      	bne.n	80039a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800396e:	e01b      	b.n	80039a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d902      	bls.n	800397c <DMA_CheckFifoParam+0xb4>
 8003976:	2b03      	cmp	r3, #3
 8003978:	d003      	beq.n	8003982 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800397a:	e018      	b.n	80039ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      break;
 8003980:	e015      	b.n	80039ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00e      	beq.n	80039ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
      break;
 8003992:	e00b      	b.n	80039ac <DMA_CheckFifoParam+0xe4>
      break;
 8003994:	bf00      	nop
 8003996:	e00a      	b.n	80039ae <DMA_CheckFifoParam+0xe6>
      break;
 8003998:	bf00      	nop
 800399a:	e008      	b.n	80039ae <DMA_CheckFifoParam+0xe6>
      break;
 800399c:	bf00      	nop
 800399e:	e006      	b.n	80039ae <DMA_CheckFifoParam+0xe6>
      break;
 80039a0:	bf00      	nop
 80039a2:	e004      	b.n	80039ae <DMA_CheckFifoParam+0xe6>
      break;
 80039a4:	bf00      	nop
 80039a6:	e002      	b.n	80039ae <DMA_CheckFifoParam+0xe6>
      break;   
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <DMA_CheckFifoParam+0xe6>
      break;
 80039ac:	bf00      	nop
    }
  } 
  
  return status; 
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e049      	b.n	8003a62 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f00a fbaa 	bl	800e13c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	f023 0107 	bic.w	r1, r3, #7
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <HAL_DMA2D_Init+0xb0>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68d1      	ldr	r1, [r2, #12]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	051a      	lsls	r2, r3, #20
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	055b      	lsls	r3, r3, #21
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	ffffc000 	.word	0xffffc000

08003a70 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA2D_Start+0x1c>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e018      	b.n	8003abe <HAL_DMA2D_Start+0x4e>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f994 	bl	8003dd4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d056      	beq.n	8003b90 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003ae2:	f7fe ff43 	bl	800296c <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ae8:	e04b      	b.n	8003b82 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d023      	beq.n	8003b44 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	f043 0202 	orr.w	r2, r3, #2
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2221      	movs	r2, #33	; 0x21
 8003b2e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2204      	movs	r2, #4
 8003b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0a5      	b.n	8003c90 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d01a      	beq.n	8003b82 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003b4c:	f7fe ff0e 	bl	800296c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <HAL_DMA2D_PollForTransfer+0x9c>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2203      	movs	r2, #3
 8003b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e086      	b.n	8003c90 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ac      	beq.n	8003aea <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d061      	beq.n	8003c76 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bb2:	f7fe fedb 	bl	800296c <HAL_GetTick>
 8003bb6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003bb8:	e056      	b.n	8003c68 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02e      	beq.n	8003c2a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	f043 0202 	orr.w	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2229      	movs	r2, #41	; 0x29
 8003c14:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2204      	movs	r2, #4
 8003c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e032      	b.n	8003c90 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d01a      	beq.n	8003c68 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003c32:	f7fe fe9b 	bl	800296c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <HAL_DMA2D_PollForTransfer+0x182>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10f      	bne.n	8003c68 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2203      	movs	r2, #3
 8003c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e013      	b.n	8003c90 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0a1      	beq.n	8003bba <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2212      	movs	r2, #18
 8003c7c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_DMA2D_ConfigLayer+0x20>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e084      	b.n	8003dc2 <HAL_DMA2D_ConfigLayer+0x12a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	3320      	adds	r3, #32
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003cec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003cf8:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <HAL_DMA2D_ConfigLayer+0x138>)
 8003cfa:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b0a      	cmp	r3, #10
 8003d02:	d003      	beq.n	8003d0c <HAL_DMA2D_ConfigLayer+0x74>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b09      	cmp	r3, #9
 8003d0a:	d107      	bne.n	8003d1c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e005      	b.n	8003d28 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d120      	bne.n	8003d70 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	ea02 0103 	and.w	r1, r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b0a      	cmp	r3, #10
 8003d56:	d003      	beq.n	8003d60 <HAL_DMA2D_ConfigLayer+0xc8>
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d127      	bne.n	8003db0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d6e:	e01f      	b.n	8003db0 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	ea02 0103 	and.w	r1, r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b0a      	cmp	r3, #10
 8003d98:	d003      	beq.n	8003da2 <HAL_DMA2D_ConfigLayer+0x10a>
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b09      	cmp	r3, #9
 8003da0:	d106      	bne.n	8003db0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003dae:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	ff33000f 	.word	0xff33000f

08003dd4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b08b      	sub	sp, #44	; 0x2c
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	041a      	lsls	r2, r3, #16
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e0c:	d174      	bne.n	8003ef8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e14:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e1c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e24:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d108      	bne.n	8003e46 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	e053      	b.n	8003eee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d106      	bne.n	8003e5c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5a:	e048      	b.n	8003eee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d111      	bne.n	8003e88 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	0cdb      	lsrs	r3, r3, #19
 8003e68:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	0a9b      	lsrs	r3, r3, #10
 8003e6e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	08db      	lsrs	r3, r3, #3
 8003e74:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	02db      	lsls	r3, r3, #11
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
 8003e86:	e032      	b.n	8003eee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d117      	bne.n	8003ec0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	0fdb      	lsrs	r3, r3, #31
 8003e94:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	0cdb      	lsrs	r3, r3, #19
 8003e9a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	0adb      	lsrs	r3, r3, #11
 8003ea0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	08db      	lsrs	r3, r3, #3
 8003ea6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	029b      	lsls	r3, r3, #10
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	03db      	lsls	r3, r3, #15
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebe:	e016      	b.n	8003eee <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	0f1b      	lsrs	r3, r3, #28
 8003ec4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	0d1b      	lsrs	r3, r3, #20
 8003eca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	0b1b      	lsrs	r3, r3, #12
 8003ed0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	011a      	lsls	r2, r3, #4
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	031b      	lsls	r3, r3, #12
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003ef6:	e003      	b.n	8003f00 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	60da      	str	r2, [r3, #12]
}
 8003f00:	bf00      	nop
 8003f02:	372c      	adds	r7, #44	; 0x2c
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	019a      	lsls	r2, r3, #6
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	431a      	orrs	r2, r3
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f4c:	f7fe fd0e 	bl	800296c <HAL_GetTick>
 8003f50:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003f52:	e009      	b.n	8003f68 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003f54:	f7fe fd0a 	bl	800296c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f62:	d901      	bls.n	8003f68 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e015      	b.n	8003f94 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ee      	beq.n	8003f54 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	019a      	lsls	r2, r3, #6
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	ea42 0103 	orr.w	r1, r2, r3
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	041a      	lsls	r2, r3, #16
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e106      	b.n	80041be <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7c5b      	ldrb	r3, [r3, #17]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f00a f8de 	bl	800e17c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003fda:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fee:	f7fe fcbd 	bl	800296c <HAL_GetTick>
 8003ff2:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003ff4:	e009      	b.n	800400a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003ff6:	f7fe fcb9 	bl	800296c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004004:	d901      	bls.n	800400a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0d9      	b.n	80041be <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ed      	beq.n	8003ff6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b68      	ldr	r3, [pc, #416]	; (80041c8 <HAL_DSI_Init+0x22c>)
 8004028:	400b      	ands	r3, r1
 800402a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	009a      	lsls	r2, r3, #2
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	02db      	lsls	r3, r3, #11
 8004042:	431a      	orrs	r2, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800407e:	f7fe fc75 	bl	800296c <HAL_GetTick>
 8004082:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004084:	e009      	b.n	800409a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004086:	f7fe fc71 	bl	800296c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004094:	d901      	bls.n	800409a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e091      	b.n	80041be <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ed      	beq.n	8004086 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0206 	orr.w	r2, r2, #6
 80040ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0203 	bic.w	r2, r2, #3
 80040ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0203 	bic.w	r2, r2, #3
 80040fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004124:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6899      	ldr	r1, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_DSI_Init+0x1aa>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	e000      	b.n	8004148 <HAL_DSI_Init+0x1ac>
 8004146:	2301      	movs	r3, #1
 8004148:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <HAL_DSI_Init+0x230>)
 800414e:	fb02 f203 	mul.w	r2, r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	409a      	lsls	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800417e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	430a      	orrs	r2, r1
 8004192:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	fffc8603 	.word	0xfffc8603
 80041cc:	003d0900 	.word	0x003d0900

080041d0 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e066      	b.n	80042b0 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2203      	movs	r2, #3
 80041e6:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0208 	bic.w	r2, r2, #8
 80041fc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0206 	bic.w	r2, r2, #6
 8004242:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004282:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800428e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f009 ffb4 	bl	800e204 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7c1b      	ldrb	r3, [r3, #16]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_DSI_ConfigErrorMonitor+0x16>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e0aa      	b.n	8004424 <HAL_DSI_ConfigErrorMonitor+0x16c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004308:	430b      	orrs	r3, r1
 800430a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004328:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0202 	orr.w	r2, r2, #2
 8004364:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 020c 	orr.w	r2, r2, #12
 8004382:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0210 	orr.w	r2, r2, #16
 80043a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0220 	orr.w	r2, r2, #32
 80043be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004418:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7c1b      	ldrb	r3, [r3, #16]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_DSI_SetGenericVCID+0x16>
 8004442:	2302      	movs	r3, #2
 8004444:	e016      	b.n	8004474 <HAL_DSI_SetGenericVCID+0x44>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0203 	bic.w	r2, r2, #3
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	7c1b      	ldrb	r3, [r3, #16]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_DSI_ConfigVideoMode+0x16>
 8004492:	2302      	movs	r3, #2
 8004494:	e1ee      	b.n	8004874 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0203 	bic.w	r2, r2, #3
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b8b      	ldr	r3, [pc, #556]	; (800471c <HAL_DSI_ConfigVideoMode+0x29c>)
 80044ee:	400b      	ands	r3, r1
 80044f0:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b84      	ldr	r3, [pc, #528]	; (8004720 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004510:	400b      	ands	r3, r1
 8004512:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b7b      	ldr	r3, [pc, #492]	; (8004720 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004532:	400b      	ands	r3, r1
 8004534:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0203 	bic.w	r2, r2, #3
 8004556:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68d9      	ldr	r1, [r3, #12]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0207 	bic.w	r2, r2, #7
 8004578:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6959      	ldr	r1, [r3, #20]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	431a      	orrs	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 020f 	bic.w	r2, r2, #15
 80045a6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6919      	ldr	r1, [r3, #16]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 020e 	bic.w	r2, r2, #14
 80045ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	005a      	lsls	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d110      	bne.n	8004610 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045fc:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6919      	ldr	r1, [r3, #16]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b42      	ldr	r3, [pc, #264]	; (8004724 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800461c:	400b      	ands	r3, r1
 800461e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b39      	ldr	r3, [pc, #228]	; (8004724 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800463e:	400b      	ands	r3, r1
 8004640:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b32      	ldr	r3, [pc, #200]	; (8004728 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004660:	400b      	ands	r3, r1
 8004662:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004682:	400b      	ands	r3, r1
 8004684:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_DSI_ConfigVideoMode+0x2ac>)
 80046a4:	400b      	ands	r3, r1
 80046a6:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_DSI_ConfigVideoMode+0x2ac>)
 80046c6:	400b      	ands	r3, r1
 80046c8:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_DSI_ConfigVideoMode+0x29c>)
 80046e8:	400b      	ands	r3, r1
 80046ea:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004718:	e00a      	b.n	8004730 <HAL_DSI_ConfigVideoMode+0x2b0>
 800471a:	bf00      	nop
 800471c:	ffffc000 	.word	0xffffc000
 8004720:	ffffe000 	.word	0xffffe000
 8004724:	fffff000 	.word	0xfffff000
 8004728:	ffff8000 	.word	0xffff8000
 800472c:	fffffc00 	.word	0xfffffc00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004746:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004752:	041a      	lsls	r2, r3, #16
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800476a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6999      	ldr	r1, [r3, #24]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	7c1b      	ldrb	r3, [r3, #16]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004892:	2302      	movs	r3, #2
 8004894:	e0c5      	b.n	8004a22 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0203 	bic.w	r2, r2, #3
 80048e2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68d9      	ldr	r1, [r3, #12]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0207 	bic.w	r2, r2, #7
 8004904:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6959      	ldr	r1, [r3, #20]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	431a      	orrs	r2, r3
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 020f 	bic.w	r2, r2, #15
 8004932:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6919      	ldr	r1, [r3, #16]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 020e 	bic.w	r2, r2, #14
 8004956:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	005a      	lsls	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800497e:	400b      	ands	r3, r1
 8004980:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80049a4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0202 	orr.w	r2, r2, #2
 8004a16:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	ffff0000 	.word	0xffff0000

08004a34 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	7c1b      	ldrb	r3, [r3, #16]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_DSI_ConfigCommand+0x16>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e049      	b.n	8004ade <HAL_DSI_ConfigCommand+0xaa>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <HAL_DSI_ConfigCommand+0xb8>)
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a6e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004a74:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004a7a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004a80:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004a86:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004a8c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004a92:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a98:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004a9e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004aa4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004aaa:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0202 	bic.w	r2, r2, #2
 8004ac2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	fef080ff 	.word	0xfef080ff

08004af0 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7c1b      	ldrb	r3, [r3, #16]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_DSI_ConfigFlowControl+0x16>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e016      	b.n	8004b34 <HAL_DSI_ConfigFlowControl+0x44>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 021f 	bic.w	r2, r2, #31
 8004b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	7c1b      	ldrb	r3, [r3, #16]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_DSI_ConfigPhyTimer+0x16>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e058      	b.n	8004c08 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4293      	cmp	r3, r2
 8004b66:	bf38      	it	cc
 8004b68:	4613      	movcc	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004b7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	041a      	lsls	r2, r3, #16
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004baa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004be4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	021a      	lsls	r2, r3, #8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	7c1b      	ldrb	r3, [r3, #16]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_DSI_ConfigHostTimeouts+0x16>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e0b4      	b.n	8004d94 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004c3e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6899      	ldr	r1, [r3, #8]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	021a      	lsls	r2, r3, #8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	041a      	lsls	r2, r3, #16
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b47      	ldr	r3, [pc, #284]	; (8004da0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c82:	400b      	ands	r3, r1
 8004c84:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004ca4:	400b      	ands	r3, r1
 8004ca6:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004cc8:	400b      	ands	r3, r1
 8004cca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b2b      	ldr	r3, [pc, #172]	; (8004da0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	699a      	ldr	r2, [r3, #24]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004d46:	400b      	ands	r3, r1
 8004d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004d70:	400b      	ands	r3, r1
 8004d72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6a1a      	ldr	r2, [r3, #32]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	ffff0000 	.word	0xffff0000

08004da4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	7c1b      	ldrb	r3, [r3, #16]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_DSI_Start+0x14>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e02b      	b.n	8004e10 <HAL_DSI_Start+0x6c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004de0:	2300      	movs	r3, #0
 8004de2:	60bb      	str	r3, [r7, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0208 	orr.w	r2, r2, #8
 8004df4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	7c1b      	ldrb	r3, [r3, #16]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_DSI_ShortWrite+0x1a>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e010      	b.n	8004e58 <HAL_DSI_ShortWrite+0x3c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff f879 	bl	8003f3e <DSI_ShortWrite>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	741a      	strb	r2, [r3, #16]

  return status;
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	7c1b      	ldrb	r3, [r3, #16]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_DSI_LongWrite+0x1e>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e084      	b.n	8004f88 <HAL_DSI_LongWrite+0x128>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e84:	f7fd fd72 	bl	800296c <HAL_GetTick>
 8004e88:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e8a:	e00c      	b.n	8004ea6 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004e8c:	f7fd fd6e 	bl	800296c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e9a:	d904      	bls.n	8004ea6 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e070      	b.n	8004f88 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0eb      	beq.n	8004e8c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	bf28      	it	cs
 8004ebe:	2303      	movcs	r3, #3
 8004ec0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
 8004ec6:	e00f      	b.n	8004ee8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	4413      	add	r3, r2
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	623b      	str	r3, [r7, #32]
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d3eb      	bcc.n	8004ec8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004f08:	e028      	b.n	8004f5c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	bf28      	it	cs
 8004f10:	2304      	movcs	r3, #4
 8004f12:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	623b      	str	r3, [r7, #32]
 8004f1c:	e00e      	b.n	8004f3c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	4413      	add	r3, r2
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	6a3a      	ldr	r2, [r7, #32]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d3ec      	bcc.n	8004f1e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4413      	add	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1d3      	bne.n	8004f0a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f6a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	f7fe ffc6 	bl	8003f0c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3728      	adds	r7, #40	; 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7c1b      	ldrb	r3, [r3, #16]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e01b      	b.n	8004fde <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004fbc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	065a      	lsls	r2, r3, #25
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b089      	sub	sp, #36	; 0x24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005002:	2300      	movs	r3, #0
 8005004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	e175      	b.n	80052f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800500c:	2201      	movs	r2, #1
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4013      	ands	r3, r2
 800501e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	429a      	cmp	r2, r3
 8005026:	f040 8164 	bne.w	80052f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d003      	beq.n	800503a <HAL_GPIO_Init+0x4e>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b12      	cmp	r3, #18
 8005038:	d123      	bne.n	8005082 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	08da      	lsrs	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3208      	adds	r2, #8
 8005042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	220f      	movs	r2, #15
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43db      	mvns	r3, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4013      	ands	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4313      	orrs	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	08da      	lsrs	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3208      	adds	r2, #8
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	2203      	movs	r2, #3
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43db      	mvns	r3, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4013      	ands	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 0203 	and.w	r2, r3, #3
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d00b      	beq.n	80050d6 <HAL_GPIO_Init+0xea>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d007      	beq.n	80050d6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050ca:	2b11      	cmp	r3, #17
 80050cc:	d003      	beq.n	80050d6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b12      	cmp	r3, #18
 80050d4:	d130      	bne.n	8005138 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	2203      	movs	r2, #3
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800510c:	2201      	movs	r2, #1
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	091b      	lsrs	r3, r3, #4
 8005122:	f003 0201 	and.w	r2, r3, #1
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	2203      	movs	r2, #3
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43db      	mvns	r3, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4013      	ands	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80be 	beq.w	80052f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005176:	4b65      	ldr	r3, [pc, #404]	; (800530c <HAL_GPIO_Init+0x320>)
 8005178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517a:	4a64      	ldr	r2, [pc, #400]	; (800530c <HAL_GPIO_Init+0x320>)
 800517c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005180:	6453      	str	r3, [r2, #68]	; 0x44
 8005182:	4b62      	ldr	r3, [pc, #392]	; (800530c <HAL_GPIO_Init+0x320>)
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800518e:	4a60      	ldr	r2, [pc, #384]	; (8005310 <HAL_GPIO_Init+0x324>)
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	089b      	lsrs	r3, r3, #2
 8005194:	3302      	adds	r3, #2
 8005196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	220f      	movs	r2, #15
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	43db      	mvns	r3, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4013      	ands	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a57      	ldr	r2, [pc, #348]	; (8005314 <HAL_GPIO_Init+0x328>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d037      	beq.n	800522a <HAL_GPIO_Init+0x23e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a56      	ldr	r2, [pc, #344]	; (8005318 <HAL_GPIO_Init+0x32c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d031      	beq.n	8005226 <HAL_GPIO_Init+0x23a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a55      	ldr	r2, [pc, #340]	; (800531c <HAL_GPIO_Init+0x330>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d02b      	beq.n	8005222 <HAL_GPIO_Init+0x236>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a54      	ldr	r2, [pc, #336]	; (8005320 <HAL_GPIO_Init+0x334>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d025      	beq.n	800521e <HAL_GPIO_Init+0x232>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a53      	ldr	r2, [pc, #332]	; (8005324 <HAL_GPIO_Init+0x338>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01f      	beq.n	800521a <HAL_GPIO_Init+0x22e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a52      	ldr	r2, [pc, #328]	; (8005328 <HAL_GPIO_Init+0x33c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d019      	beq.n	8005216 <HAL_GPIO_Init+0x22a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a51      	ldr	r2, [pc, #324]	; (800532c <HAL_GPIO_Init+0x340>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d013      	beq.n	8005212 <HAL_GPIO_Init+0x226>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a50      	ldr	r2, [pc, #320]	; (8005330 <HAL_GPIO_Init+0x344>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00d      	beq.n	800520e <HAL_GPIO_Init+0x222>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a4f      	ldr	r2, [pc, #316]	; (8005334 <HAL_GPIO_Init+0x348>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <HAL_GPIO_Init+0x21e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a4e      	ldr	r2, [pc, #312]	; (8005338 <HAL_GPIO_Init+0x34c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d101      	bne.n	8005206 <HAL_GPIO_Init+0x21a>
 8005202:	2309      	movs	r3, #9
 8005204:	e012      	b.n	800522c <HAL_GPIO_Init+0x240>
 8005206:	230a      	movs	r3, #10
 8005208:	e010      	b.n	800522c <HAL_GPIO_Init+0x240>
 800520a:	2308      	movs	r3, #8
 800520c:	e00e      	b.n	800522c <HAL_GPIO_Init+0x240>
 800520e:	2307      	movs	r3, #7
 8005210:	e00c      	b.n	800522c <HAL_GPIO_Init+0x240>
 8005212:	2306      	movs	r3, #6
 8005214:	e00a      	b.n	800522c <HAL_GPIO_Init+0x240>
 8005216:	2305      	movs	r3, #5
 8005218:	e008      	b.n	800522c <HAL_GPIO_Init+0x240>
 800521a:	2304      	movs	r3, #4
 800521c:	e006      	b.n	800522c <HAL_GPIO_Init+0x240>
 800521e:	2303      	movs	r3, #3
 8005220:	e004      	b.n	800522c <HAL_GPIO_Init+0x240>
 8005222:	2302      	movs	r3, #2
 8005224:	e002      	b.n	800522c <HAL_GPIO_Init+0x240>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <HAL_GPIO_Init+0x240>
 800522a:	2300      	movs	r3, #0
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	f002 0203 	and.w	r2, r2, #3
 8005232:	0092      	lsls	r2, r2, #2
 8005234:	4093      	lsls	r3, r2
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4313      	orrs	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800523c:	4934      	ldr	r1, [pc, #208]	; (8005310 <HAL_GPIO_Init+0x324>)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	089b      	lsrs	r3, r3, #2
 8005242:	3302      	adds	r3, #2
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800524a:	4b3c      	ldr	r3, [pc, #240]	; (800533c <HAL_GPIO_Init+0x350>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	43db      	mvns	r3, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4013      	ands	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800526e:	4a33      	ldr	r2, [pc, #204]	; (800533c <HAL_GPIO_Init+0x350>)
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005274:	4b31      	ldr	r3, [pc, #196]	; (800533c <HAL_GPIO_Init+0x350>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005298:	4a28      	ldr	r2, [pc, #160]	; (800533c <HAL_GPIO_Init+0x350>)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800529e:	4b27      	ldr	r3, [pc, #156]	; (800533c <HAL_GPIO_Init+0x350>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	43db      	mvns	r3, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4013      	ands	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052c2:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_GPIO_Init+0x350>)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052c8:	4b1c      	ldr	r3, [pc, #112]	; (800533c <HAL_GPIO_Init+0x350>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052ec:	4a13      	ldr	r2, [pc, #76]	; (800533c <HAL_GPIO_Init+0x350>)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3301      	adds	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	f67f ae86 	bls.w	800500c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005300:	bf00      	nop
 8005302:	3724      	adds	r7, #36	; 0x24
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40023800 	.word	0x40023800
 8005310:	40013800 	.word	0x40013800
 8005314:	40020000 	.word	0x40020000
 8005318:	40020400 	.word	0x40020400
 800531c:	40020800 	.word	0x40020800
 8005320:	40020c00 	.word	0x40020c00
 8005324:	40021000 	.word	0x40021000
 8005328:	40021400 	.word	0x40021400
 800532c:	40021800 	.word	0x40021800
 8005330:	40021c00 	.word	0x40021c00
 8005334:	40022000 	.word	0x40022000
 8005338:	40022400 	.word	0x40022400
 800533c:	40013c00 	.word	0x40013c00

08005340 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	e0d9      	b.n	8005510 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800535c:	2201      	movs	r2, #1
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	429a      	cmp	r2, r3
 8005374:	f040 80c9 	bne.w	800550a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005378:	4a6a      	ldr	r2, [pc, #424]	; (8005524 <HAL_GPIO_DeInit+0x1e4>)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	089b      	lsrs	r3, r3, #2
 800537e:	3302      	adds	r3, #2
 8005380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005384:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	220f      	movs	r2, #15
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a62      	ldr	r2, [pc, #392]	; (8005528 <HAL_GPIO_DeInit+0x1e8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d037      	beq.n	8005412 <HAL_GPIO_DeInit+0xd2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a61      	ldr	r2, [pc, #388]	; (800552c <HAL_GPIO_DeInit+0x1ec>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d031      	beq.n	800540e <HAL_GPIO_DeInit+0xce>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a60      	ldr	r2, [pc, #384]	; (8005530 <HAL_GPIO_DeInit+0x1f0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02b      	beq.n	800540a <HAL_GPIO_DeInit+0xca>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a5f      	ldr	r2, [pc, #380]	; (8005534 <HAL_GPIO_DeInit+0x1f4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d025      	beq.n	8005406 <HAL_GPIO_DeInit+0xc6>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a5e      	ldr	r2, [pc, #376]	; (8005538 <HAL_GPIO_DeInit+0x1f8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01f      	beq.n	8005402 <HAL_GPIO_DeInit+0xc2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a5d      	ldr	r2, [pc, #372]	; (800553c <HAL_GPIO_DeInit+0x1fc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d019      	beq.n	80053fe <HAL_GPIO_DeInit+0xbe>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a5c      	ldr	r2, [pc, #368]	; (8005540 <HAL_GPIO_DeInit+0x200>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_GPIO_DeInit+0xba>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a5b      	ldr	r2, [pc, #364]	; (8005544 <HAL_GPIO_DeInit+0x204>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00d      	beq.n	80053f6 <HAL_GPIO_DeInit+0xb6>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a5a      	ldr	r2, [pc, #360]	; (8005548 <HAL_GPIO_DeInit+0x208>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <HAL_GPIO_DeInit+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a59      	ldr	r2, [pc, #356]	; (800554c <HAL_GPIO_DeInit+0x20c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <HAL_GPIO_DeInit+0xae>
 80053ea:	2309      	movs	r3, #9
 80053ec:	e012      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 80053ee:	230a      	movs	r3, #10
 80053f0:	e010      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 80053f2:	2308      	movs	r3, #8
 80053f4:	e00e      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 80053f6:	2307      	movs	r3, #7
 80053f8:	e00c      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 80053fa:	2306      	movs	r3, #6
 80053fc:	e00a      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 80053fe:	2305      	movs	r3, #5
 8005400:	e008      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 8005402:	2304      	movs	r3, #4
 8005404:	e006      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 8005406:	2303      	movs	r3, #3
 8005408:	e004      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 800540a:	2302      	movs	r3, #2
 800540c:	e002      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <HAL_GPIO_DeInit+0xd4>
 8005412:	2300      	movs	r3, #0
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	f002 0203 	and.w	r2, r2, #3
 800541a:	0092      	lsls	r2, r2, #2
 800541c:	4093      	lsls	r3, r2
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	429a      	cmp	r2, r3
 8005422:	d132      	bne.n	800548a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	220f      	movs	r2, #15
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005434:	4a3b      	ldr	r2, [pc, #236]	; (8005524 <HAL_GPIO_DeInit+0x1e4>)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	089b      	lsrs	r3, r3, #2
 800543a:	3302      	adds	r3, #2
 800543c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	43da      	mvns	r2, r3
 8005444:	4837      	ldr	r0, [pc, #220]	; (8005524 <HAL_GPIO_DeInit+0x1e4>)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	089b      	lsrs	r3, r3, #2
 800544a:	400a      	ands	r2, r1
 800544c:	3302      	adds	r3, #2
 800544e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005452:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <HAL_GPIO_DeInit+0x210>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	43db      	mvns	r3, r3
 800545a:	493d      	ldr	r1, [pc, #244]	; (8005550 <HAL_GPIO_DeInit+0x210>)
 800545c:	4013      	ands	r3, r2
 800545e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005460:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <HAL_GPIO_DeInit+0x210>)
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	43db      	mvns	r3, r3
 8005468:	4939      	ldr	r1, [pc, #228]	; (8005550 <HAL_GPIO_DeInit+0x210>)
 800546a:	4013      	ands	r3, r2
 800546c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800546e:	4b38      	ldr	r3, [pc, #224]	; (8005550 <HAL_GPIO_DeInit+0x210>)
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	43db      	mvns	r3, r3
 8005476:	4936      	ldr	r1, [pc, #216]	; (8005550 <HAL_GPIO_DeInit+0x210>)
 8005478:	4013      	ands	r3, r2
 800547a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800547c:	4b34      	ldr	r3, [pc, #208]	; (8005550 <HAL_GPIO_DeInit+0x210>)
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	43db      	mvns	r3, r3
 8005484:	4932      	ldr	r1, [pc, #200]	; (8005550 <HAL_GPIO_DeInit+0x210>)
 8005486:	4013      	ands	r3, r2
 8005488:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	2103      	movs	r1, #3
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	43db      	mvns	r3, r3
 800549a:	401a      	ands	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	08da      	lsrs	r2, r3, #3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3208      	adds	r2, #8
 80054a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	220f      	movs	r2, #15
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	08d2      	lsrs	r2, r2, #3
 80054c0:	4019      	ands	r1, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3208      	adds	r2, #8
 80054c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	2103      	movs	r1, #3
 80054d4:	fa01 f303 	lsl.w	r3, r1, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	401a      	ands	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	2101      	movs	r1, #1
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	401a      	ands	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	2103      	movs	r1, #3
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	401a      	ands	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	3301      	adds	r3, #1
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	f67f af22 	bls.w	800535c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40013800 	.word	0x40013800
 8005528:	40020000 	.word	0x40020000
 800552c:	40020400 	.word	0x40020400
 8005530:	40020800 	.word	0x40020800
 8005534:	40020c00 	.word	0x40020c00
 8005538:	40021000 	.word	0x40021000
 800553c:	40021400 	.word	0x40021400
 8005540:	40021800 	.word	0x40021800
 8005544:	40021c00 	.word	0x40021c00
 8005548:	40022000 	.word	0x40022000
 800554c:	40022400 	.word	0x40022400
 8005550:	40013c00 	.word	0x40013c00

08005554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	887b      	ldrh	r3, [r7, #2]
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
 8005570:	e001      	b.n	8005576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	807b      	strh	r3, [r7, #2]
 8005590:	4613      	mov	r3, r2
 8005592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005594:	787b      	ldrb	r3, [r7, #1]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80055a0:	e003      	b.n	80055aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80055a2:	887b      	ldrh	r3, [r7, #2]
 80055a4:	041a      	lsls	r2, r3, #16
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	619a      	str	r2, [r3, #24]
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055c2:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055c4:	695a      	ldr	r2, [r3, #20]
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d006      	beq.n	80055dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f006 fe60 	bl	800c29c <HAL_GPIO_EXTI_Callback>
  }
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40013c00 	.word	0x40013c00

080055e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e07f      	b.n	80056fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8a9 	bl	8005766 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2224      	movs	r2, #36	; 0x24
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005638:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005648:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d107      	bne.n	8005662 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	e006      	b.n	8005670 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800566e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	2b02      	cmp	r3, #2
 8005676:	d104      	bne.n	8005682 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005680:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6859      	ldr	r1, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_I2C_Init+0x11c>)
 800568e:	430b      	orrs	r3, r1
 8005690:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	ea42 0103 	orr.w	r1, r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	021a      	lsls	r2, r3, #8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69d9      	ldr	r1, [r3, #28]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1a      	ldr	r2, [r3, #32]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	02008000 	.word	0x02008000

08005708 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e021      	b.n	800575e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2224      	movs	r2, #36	; 0x24
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f821 	bl	800577a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	4608      	mov	r0, r1
 800579a:	4611      	mov	r1, r2
 800579c:	461a      	mov	r2, r3
 800579e:	4603      	mov	r3, r0
 80057a0:	817b      	strh	r3, [r7, #10]
 80057a2:	460b      	mov	r3, r1
 80057a4:	813b      	strh	r3, [r7, #8]
 80057a6:	4613      	mov	r3, r2
 80057a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	f040 80f9 	bne.w	80059aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_I2C_Mem_Write+0x34>
 80057be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0ed      	b.n	80059ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_I2C_Mem_Write+0x4e>
 80057da:	2302      	movs	r3, #2
 80057dc:	e0e6      	b.n	80059ac <HAL_I2C_Mem_Write+0x21c>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057e6:	f7fd f8c1 	bl	800296c <HAL_GetTick>
 80057ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	2319      	movs	r3, #25
 80057f2:	2201      	movs	r2, #1
 80057f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fad1 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e0d1      	b.n	80059ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2221      	movs	r2, #33	; 0x21
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2240      	movs	r2, #64	; 0x40
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a3a      	ldr	r2, [r7, #32]
 8005822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005830:	88f8      	ldrh	r0, [r7, #6]
 8005832:	893a      	ldrh	r2, [r7, #8]
 8005834:	8979      	ldrh	r1, [r7, #10]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	4603      	mov	r3, r0
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f9e1 	bl	8005c08 <I2C_RequestMemoryWrite>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0a9      	b.n	80059ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	2bff      	cmp	r3, #255	; 0xff
 8005860:	d90e      	bls.n	8005880 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	22ff      	movs	r2, #255	; 0xff
 8005866:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586c:	b2da      	uxtb	r2, r3
 800586e:	8979      	ldrh	r1, [r7, #10]
 8005870:	2300      	movs	r3, #0
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fbb3 	bl	8005fe4 <I2C_TransferConfig>
 800587e:	e00f      	b.n	80058a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588e:	b2da      	uxtb	r2, r3
 8005890:	8979      	ldrh	r1, [r7, #10]
 8005892:	2300      	movs	r3, #0
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fba2 	bl	8005fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fabb 	bl	8005e20 <I2C_WaitOnTXISFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e07b      	b.n	80059ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d034      	beq.n	8005958 <HAL_I2C_Mem_Write+0x1c8>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d130      	bne.n	8005958 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	2200      	movs	r2, #0
 80058fe:	2180      	movs	r1, #128	; 0x80
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fa4d 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e04d      	b.n	80059ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2bff      	cmp	r3, #255	; 0xff
 8005918:	d90e      	bls.n	8005938 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	22ff      	movs	r2, #255	; 0xff
 800591e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005924:	b2da      	uxtb	r2, r3
 8005926:	8979      	ldrh	r1, [r7, #10]
 8005928:	2300      	movs	r3, #0
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fb57 	bl	8005fe4 <I2C_TransferConfig>
 8005936:	e00f      	b.n	8005958 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	b2da      	uxtb	r2, r3
 8005948:	8979      	ldrh	r1, [r7, #10]
 800594a:	2300      	movs	r3, #0
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 fb46 	bl	8005fe4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d19e      	bne.n	80058a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fa9a 	bl	8005ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e01a      	b.n	80059ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2220      	movs	r2, #32
 800597c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6859      	ldr	r1, [r3, #4]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <HAL_I2C_Mem_Write+0x224>)
 800598a:	400b      	ands	r3, r1
 800598c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	e000      	b.n	80059ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80059aa:	2302      	movs	r3, #2
  }
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	fe00e800 	.word	0xfe00e800

080059b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	817b      	strh	r3, [r7, #10]
 80059ca:	460b      	mov	r3, r1
 80059cc:	813b      	strh	r3, [r7, #8]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b20      	cmp	r3, #32
 80059dc:	f040 80fd 	bne.w	8005bda <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <HAL_I2C_Mem_Read+0x34>
 80059e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d105      	bne.n	80059f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0f1      	b.n	8005bdc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_I2C_Mem_Read+0x4e>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e0ea      	b.n	8005bdc <HAL_I2C_Mem_Read+0x224>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a0e:	f7fc ffad 	bl	800296c <HAL_GetTick>
 8005a12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	2319      	movs	r3, #25
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f9bd 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0d5      	b.n	8005bdc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2222      	movs	r2, #34	; 0x22
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2240      	movs	r2, #64	; 0x40
 8005a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a58:	88f8      	ldrh	r0, [r7, #6]
 8005a5a:	893a      	ldrh	r2, [r7, #8]
 8005a5c:	8979      	ldrh	r1, [r7, #10]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4603      	mov	r3, r0
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f921 	bl	8005cb0 <I2C_RequestMemoryRead>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0ad      	b.n	8005bdc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2bff      	cmp	r3, #255	; 0xff
 8005a88:	d90e      	bls.n	8005aa8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	22ff      	movs	r2, #255	; 0xff
 8005a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	8979      	ldrh	r1, [r7, #10]
 8005a98:	4b52      	ldr	r3, [pc, #328]	; (8005be4 <HAL_I2C_Mem_Read+0x22c>)
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 fa9f 	bl	8005fe4 <I2C_TransferConfig>
 8005aa6:	e00f      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	8979      	ldrh	r1, [r7, #10]
 8005aba:	4b4a      	ldr	r3, [pc, #296]	; (8005be4 <HAL_I2C_Mem_Read+0x22c>)
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 fa8e 	bl	8005fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2104      	movs	r1, #4
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f964 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e07c      	b.n	8005bdc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d034      	beq.n	8005b88 <HAL_I2C_Mem_Read+0x1d0>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d130      	bne.n	8005b88 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2180      	movs	r1, #128	; 0x80
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f935 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e04d      	b.n	8005bdc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2bff      	cmp	r3, #255	; 0xff
 8005b48:	d90e      	bls.n	8005b68 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	8979      	ldrh	r1, [r7, #10]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fa3f 	bl	8005fe4 <I2C_TransferConfig>
 8005b66:	e00f      	b.n	8005b88 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	8979      	ldrh	r1, [r7, #10]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fa2e 	bl	8005fe4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d19a      	bne.n	8005ac8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f982 	bl	8005ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e01a      	b.n	8005bdc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2220      	movs	r2, #32
 8005bac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6859      	ldr	r1, [r3, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_I2C_Mem_Read+0x230>)
 8005bba:	400b      	ands	r3, r1
 8005bbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e000      	b.n	8005bdc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005bda:	2302      	movs	r3, #2
  }
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	80002400 	.word	0x80002400
 8005be8:	fe00e800 	.word	0xfe00e800

08005bec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bfa:	b2db      	uxtb	r3, r3
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	4603      	mov	r3, r0
 8005c18:	817b      	strh	r3, [r7, #10]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	813b      	strh	r3, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	8979      	ldrh	r1, [r7, #10]
 8005c28:	4b20      	ldr	r3, [pc, #128]	; (8005cac <I2C_RequestMemoryWrite+0xa4>)
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f9d7 	bl	8005fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	69b9      	ldr	r1, [r7, #24]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f8f0 	bl	8005e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e02c      	b.n	8005ca4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	629a      	str	r2, [r3, #40]	; 0x28
 8005c5a:	e015      	b.n	8005c88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c5c:	893b      	ldrh	r3, [r7, #8]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	69b9      	ldr	r1, [r7, #24]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f8d6 	bl	8005e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e012      	b.n	8005ca4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c7e:	893b      	ldrh	r3, [r7, #8]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2180      	movs	r1, #128	; 0x80
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f884 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	80002000 	.word	0x80002000

08005cb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	817b      	strh	r3, [r7, #10]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	813b      	strh	r3, [r7, #8]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	8979      	ldrh	r1, [r7, #10]
 8005cd0:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <I2C_RequestMemoryRead+0xa4>)
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f984 	bl	8005fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	69b9      	ldr	r1, [r7, #24]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f89d 	bl	8005e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e02c      	b.n	8005d4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d105      	bne.n	8005d02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf6:	893b      	ldrh	r3, [r7, #8]
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005d00:	e015      	b.n	8005d2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d02:	893b      	ldrh	r3, [r7, #8]
 8005d04:	0a1b      	lsrs	r3, r3, #8
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	69b9      	ldr	r1, [r7, #24]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f883 	bl	8005e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e012      	b.n	8005d4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d24:	893b      	ldrh	r3, [r7, #8]
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2140      	movs	r1, #64	; 0x40
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f831 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	80002000 	.word	0x80002000

08005d58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d103      	bne.n	8005d76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2200      	movs	r2, #0
 8005d74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d007      	beq.n	8005d94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	619a      	str	r2, [r3, #24]
  }
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005db0:	e022      	b.n	8005df8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d01e      	beq.n	8005df8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7fc fdd7 	bl	800296c <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d113      	bne.n	8005df8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e00f      	b.n	8005e18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4013      	ands	r3, r2
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	bf0c      	ite	eq
 8005e08:	2301      	moveq	r3, #1
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d0cd      	beq.n	8005db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e2c:	e02c      	b.n	8005e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f870 	bl	8005f18 <I2C_IsAcknowledgeFailed>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e02a      	b.n	8005e98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d01e      	beq.n	8005e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fc fd8f 	bl	800296c <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d113      	bne.n	8005e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e007      	b.n	8005e98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d1cb      	bne.n	8005e2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eac:	e028      	b.n	8005f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f830 	bl	8005f18 <I2C_IsAcknowledgeFailed>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e026      	b.n	8005f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec2:	f7fc fd53 	bl	800296c <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d113      	bne.n	8005f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e007      	b.n	8005f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d1cf      	bne.n	8005eae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d151      	bne.n	8005fd6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f32:	e022      	b.n	8005f7a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d01e      	beq.n	8005f7a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3c:	f7fc fd16 	bl	800296c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <I2C_IsAcknowledgeFailed+0x3a>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d113      	bne.n	8005f7a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	f043 0220 	orr.w	r2, r3, #32
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e02e      	b.n	8005fd8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d1d5      	bne.n	8005f34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2210      	movs	r2, #16
 8005f8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2220      	movs	r2, #32
 8005f96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff fedd 	bl	8005d58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <I2C_IsAcknowledgeFailed+0xc8>)
 8005faa:	400b      	ands	r3, r1
 8005fac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	f043 0204 	orr.w	r2, r3, #4
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	fe00e800 	.word	0xfe00e800

08005fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	817b      	strh	r3, [r7, #10]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	0d5b      	lsrs	r3, r3, #21
 8006000:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <I2C_TransferConfig+0x58>)
 8006006:	430b      	orrs	r3, r1
 8006008:	43db      	mvns	r3, r3
 800600a:	ea02 0103 	and.w	r1, r2, r3
 800600e:	897b      	ldrh	r3, [r7, #10]
 8006010:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006014:	7a7b      	ldrb	r3, [r7, #9]
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	431a      	orrs	r2, r3
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	431a      	orrs	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	03ff63ff 	.word	0x03ff63ff

08006040 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e0bf      	b.n	80061d2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f008 f8ea 	bl	800e240 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006082:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6999      	ldr	r1, [r3, #24]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006098:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6899      	ldr	r1, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b4a      	ldr	r3, [pc, #296]	; (80061dc <HAL_LTDC_Init+0x19c>)
 80060b4:	400b      	ands	r3, r1
 80060b6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	041b      	lsls	r3, r3, #16
 80060be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6899      	ldr	r1, [r3, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68d9      	ldr	r1, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b3e      	ldr	r3, [pc, #248]	; (80061dc <HAL_LTDC_Init+0x19c>)
 80060e2:	400b      	ands	r3, r1
 80060e4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68d9      	ldr	r1, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1a      	ldr	r2, [r3, #32]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6919      	ldr	r1, [r3, #16]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b33      	ldr	r3, [pc, #204]	; (80061dc <HAL_LTDC_Init+0x19c>)
 8006110:	400b      	ands	r3, r1
 8006112:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6919      	ldr	r1, [r3, #16]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6959      	ldr	r1, [r3, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4b27      	ldr	r3, [pc, #156]	; (80061dc <HAL_LTDC_Init+0x19c>)
 800613e:	400b      	ands	r3, r1
 8006140:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6959      	ldr	r1, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006182:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0206 	orr.w	r2, r2, #6
 80061ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	f000f800 	.word	0xf000f800

080061e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061e0:	b5b0      	push	{r4, r5, r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_LTDC_ConfigLayer+0x1a>
 80061f6:	2302      	movs	r3, #2
 80061f8:	e02c      	b.n	8006254 <HAL_LTDC_ConfigLayer+0x74>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2134      	movs	r1, #52	; 0x34
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	4413      	add	r3, r2
 8006216:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4614      	mov	r4, r2
 800621e:	461d      	mov	r5, r3
 8006220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800622a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f811 	bl	800625c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2201      	movs	r2, #1
 8006240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bdb0      	pop	{r4, r5, r7, pc}

0800625c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800625c:	b480      	push	{r7}
 800625e:	b089      	sub	sp, #36	; 0x24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006278:	4413      	add	r3, r2
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	01db      	lsls	r3, r3, #7
 8006288:	4413      	add	r3, r2
 800628a:	3384      	adds	r3, #132	; 0x84
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	4611      	mov	r1, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	01d2      	lsls	r2, r2, #7
 8006298:	440a      	add	r2, r1
 800629a:	3284      	adds	r2, #132	; 0x84
 800629c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b2:	4413      	add	r3, r2
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	01db      	lsls	r3, r3, #7
 80062c0:	440b      	add	r3, r1
 80062c2:	3384      	adds	r3, #132	; 0x84
 80062c4:	4619      	mov	r1, r3
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062da:	4413      	add	r3, r2
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	01db      	lsls	r3, r3, #7
 80062ea:	4413      	add	r3, r2
 80062ec:	3384      	adds	r3, #132	; 0x84
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	6812      	ldr	r2, [r2, #0]
 80062f4:	4611      	mov	r1, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	01d2      	lsls	r2, r2, #7
 80062fa:	440a      	add	r2, r1
 80062fc:	3284      	adds	r2, #132	; 0x84
 80062fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006302:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006312:	4413      	add	r3, r2
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4619      	mov	r1, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	01db      	lsls	r3, r3, #7
 8006320:	440b      	add	r3, r1
 8006322:	3384      	adds	r3, #132	; 0x84
 8006324:	4619      	mov	r1, r3
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4313      	orrs	r3, r2
 800632a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	01db      	lsls	r3, r3, #7
 8006336:	4413      	add	r3, r2
 8006338:	3384      	adds	r3, #132	; 0x84
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	4611      	mov	r1, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	01d2      	lsls	r2, r2, #7
 8006346:	440a      	add	r2, r1
 8006348:	3284      	adds	r2, #132	; 0x84
 800634a:	f023 0307 	bic.w	r3, r3, #7
 800634e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	01db      	lsls	r3, r3, #7
 800635a:	4413      	add	r3, r2
 800635c:	3384      	adds	r3, #132	; 0x84
 800635e:	461a      	mov	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006376:	041b      	lsls	r3, r3, #16
 8006378:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	061b      	lsls	r3, r3, #24
 8006380:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	01db      	lsls	r3, r3, #7
 800638c:	4413      	add	r3, r2
 800638e:	3384      	adds	r3, #132	; 0x84
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	01db      	lsls	r3, r3, #7
 800639c:	4413      	add	r3, r2
 800639e:	3384      	adds	r3, #132	; 0x84
 80063a0:	461a      	mov	r2, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063ac:	461a      	mov	r2, r3
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	431a      	orrs	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	01db      	lsls	r3, r3, #7
 80063c0:	440b      	add	r3, r1
 80063c2:	3384      	adds	r3, #132	; 0x84
 80063c4:	4619      	mov	r1, r3
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	01db      	lsls	r3, r3, #7
 80063d6:	4413      	add	r3, r2
 80063d8:	3384      	adds	r3, #132	; 0x84
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	4611      	mov	r1, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	01d2      	lsls	r2, r2, #7
 80063e6:	440a      	add	r2, r1
 80063e8:	3284      	adds	r2, #132	; 0x84
 80063ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	01db      	lsls	r3, r3, #7
 80063fa:	4413      	add	r3, r2
 80063fc:	3384      	adds	r3, #132	; 0x84
 80063fe:	461a      	mov	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	01db      	lsls	r3, r3, #7
 8006410:	4413      	add	r3, r2
 8006412:	3384      	adds	r3, #132	; 0x84
 8006414:	69da      	ldr	r2, [r3, #28]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4619      	mov	r1, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	01db      	lsls	r3, r3, #7
 8006420:	440b      	add	r3, r1
 8006422:	3384      	adds	r3, #132	; 0x84
 8006424:	4619      	mov	r1, r3
 8006426:	4b58      	ldr	r3, [pc, #352]	; (8006588 <LTDC_SetConfig+0x32c>)
 8006428:	4013      	ands	r3, r2
 800642a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	68f9      	ldr	r1, [r7, #12]
 8006436:	6809      	ldr	r1, [r1, #0]
 8006438:	4608      	mov	r0, r1
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	01c9      	lsls	r1, r1, #7
 800643e:	4401      	add	r1, r0
 8006440:	3184      	adds	r1, #132	; 0x84
 8006442:	4313      	orrs	r3, r2
 8006444:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	01db      	lsls	r3, r3, #7
 8006450:	4413      	add	r3, r2
 8006452:	3384      	adds	r3, #132	; 0x84
 8006454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	01db      	lsls	r3, r3, #7
 8006460:	4413      	add	r3, r2
 8006462:	3384      	adds	r3, #132	; 0x84
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	4413      	add	r3, r2
 8006476:	3384      	adds	r3, #132	; 0x84
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006488:	2304      	movs	r3, #4
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	e01b      	b.n	80064c6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d102      	bne.n	800649c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006496:	2303      	movs	r3, #3
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	e014      	b.n	80064c6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d00b      	beq.n	80064bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d007      	beq.n	80064bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d003      	beq.n	80064bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064b8:	2b07      	cmp	r3, #7
 80064ba:	d102      	bne.n	80064c2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80064bc:	2302      	movs	r3, #2
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e001      	b.n	80064c6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	01db      	lsls	r3, r3, #7
 80064d0:	4413      	add	r3, r2
 80064d2:	3384      	adds	r3, #132	; 0x84
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	4611      	mov	r1, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	01d2      	lsls	r2, r2, #7
 80064e0:	440a      	add	r2, r1
 80064e2:	3284      	adds	r2, #132	; 0x84
 80064e4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80064e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	fb02 f303 	mul.w	r3, r2, r3
 80064f4:	041a      	lsls	r2, r3, #16
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6859      	ldr	r1, [r3, #4]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	1acb      	subs	r3, r1, r3
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	fb01 f303 	mul.w	r3, r1, r3
 8006506:	3303      	adds	r3, #3
 8006508:	68f9      	ldr	r1, [r7, #12]
 800650a:	6809      	ldr	r1, [r1, #0]
 800650c:	4608      	mov	r0, r1
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	01c9      	lsls	r1, r1, #7
 8006512:	4401      	add	r1, r0
 8006514:	3184      	adds	r1, #132	; 0x84
 8006516:	4313      	orrs	r3, r2
 8006518:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	01db      	lsls	r3, r3, #7
 8006524:	4413      	add	r3, r2
 8006526:	3384      	adds	r3, #132	; 0x84
 8006528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4619      	mov	r1, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	01db      	lsls	r3, r3, #7
 8006534:	440b      	add	r3, r1
 8006536:	3384      	adds	r3, #132	; 0x84
 8006538:	4619      	mov	r1, r3
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <LTDC_SetConfig+0x330>)
 800653c:	4013      	ands	r3, r2
 800653e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	01db      	lsls	r3, r3, #7
 800654a:	4413      	add	r3, r2
 800654c:	3384      	adds	r3, #132	; 0x84
 800654e:	461a      	mov	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	4413      	add	r3, r2
 8006562:	3384      	adds	r3, #132	; 0x84
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	4611      	mov	r1, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	01d2      	lsls	r2, r2, #7
 8006570:	440a      	add	r2, r1
 8006572:	3284      	adds	r2, #132	; 0x84
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	6013      	str	r3, [r2, #0]
}
 800657a:	bf00      	nop
 800657c:	3724      	adds	r7, #36	; 0x24
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	fffff8f8 	.word	0xfffff8f8
 800658c:	fffff800 	.word	0xfffff800

08006590 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80065a2:	2200      	movs	r2, #0
 80065a4:	e001      	b.n	80065aa <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80065a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d102      	bne.n	80065bc <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80065b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80065ba:	e000      	b.n	80065be <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80065bc:	2200      	movs	r2, #0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80065ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065ce:	e000      	b.n	80065d2 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80065d0:	2200      	movs	r2, #0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	4413      	add	r3, r2
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	441a      	add	r2, r3
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	4413      	add	r3, r2
 8006600:	1e5a      	subs	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	441a      	add	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	441a      	add	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	4413      	add	r3, r2
 800661c:	1e5a      	subs	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	4a22      	ldr	r2, [pc, #136]	; (80066c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006644:	6413      	str	r3, [r2, #64]	; 0x40
 8006646:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006652:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1d      	ldr	r2, [pc, #116]	; (80066cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800665c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800665e:	f7fc f985 	bl	800296c <HAL_GetTick>
 8006662:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006664:	e009      	b.n	800667a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006666:	f7fc f981 	bl	800296c <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006674:	d901      	bls.n	800667a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e022      	b.n	80066c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800667a:	4b14      	ldr	r3, [pc, #80]	; (80066cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006686:	d1ee      	bne.n	8006666 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006688:	4b10      	ldr	r3, [pc, #64]	; (80066cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a0f      	ldr	r2, [pc, #60]	; (80066cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800668e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006692:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006694:	f7fc f96a 	bl	800296c <HAL_GetTick>
 8006698:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800669a:	e009      	b.n	80066b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800669c:	f7fc f966 	bl	800296c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066aa:	d901      	bls.n	80066b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e007      	b.n	80066c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066bc:	d1ee      	bne.n	800669c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40023800 	.word	0x40023800
 80066cc:	40007000 	.word	0x40007000

080066d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80066d8:	2300      	movs	r3, #0
 80066da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e25e      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8087 	beq.w	8006802 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066f4:	4b96      	ldr	r3, [pc, #600]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 030c 	and.w	r3, r3, #12
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d00c      	beq.n	800671a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006700:	4b93      	ldr	r3, [pc, #588]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 030c 	and.w	r3, r3, #12
 8006708:	2b08      	cmp	r3, #8
 800670a:	d112      	bne.n	8006732 <HAL_RCC_OscConfig+0x62>
 800670c:	4b90      	ldr	r3, [pc, #576]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006718:	d10b      	bne.n	8006732 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800671a:	4b8d      	ldr	r3, [pc, #564]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d06c      	beq.n	8006800 <HAL_RCC_OscConfig+0x130>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d168      	bne.n	8006800 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e238      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673a:	d106      	bne.n	800674a <HAL_RCC_OscConfig+0x7a>
 800673c:	4b84      	ldr	r3, [pc, #528]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a83      	ldr	r2, [pc, #524]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	e02e      	b.n	80067a8 <HAL_RCC_OscConfig+0xd8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10c      	bne.n	800676c <HAL_RCC_OscConfig+0x9c>
 8006752:	4b7f      	ldr	r3, [pc, #508]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a7e      	ldr	r2, [pc, #504]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	4b7c      	ldr	r3, [pc, #496]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a7b      	ldr	r2, [pc, #492]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	e01d      	b.n	80067a8 <HAL_RCC_OscConfig+0xd8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006774:	d10c      	bne.n	8006790 <HAL_RCC_OscConfig+0xc0>
 8006776:	4b76      	ldr	r3, [pc, #472]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a75      	ldr	r2, [pc, #468]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800677c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	4b73      	ldr	r3, [pc, #460]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a72      	ldr	r2, [pc, #456]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	e00b      	b.n	80067a8 <HAL_RCC_OscConfig+0xd8>
 8006790:	4b6f      	ldr	r3, [pc, #444]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a6e      	ldr	r2, [pc, #440]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	4b6c      	ldr	r3, [pc, #432]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a6b      	ldr	r2, [pc, #428]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80067a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d013      	beq.n	80067d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b0:	f7fc f8dc 	bl	800296c <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067b8:	f7fc f8d8 	bl	800296c <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b64      	cmp	r3, #100	; 0x64
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e1ec      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ca:	4b61      	ldr	r3, [pc, #388]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0f0      	beq.n	80067b8 <HAL_RCC_OscConfig+0xe8>
 80067d6:	e014      	b.n	8006802 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d8:	f7fc f8c8 	bl	800296c <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067e0:	f7fc f8c4 	bl	800296c <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b64      	cmp	r3, #100	; 0x64
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e1d8      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067f2:	4b57      	ldr	r3, [pc, #348]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <HAL_RCC_OscConfig+0x110>
 80067fe:	e000      	b.n	8006802 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d069      	beq.n	80068e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800680e:	4b50      	ldr	r3, [pc, #320]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 030c 	and.w	r3, r3, #12
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800681a:	4b4d      	ldr	r3, [pc, #308]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 030c 	and.w	r3, r3, #12
 8006822:	2b08      	cmp	r3, #8
 8006824:	d11c      	bne.n	8006860 <HAL_RCC_OscConfig+0x190>
 8006826:	4b4a      	ldr	r3, [pc, #296]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d116      	bne.n	8006860 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006832:	4b47      	ldr	r3, [pc, #284]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <HAL_RCC_OscConfig+0x17a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d001      	beq.n	800684a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e1ac      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800684a:	4b41      	ldr	r3, [pc, #260]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	493d      	ldr	r1, [pc, #244]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800685a:	4313      	orrs	r3, r2
 800685c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685e:	e040      	b.n	80068e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d023      	beq.n	80068b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006868:	4b39      	ldr	r3, [pc, #228]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a38      	ldr	r2, [pc, #224]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006874:	f7fc f87a 	bl	800296c <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800687c:	f7fc f876 	bl	800296c <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e18a      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688e:	4b30      	ldr	r3, [pc, #192]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0f0      	beq.n	800687c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800689a:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4929      	ldr	r1, [pc, #164]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	600b      	str	r3, [r1, #0]
 80068ae:	e018      	b.n	80068e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068b0:	4b27      	ldr	r3, [pc, #156]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a26      	ldr	r2, [pc, #152]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068bc:	f7fc f856 	bl	800296c <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068c4:	f7fc f852 	bl	800296c <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e166      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068d6:	4b1e      	ldr	r3, [pc, #120]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d038      	beq.n	8006960 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d019      	beq.n	800692a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068f6:	4b16      	ldr	r3, [pc, #88]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80068f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fa:	4a15      	ldr	r2, [pc, #84]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006902:	f7fc f833 	bl	800296c <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800690a:	f7fc f82f 	bl	800296c <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e143      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691c:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800691e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0f0      	beq.n	800690a <HAL_RCC_OscConfig+0x23a>
 8006928:	e01a      	b.n	8006960 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 800692c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692e:	4a08      	ldr	r2, [pc, #32]	; (8006950 <HAL_RCC_OscConfig+0x280>)
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006936:	f7fc f819 	bl	800296c <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800693c:	e00a      	b.n	8006954 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800693e:	f7fc f815 	bl	800296c <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d903      	bls.n	8006954 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e129      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
 8006950:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006954:	4b95      	ldr	r3, [pc, #596]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ee      	bne.n	800693e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 80a4 	beq.w	8006ab6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800696e:	4b8f      	ldr	r3, [pc, #572]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10d      	bne.n	8006996 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800697a:	4b8c      	ldr	r3, [pc, #560]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	4a8b      	ldr	r2, [pc, #556]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006984:	6413      	str	r3, [r2, #64]	; 0x40
 8006986:	4b89      	ldr	r3, [pc, #548]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006996:	4b86      	ldr	r3, [pc, #536]	; (8006bb0 <HAL_RCC_OscConfig+0x4e0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d118      	bne.n	80069d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80069a2:	4b83      	ldr	r3, [pc, #524]	; (8006bb0 <HAL_RCC_OscConfig+0x4e0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a82      	ldr	r2, [pc, #520]	; (8006bb0 <HAL_RCC_OscConfig+0x4e0>)
 80069a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ae:	f7fb ffdd 	bl	800296c <HAL_GetTick>
 80069b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069b4:	e008      	b.n	80069c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069b6:	f7fb ffd9 	bl	800296c <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b64      	cmp	r3, #100	; 0x64
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e0ed      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069c8:	4b79      	ldr	r3, [pc, #484]	; (8006bb0 <HAL_RCC_OscConfig+0x4e0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0f0      	beq.n	80069b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d106      	bne.n	80069ea <HAL_RCC_OscConfig+0x31a>
 80069dc:	4b73      	ldr	r3, [pc, #460]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 80069de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e0:	4a72      	ldr	r2, [pc, #456]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	6713      	str	r3, [r2, #112]	; 0x70
 80069e8:	e02d      	b.n	8006a46 <HAL_RCC_OscConfig+0x376>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10c      	bne.n	8006a0c <HAL_RCC_OscConfig+0x33c>
 80069f2:	4b6e      	ldr	r3, [pc, #440]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f6:	4a6d      	ldr	r2, [pc, #436]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 80069f8:	f023 0301 	bic.w	r3, r3, #1
 80069fc:	6713      	str	r3, [r2, #112]	; 0x70
 80069fe:	4b6b      	ldr	r3, [pc, #428]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	4a6a      	ldr	r2, [pc, #424]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a04:	f023 0304 	bic.w	r3, r3, #4
 8006a08:	6713      	str	r3, [r2, #112]	; 0x70
 8006a0a:	e01c      	b.n	8006a46 <HAL_RCC_OscConfig+0x376>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	2b05      	cmp	r3, #5
 8006a12:	d10c      	bne.n	8006a2e <HAL_RCC_OscConfig+0x35e>
 8006a14:	4b65      	ldr	r3, [pc, #404]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	4a64      	ldr	r2, [pc, #400]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a1a:	f043 0304 	orr.w	r3, r3, #4
 8006a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a20:	4b62      	ldr	r3, [pc, #392]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a24:	4a61      	ldr	r2, [pc, #388]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a2c:	e00b      	b.n	8006a46 <HAL_RCC_OscConfig+0x376>
 8006a2e:	4b5f      	ldr	r3, [pc, #380]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	4a5e      	ldr	r2, [pc, #376]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	6713      	str	r3, [r2, #112]	; 0x70
 8006a3a:	4b5c      	ldr	r3, [pc, #368]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3e:	4a5b      	ldr	r2, [pc, #364]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a40:	f023 0304 	bic.w	r3, r3, #4
 8006a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d015      	beq.n	8006a7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4e:	f7fb ff8d 	bl	800296c <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a54:	e00a      	b.n	8006a6c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a56:	f7fb ff89 	bl	800296c <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e09b      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a6c:	4b4f      	ldr	r3, [pc, #316]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0ee      	beq.n	8006a56 <HAL_RCC_OscConfig+0x386>
 8006a78:	e014      	b.n	8006aa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7a:	f7fb ff77 	bl	800296c <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a80:	e00a      	b.n	8006a98 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a82:	f7fb ff73 	bl	800296c <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e085      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a98:	4b44      	ldr	r3, [pc, #272]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1ee      	bne.n	8006a82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d105      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aaa:	4b40      	ldr	r3, [pc, #256]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	4a3f      	ldr	r2, [pc, #252]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d071      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006abe:	4b3b      	ldr	r3, [pc, #236]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 030c 	and.w	r3, r3, #12
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	d069      	beq.n	8006b9e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d14b      	bne.n	8006b6a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ad2:	4b36      	ldr	r3, [pc, #216]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a35      	ldr	r2, [pc, #212]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ade:	f7fb ff45 	bl	800296c <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae6:	f7fb ff41 	bl	800296c <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e055      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006af8:	4b2c      	ldr	r3, [pc, #176]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f0      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	019b      	lsls	r3, r3, #6
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	061b      	lsls	r3, r3, #24
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	071b      	lsls	r3, r3, #28
 8006b30:	491e      	ldr	r1, [pc, #120]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b36:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1c      	ldr	r2, [pc, #112]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b42:	f7fb ff13 	bl	800296c <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b4a:	f7fb ff0f 	bl	800296c <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e023      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5c:	4b13      	ldr	r3, [pc, #76]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCC_OscConfig+0x47a>
 8006b68:	e01b      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b6a:	4b10      	ldr	r3, [pc, #64]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a0f      	ldr	r2, [pc, #60]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b76:	f7fb fef9 	bl	800296c <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7c:	e008      	b.n	8006b90 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b7e:	f7fb fef5 	bl	800296c <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e009      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <HAL_RCC_OscConfig+0x4dc>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f0      	bne.n	8006b7e <HAL_RCC_OscConfig+0x4ae>
 8006b9c:	e001      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	40007000 	.word	0x40007000

08006bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0ce      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bcc:	4b69      	ldr	r3, [pc, #420]	; (8006d74 <HAL_RCC_ClockConfig+0x1c0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 030f 	and.w	r3, r3, #15
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d910      	bls.n	8006bfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bda:	4b66      	ldr	r3, [pc, #408]	; (8006d74 <HAL_RCC_ClockConfig+0x1c0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f023 020f 	bic.w	r2, r3, #15
 8006be2:	4964      	ldr	r1, [pc, #400]	; (8006d74 <HAL_RCC_ClockConfig+0x1c0>)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bea:	4b62      	ldr	r3, [pc, #392]	; (8006d74 <HAL_RCC_ClockConfig+0x1c0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d001      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0b6      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d020      	beq.n	8006c4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c14:	4b58      	ldr	r3, [pc, #352]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4a57      	ldr	r2, [pc, #348]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c2c:	4b52      	ldr	r3, [pc, #328]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	4a51      	ldr	r2, [pc, #324]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c38:	4b4f      	ldr	r3, [pc, #316]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	494c      	ldr	r1, [pc, #304]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d040      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d107      	bne.n	8006c6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	4b46      	ldr	r3, [pc, #280]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d115      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e07d      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d107      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c76:	4b40      	ldr	r3, [pc, #256]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e071      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c86:	4b3c      	ldr	r3, [pc, #240]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e069      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c96:	4b38      	ldr	r3, [pc, #224]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f023 0203 	bic.w	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	4935      	ldr	r1, [pc, #212]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca8:	f7fb fe60 	bl	800296c <HAL_GetTick>
 8006cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cae:	e00a      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cb0:	f7fb fe5c 	bl	800296c <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e051      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc6:	4b2c      	ldr	r3, [pc, #176]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 020c 	and.w	r2, r3, #12
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d1eb      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd8:	4b26      	ldr	r3, [pc, #152]	; (8006d74 <HAL_RCC_ClockConfig+0x1c0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d210      	bcs.n	8006d08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce6:	4b23      	ldr	r3, [pc, #140]	; (8006d74 <HAL_RCC_ClockConfig+0x1c0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 020f 	bic.w	r2, r3, #15
 8006cee:	4921      	ldr	r1, [pc, #132]	; (8006d74 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf6:	4b1f      	ldr	r3, [pc, #124]	; (8006d74 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e030      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d008      	beq.n	8006d26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d14:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	4915      	ldr	r1, [pc, #84]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d32:	4b11      	ldr	r3, [pc, #68]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	490d      	ldr	r1, [pc, #52]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d46:	f000 f81d 	bl	8006d84 <HAL_RCC_GetSysClockFreq>
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	091b      	lsrs	r3, r3, #4
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	4a09      	ldr	r2, [pc, #36]	; (8006d7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d58:	5cd3      	ldrb	r3, [r2, r3]
 8006d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8006d5e:	4a08      	ldr	r2, [pc, #32]	; (8006d80 <HAL_RCC_ClockConfig+0x1cc>)
 8006d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006d62:	2000      	movs	r0, #0
 8006d64:	f7fb fdbe 	bl	80028e4 <HAL_InitTick>

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40023c00 	.word	0x40023c00
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	08011b78 	.word	0x08011b78
 8006d80:	200000b0 	.word	0x200000b0

08006d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	607b      	str	r3, [r7, #4]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	2300      	movs	r3, #0
 8006d94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d9a:	4b50      	ldr	r3, [pc, #320]	; (8006edc <HAL_RCC_GetSysClockFreq+0x158>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 030c 	and.w	r3, r3, #12
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d007      	beq.n	8006db6 <HAL_RCC_GetSysClockFreq+0x32>
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d008      	beq.n	8006dbc <HAL_RCC_GetSysClockFreq+0x38>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 808d 	bne.w	8006eca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006db2:	60bb      	str	r3, [r7, #8]
       break;
 8006db4:	e08c      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006db6:	4b4b      	ldr	r3, [pc, #300]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006db8:	60bb      	str	r3, [r7, #8]
      break;
 8006dba:	e089      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dbc:	4b47      	ldr	r3, [pc, #284]	; (8006edc <HAL_RCC_GetSysClockFreq+0x158>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006dc6:	4b45      	ldr	r3, [pc, #276]	; (8006edc <HAL_RCC_GetSysClockFreq+0x158>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d023      	beq.n	8006e1a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd2:	4b42      	ldr	r3, [pc, #264]	; (8006edc <HAL_RCC_GetSysClockFreq+0x158>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	099b      	lsrs	r3, r3, #6
 8006dd8:	f04f 0400 	mov.w	r4, #0
 8006ddc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	ea03 0501 	and.w	r5, r3, r1
 8006de8:	ea04 0602 	and.w	r6, r4, r2
 8006dec:	4a3d      	ldr	r2, [pc, #244]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006dee:	fb02 f106 	mul.w	r1, r2, r6
 8006df2:	2200      	movs	r2, #0
 8006df4:	fb02 f205 	mul.w	r2, r2, r5
 8006df8:	440a      	add	r2, r1
 8006dfa:	493a      	ldr	r1, [pc, #232]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006dfc:	fba5 0101 	umull	r0, r1, r5, r1
 8006e00:	1853      	adds	r3, r2, r1
 8006e02:	4619      	mov	r1, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f04f 0400 	mov.w	r4, #0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	4623      	mov	r3, r4
 8006e0e:	f7f9 fa6f 	bl	80002f0 <__aeabi_uldivmod>
 8006e12:	4603      	mov	r3, r0
 8006e14:	460c      	mov	r4, r1
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e049      	b.n	8006eae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1a:	4b30      	ldr	r3, [pc, #192]	; (8006edc <HAL_RCC_GetSysClockFreq+0x158>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	099b      	lsrs	r3, r3, #6
 8006e20:	f04f 0400 	mov.w	r4, #0
 8006e24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	ea03 0501 	and.w	r5, r3, r1
 8006e30:	ea04 0602 	and.w	r6, r4, r2
 8006e34:	4629      	mov	r1, r5
 8006e36:	4632      	mov	r2, r6
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	f04f 0400 	mov.w	r4, #0
 8006e40:	0154      	lsls	r4, r2, #5
 8006e42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e46:	014b      	lsls	r3, r1, #5
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	1b49      	subs	r1, r1, r5
 8006e4e:	eb62 0206 	sbc.w	r2, r2, r6
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	f04f 0400 	mov.w	r4, #0
 8006e5a:	0194      	lsls	r4, r2, #6
 8006e5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e60:	018b      	lsls	r3, r1, #6
 8006e62:	1a5b      	subs	r3, r3, r1
 8006e64:	eb64 0402 	sbc.w	r4, r4, r2
 8006e68:	f04f 0100 	mov.w	r1, #0
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	00e2      	lsls	r2, r4, #3
 8006e72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e76:	00d9      	lsls	r1, r3, #3
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4614      	mov	r4, r2
 8006e7c:	195b      	adds	r3, r3, r5
 8006e7e:	eb44 0406 	adc.w	r4, r4, r6
 8006e82:	f04f 0100 	mov.w	r1, #0
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	02a2      	lsls	r2, r4, #10
 8006e8c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006e90:	0299      	lsls	r1, r3, #10
 8006e92:	460b      	mov	r3, r1
 8006e94:	4614      	mov	r4, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	4621      	mov	r1, r4
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f04f 0400 	mov.w	r4, #0
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4623      	mov	r3, r4
 8006ea4:	f7f9 fa24 	bl	80002f0 <__aeabi_uldivmod>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	460c      	mov	r4, r1
 8006eac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <HAL_RCC_GetSysClockFreq+0x158>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	3301      	adds	r3, #1
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec6:	60bb      	str	r3, [r7, #8]
      break;
 8006ec8:	e002      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006ecc:	60bb      	str	r3, [r7, #8]
      break;
 8006ece:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	00f42400 	.word	0x00f42400
 8006ee4:	017d7840 	.word	0x017d7840

08006ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d012      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f10:	4b69      	ldr	r3, [pc, #420]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	4a68      	ldr	r2, [pc, #416]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f1a:	6093      	str	r3, [r2, #8]
 8006f1c:	4b66      	ldr	r3, [pc, #408]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f24:	4964      	ldr	r1, [pc, #400]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f32:	2301      	movs	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d017      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f42:	4b5d      	ldr	r3, [pc, #372]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f50:	4959      	ldr	r1, [pc, #356]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f60:	d101      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d017      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f7e:	4b4e      	ldr	r3, [pc, #312]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	494a      	ldr	r1, [pc, #296]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006faa:	2301      	movs	r3, #1
 8006fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 808b 	beq.w	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fcc:	4b3a      	ldr	r3, [pc, #232]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	4a39      	ldr	r2, [pc, #228]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8006fd8:	4b37      	ldr	r3, [pc, #220]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fe4:	4b35      	ldr	r3, [pc, #212]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a34      	ldr	r2, [pc, #208]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff0:	f7fb fcbc 	bl	800296c <HAL_GetTick>
 8006ff4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff8:	f7fb fcb8 	bl	800296c <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b64      	cmp	r3, #100	; 0x64
 8007004:	d901      	bls.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e38d      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800700a:	4b2c      	ldr	r3, [pc, #176]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0f0      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007016:	4b28      	ldr	r3, [pc, #160]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d035      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	429a      	cmp	r2, r3
 8007032:	d02e      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007034:	4b20      	ldr	r3, [pc, #128]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800703c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800703e:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	4a1d      	ldr	r2, [pc, #116]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007048:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800704a:	4b1b      	ldr	r3, [pc, #108]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704e:	4a1a      	ldr	r2, [pc, #104]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007054:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007056:	4a18      	ldr	r2, [pc, #96]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800705c:	4b16      	ldr	r3, [pc, #88]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b01      	cmp	r3, #1
 8007066:	d114      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007068:	f7fb fc80 	bl	800296c <HAL_GetTick>
 800706c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800706e:	e00a      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007070:	f7fb fc7c 	bl	800296c <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	f241 3288 	movw	r2, #5000	; 0x1388
 800707e:	4293      	cmp	r3, r2
 8007080:	d901      	bls.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e34f      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007086:	4b0c      	ldr	r3, [pc, #48]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0ee      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800709e:	d111      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070ac:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070ae:	400b      	ands	r3, r1
 80070b0:	4901      	ldr	r1, [pc, #4]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	608b      	str	r3, [r1, #8]
 80070b6:	e00b      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070b8:	40023800 	.word	0x40023800
 80070bc:	40007000 	.word	0x40007000
 80070c0:	0ffffcff 	.word	0x0ffffcff
 80070c4:	4bb3      	ldr	r3, [pc, #716]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4ab2      	ldr	r2, [pc, #712]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070ce:	6093      	str	r3, [r2, #8]
 80070d0:	4bb0      	ldr	r3, [pc, #704]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070dc:	49ad      	ldr	r1, [pc, #692]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d010      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070ee:	4ba9      	ldr	r3, [pc, #676]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f4:	4aa7      	ldr	r2, [pc, #668]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070fe:	4ba5      	ldr	r3, [pc, #660]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007100:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	49a2      	ldr	r1, [pc, #648]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800710a:	4313      	orrs	r3, r2
 800710c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00a      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800711c:	4b9d      	ldr	r3, [pc, #628]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800711e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800712a:	499a      	ldr	r1, [pc, #616]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800712c:	4313      	orrs	r3, r2
 800712e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800713e:	4b95      	ldr	r3, [pc, #596]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800714c:	4991      	ldr	r1, [pc, #580]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007160:	4b8c      	ldr	r3, [pc, #560]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716e:	4989      	ldr	r1, [pc, #548]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007170:	4313      	orrs	r3, r2
 8007172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007182:	4b84      	ldr	r3, [pc, #528]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007188:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007190:	4980      	ldr	r1, [pc, #512]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007192:	4313      	orrs	r3, r2
 8007194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071a4:	4b7b      	ldr	r3, [pc, #492]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071aa:	f023 0203 	bic.w	r2, r3, #3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	4978      	ldr	r1, [pc, #480]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071c6:	4b73      	ldr	r3, [pc, #460]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071cc:	f023 020c 	bic.w	r2, r3, #12
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d4:	496f      	ldr	r1, [pc, #444]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071e8:	4b6a      	ldr	r3, [pc, #424]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f6:	4967      	ldr	r1, [pc, #412]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800720a:	4b62      	ldr	r3, [pc, #392]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800720c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007210:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007218:	495e      	ldr	r1, [pc, #376]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800722c:	4b59      	ldr	r3, [pc, #356]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723a:	4956      	ldr	r1, [pc, #344]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800723c:	4313      	orrs	r3, r2
 800723e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800724e:	4b51      	ldr	r3, [pc, #324]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007254:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725c:	494d      	ldr	r1, [pc, #308]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007270:	4b48      	ldr	r3, [pc, #288]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727e:	4945      	ldr	r1, [pc, #276]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007280:	4313      	orrs	r3, r2
 8007282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007292:	4b40      	ldr	r3, [pc, #256]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a0:	493c      	ldr	r1, [pc, #240]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072b4:	4b37      	ldr	r3, [pc, #220]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c2:	4934      	ldr	r1, [pc, #208]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d011      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072d6:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e4:	492b      	ldr	r1, [pc, #172]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072f4:	d101      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072f6:	2301      	movs	r3, #1
 80072f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007306:	2301      	movs	r3, #1
 8007308:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007316:	4b1f      	ldr	r3, [pc, #124]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007324:	491b      	ldr	r1, [pc, #108]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007338:	4b16      	ldr	r3, [pc, #88]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007348:	4912      	ldr	r1, [pc, #72]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800734a:	4313      	orrs	r3, r2
 800734c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800735c:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800735e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007362:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736c:	4909      	ldr	r1, [pc, #36]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00f      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007386:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007390:	e002      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007392:	bf00      	nop
 8007394:	40023800 	.word	0x40023800
 8007398:	4985      	ldr	r1, [pc, #532]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80073ac:	4b80      	ldr	r3, [pc, #512]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073bc:	497c      	ldr	r1, [pc, #496]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d005      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d2:	f040 80d6 	bne.w	8007582 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073d6:	4b76      	ldr	r3, [pc, #472]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a75      	ldr	r2, [pc, #468]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e2:	f7fb fac3 	bl	800296c <HAL_GetTick>
 80073e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073e8:	e008      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073ea:	f7fb fabf 	bl	800296c <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b64      	cmp	r3, #100	; 0x64
 80073f6:	d901      	bls.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e194      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073fc:	4b6c      	ldr	r3, [pc, #432]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f0      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d021      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007418:	2b00      	cmp	r3, #0
 800741a:	d11d      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800741c:	4b64      	ldr	r3, [pc, #400]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800741e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007422:	0c1b      	lsrs	r3, r3, #16
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800742a:	4b61      	ldr	r3, [pc, #388]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800742c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007430:	0e1b      	lsrs	r3, r3, #24
 8007432:	f003 030f 	and.w	r3, r3, #15
 8007436:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	019a      	lsls	r2, r3, #6
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	041b      	lsls	r3, r3, #16
 8007442:	431a      	orrs	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	061b      	lsls	r3, r3, #24
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	071b      	lsls	r3, r3, #28
 8007450:	4957      	ldr	r1, [pc, #348]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800746c:	d00a      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007476:	2b00      	cmp	r3, #0
 8007478:	d02e      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007482:	d129      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007484:	4b4a      	ldr	r3, [pc, #296]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800748a:	0c1b      	lsrs	r3, r3, #16
 800748c:	f003 0303 	and.w	r3, r3, #3
 8007490:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007492:	4b47      	ldr	r3, [pc, #284]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007498:	0f1b      	lsrs	r3, r3, #28
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	019a      	lsls	r2, r3, #6
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	061b      	lsls	r3, r3, #24
 80074b2:	431a      	orrs	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	071b      	lsls	r3, r3, #28
 80074b8:	493d      	ldr	r1, [pc, #244]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074c0:	4b3b      	ldr	r3, [pc, #236]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074c6:	f023 021f 	bic.w	r2, r3, #31
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	3b01      	subs	r3, #1
 80074d0:	4937      	ldr	r1, [pc, #220]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01d      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074e4:	4b32      	ldr	r3, [pc, #200]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ea:	0e1b      	lsrs	r3, r3, #24
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074f2:	4b2f      	ldr	r3, [pc, #188]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f8:	0f1b      	lsrs	r3, r3, #28
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	019a      	lsls	r2, r3, #6
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	041b      	lsls	r3, r3, #16
 800750c:	431a      	orrs	r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	061b      	lsls	r3, r3, #24
 8007512:	431a      	orrs	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	071b      	lsls	r3, r3, #28
 8007518:	4925      	ldr	r1, [pc, #148]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d011      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	019a      	lsls	r2, r3, #6
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	041b      	lsls	r3, r3, #16
 8007538:	431a      	orrs	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	061b      	lsls	r3, r3, #24
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	071b      	lsls	r3, r3, #28
 8007548:	4919      	ldr	r1, [pc, #100]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800754a:	4313      	orrs	r3, r2
 800754c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007550:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a16      	ldr	r2, [pc, #88]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007556:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800755a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755c:	f7fb fa06 	bl	800296c <HAL_GetTick>
 8007560:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007562:	e008      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007564:	f7fb fa02 	bl	800296c <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b64      	cmp	r3, #100	; 0x64
 8007570:	d901      	bls.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e0d7      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007576:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0f0      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b01      	cmp	r3, #1
 8007586:	f040 80cd 	bne.w	8007724 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800758a:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a08      	ldr	r2, [pc, #32]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007596:	f7fb f9e9 	bl	800296c <HAL_GetTick>
 800759a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800759c:	e00a      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800759e:	f7fb f9e5 	bl	800296c <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b64      	cmp	r3, #100	; 0x64
 80075aa:	d903      	bls.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e0ba      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80075b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075b4:	4b5e      	ldr	r3, [pc, #376]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c0:	d0ed      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d02e      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d12a      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075ea:	4b51      	ldr	r3, [pc, #324]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f0:	0c1b      	lsrs	r3, r3, #16
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075f8:	4b4d      	ldr	r3, [pc, #308]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fe:	0f1b      	lsrs	r3, r3, #28
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	019a      	lsls	r2, r3, #6
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	041b      	lsls	r3, r3, #16
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	061b      	lsls	r3, r3, #24
 8007618:	431a      	orrs	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	071b      	lsls	r3, r3, #28
 800761e:	4944      	ldr	r1, [pc, #272]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007626:	4b42      	ldr	r3, [pc, #264]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800762c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	3b01      	subs	r3, #1
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	493d      	ldr	r1, [pc, #244]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d022      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007654:	d11d      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007656:	4b36      	ldr	r3, [pc, #216]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765c:	0e1b      	lsrs	r3, r3, #24
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007664:	4b32      	ldr	r3, [pc, #200]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766a:	0f1b      	lsrs	r3, r3, #28
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	019a      	lsls	r2, r3, #6
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	041b      	lsls	r3, r3, #16
 800767e:	431a      	orrs	r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	061b      	lsls	r3, r3, #24
 8007684:	431a      	orrs	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	071b      	lsls	r3, r3, #28
 800768a:	4929      	ldr	r1, [pc, #164]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800768c:	4313      	orrs	r3, r2
 800768e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d028      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800769e:	4b24      	ldr	r3, [pc, #144]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a4:	0e1b      	lsrs	r3, r3, #24
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076ac:	4b20      	ldr	r3, [pc, #128]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b2:	0c1b      	lsrs	r3, r3, #16
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	019a      	lsls	r2, r3, #6
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	041b      	lsls	r3, r3, #16
 80076c4:	431a      	orrs	r2, r3
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	061b      	lsls	r3, r3, #24
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	071b      	lsls	r3, r3, #28
 80076d2:	4917      	ldr	r1, [pc, #92]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076da:	4b15      	ldr	r3, [pc, #84]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4911      	ldr	r1, [pc, #68]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076f0:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a0e      	ldr	r2, [pc, #56]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fc:	f7fb f936 	bl	800296c <HAL_GetTick>
 8007700:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007702:	e008      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007704:	f7fb f932 	bl	800296c <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b64      	cmp	r3, #100	; 0x64
 8007710:	d901      	bls.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e007      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007716:	4b06      	ldr	r3, [pc, #24]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800771e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007722:	d1ef      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40023800 	.word	0x40023800

08007734 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e01d      	b.n	8007782 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d105      	bne.n	800775e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f006 fd91 	bl	800e280 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2203      	movs	r2, #3
 8007762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f80f 	bl	800778a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800778a:	b5b0      	push	{r4, r5, r7, lr}
 800778c:	b08e      	sub	sp, #56	; 0x38
 800778e:	af04      	add	r7, sp, #16
 8007790:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007792:	2300      	movs	r3, #0
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80077aa:	2376      	movs	r3, #118	; 0x76
 80077ac:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681d      	ldr	r5, [r3, #0]
 80077b2:	466c      	mov	r4, sp
 80077b4:	f107 0318 	add.w	r3, r7, #24
 80077b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077c0:	f107 030c 	add.w	r3, r7, #12
 80077c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077c6:	4628      	mov	r0, r5
 80077c8:	f001 fd90 	bl	80092ec <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077da:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 fdcd 	bl	8009380 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077f4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80077f6:	2002      	movs	r0, #2
 80077f8:	f7fb f8c4 	bl	8002984 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fee3 	bl	80085c8 <SD_PowerON>
 8007802:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e013      	b.n	800784a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fe07 	bl	8008436 <SD_InitCard>
 8007828:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3728      	adds	r7, #40	; 0x28
 800784e:	46bd      	mov	sp, r7
 8007850:	bdb0      	pop	{r4, r5, r7, pc}

08007852 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007852:	b590      	push	{r4, r7, lr}
 8007854:	b08f      	sub	sp, #60	; 0x3c
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
 800785e:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007860:	2300      	movs	r3, #0
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007864:	f7fb f882 	bl	800296c <HAL_GetTick>
 8007868:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 800786a:	2300      	movs	r3, #0
 800786c:	633b      	str	r3, [r7, #48]	; 0x30
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d107      	bne.n	8007888 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e176      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b01      	cmp	r3, #1
 8007892:	f040 8169 	bne.w	8007b68 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d907      	bls.n	80078ba <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e15d      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2203      	movs	r2, #3
 80078be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2200      	movs	r2, #0
 80078c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d002      	beq.n	80078d8 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	025b      	lsls	r3, r3, #9
 80078d6:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 fde1 	bl	80094a8 <SDMMC_CmdBlockLength>
 80078e6:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80078e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d010      	beq.n	8007910 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fe:	431a      	orrs	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e132      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007910:	f04f 33ff 	mov.w	r3, #4294967295
 8007914:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	025b      	lsls	r3, r3, #9
 800791a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800791c:	2390      	movs	r3, #144	; 0x90
 800791e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007920:	2302      	movs	r3, #2
 8007922:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007924:	2300      	movs	r3, #0
 8007926:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007928:	2301      	movs	r3, #1
 800792a:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f107 0210 	add.w	r2, r7, #16
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f001 fd8a 	bl	8009450 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d90a      	bls.n	8007958 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2202      	movs	r2, #2
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fdf2 	bl	8009538 <SDMMC_CmdReadMultiBlock>
 8007954:	6378      	str	r0, [r7, #52]	; 0x34
 8007956:	e009      	b.n	800796c <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	f001 fdc3 	bl	80094f0 <SDMMC_CmdReadSingleBlock>
 800796a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	2b00      	cmp	r3, #0
 8007970:	d04a      	beq.n	8007a08 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007982:	431a      	orrs	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0f0      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d016      	beq.n	80079d0 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	633b      	str	r3, [r7, #48]	; 0x30
 80079a6:	e00d      	b.n	80079c4 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6819      	ldr	r1, [r3, #0]
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b2:	18d4      	adds	r4, r2, r3
 80079b4:	4608      	mov	r0, r1
 80079b6:	f001 fcc5 	bl	8009344 <SDMMC_ReadFIFO>
 80079ba:	4603      	mov	r3, r0
 80079bc:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	3301      	adds	r3, #1
 80079c2:	633b      	str	r3, [r7, #48]	; 0x30
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	2b07      	cmp	r3, #7
 80079c8:	d9ee      	bls.n	80079a8 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	3320      	adds	r3, #32
 80079ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80079d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d007      	beq.n	80079e6 <HAL_SD_ReadBlocks+0x194>
 80079d6:	f7fa ffc9 	bl	800296c <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d810      	bhi.n	8007a08 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e0b6      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0be      	beq.n	8007994 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d020      	beq.n	8007a66 <HAL_SD_ReadBlocks+0x214>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d91d      	bls.n	8007a66 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d019      	beq.n	8007a66 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 fdea 	bl	8009610 <SDMMC_CmdStopTransfer>
 8007a3c:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d010      	beq.n	8007a66 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a54:	431a      	orrs	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e087      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6c:	f003 0308 	and.w	r3, r3, #8
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d010      	beq.n	8007a96 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	f043 0208 	orr.w	r2, r3, #8
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e06f      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d010      	beq.n	8007ac6 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	f043 0202 	orr.w	r2, r3, #2
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e057      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d037      	beq.n	8007b44 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	f043 0220 	orr.w	r2, r3, #32
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e03f      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 fc22 	bl	8009344 <SDMMC_ReadFIFO>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	3304      	adds	r3, #4
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d007      	beq.n	8007b22 <HAL_SD_ReadBlocks+0x2d0>
 8007b12:	f7fa ff2b 	bl	800296c <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d810      	bhi.n	8007b44 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e018      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1d1      	bne.n	8007af6 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	e006      	b.n	8007b76 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
  }
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	373c      	adds	r7, #60	; 0x3c
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd90      	pop	{r4, r7, pc}

08007b7e <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b08e      	sub	sp, #56	; 0x38
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
 8007b8a:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007b90:	f7fa feec 	bl	800296c <HAL_GetTick>
 8007b94:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d107      	bne.n	8007bb4 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e147      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	f040 813a 	bne.w	8007e36 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	441a      	add	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d907      	bls.n	8007be6 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e12e      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2203      	movs	r2, #3
 8007bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d002      	beq.n	8007c04 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	025b      	lsls	r3, r3, #9
 8007c02:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 fc4b 	bl	80094a8 <SDMMC_CmdBlockLength>
 8007c12:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d010      	beq.n	8007c3c <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e103      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d90a      	bls.n	8007c58 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f001 fcba 	bl	80095c8 <SDMMC_CmdWriteMultiBlock>
 8007c54:	6378      	str	r0, [r7, #52]	; 0x34
 8007c56:	e009      	b.n	8007c6c <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2210      	movs	r2, #16
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 fc8b 	bl	8009580 <SDMMC_CmdWriteSingleBlock>
 8007c6a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d010      	beq.n	8007c94 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	431a      	orrs	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0d7      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c94:	f04f 33ff 	mov.w	r3, #4294967295
 8007c98:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	025b      	lsls	r3, r3, #9
 8007c9e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ca0:	2390      	movs	r3, #144	; 0x90
 8007ca2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007cac:	2301      	movs	r3, #1
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f107 0210 	add.w	r2, r7, #16
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 fbc8 	bl	8009450 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007cc0:	e037      	b.n	8007d32 <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d014      	beq.n	8007cfa <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd4:	e00b      	b.n	8007cee <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce0:	4413      	add	r3, r2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	f001 fb3b 	bl	800935e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	3301      	adds	r3, #1
 8007cec:	633b      	str	r3, [r7, #48]	; 0x30
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	2b07      	cmp	r3, #7
 8007cf2:	d9f0      	bls.n	8007cd6 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	3320      	adds	r3, #32
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d007      	beq.n	8007d10 <HAL_SD_WriteBlocks+0x192>
 8007d00:	f7fa fe34 	bl	800296c <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d810      	bhi.n	8007d32 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d20:	431a      	orrs	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e088      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d38:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0c0      	beq.n	8007cc2 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d020      	beq.n	8007d90 <HAL_SD_WriteBlocks+0x212>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d91d      	bls.n	8007d90 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d019      	beq.n	8007d90 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 fc55 	bl	8009610 <SDMMC_CmdStopTransfer>
 8007d66:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d010      	beq.n	8007d90 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d76:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e059      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d010      	beq.n	8007dc0 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dac:	f043 0208 	orr.w	r2, r3, #8
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e041      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d010      	beq.n	8007df0 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	f043 0202 	orr.w	r2, r3, #2
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e029      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df6:	f003 0310 	and.w	r3, r3, #16
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007e06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	f043 0210 	orr.w	r2, r3, #16
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e011      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e006      	b.n	8007e44 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
  }
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3738      	adds	r7, #56	; 0x38
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5e:	0e1b      	lsrs	r3, r3, #24
 8007e60:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	099b      	lsrs	r3, r3, #6
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	089b      	lsrs	r3, r3, #2
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e94:	0c1b      	lsrs	r3, r3, #16
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea6:	0a1b      	lsrs	r3, r3, #8
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec8:	0e1b      	lsrs	r3, r3, #24
 8007eca:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007edc:	0c1b      	lsrs	r3, r3, #16
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	88db      	ldrh	r3, [r3, #6]
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	091b      	lsrs	r3, r3, #4
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f003 030f 	and.w	r3, r3, #15
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	09db      	lsrs	r3, r3, #7
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	099b      	lsrs	r3, r3, #6
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	091b      	lsrs	r3, r3, #4
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2200      	movs	r2, #0
 8007f58:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f040 8086 	bne.w	8008070 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	029b      	lsls	r3, r3, #10
 8007f68:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	431a      	orrs	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8a:	0e1b      	lsrs	r3, r3, #24
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	099b      	lsrs	r3, r3, #6
 8007f98:	f003 0303 	and.w	r3, r3, #3
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	08db      	lsrs	r3, r3, #3
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc4:	0c1b      	lsrs	r3, r3, #16
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	089b      	lsrs	r3, r3, #2
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0306 	and.w	r3, r3, #6
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008000:	0a1b      	lsrs	r3, r3, #8
 8008002:	b2db      	uxtb	r3, r3
 8008004:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	7e1b      	ldrb	r3, [r3, #24]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	09db      	lsrs	r3, r3, #7
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	4313      	orrs	r3, r2
 800801a:	b2da      	uxtb	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	7e1b      	ldrb	r3, [r3, #24]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	3302      	adds	r3, #2
 8008032:	2201      	movs	r2, #1
 8008034:	409a      	lsls	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803a:	fb02 f203 	mul.w	r2, r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	7a1b      	ldrb	r3, [r3, #8]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	2301      	movs	r3, #1
 800804c:	4093      	lsls	r3, r2
 800804e:	461a      	mov	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800805c:	0a52      	lsrs	r2, r2, #9
 800805e:	fb02 f203 	mul.w	r2, r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800806c:	661a      	str	r2, [r3, #96]	; 0x60
 800806e:	e04d      	b.n	800810c <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008074:	2b01      	cmp	r3, #1
 8008076:	d138      	bne.n	80080ea <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800807c:	b2db      	uxtb	r3, r3
 800807e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008090:	0e1b      	lsrs	r3, r3, #24
 8008092:	b2db      	uxtb	r3, r3
 8008094:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	691a      	ldr	r2, [r3, #16]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	431a      	orrs	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a8:	0c1b      	lsrs	r3, r3, #16
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	431a      	orrs	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	3301      	adds	r3, #1
 80080ca:	029a      	lsls	r2, r3, #10
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	655a      	str	r2, [r3, #84]	; 0x54
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080de:	659a      	str	r2, [r3, #88]	; 0x58
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	661a      	str	r2, [r3, #96]	; 0x60
 80080e8:	e010      	b.n	800810c <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e0c1      	b.n	8008290 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	099b      	lsrs	r3, r3, #6
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	b2da      	uxtb	r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8008128:	b2da      	uxtb	r2, r3
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008132:	b2db      	uxtb	r3, r3
 8008134:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	7e9b      	ldrb	r3, [r3, #26]
 800813a:	b2da      	uxtb	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	09db      	lsrs	r3, r3, #7
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	4313      	orrs	r3, r2
 800814a:	b2da      	uxtb	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008158:	b2da      	uxtb	r2, r3
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	0e1b      	lsrs	r3, r3, #24
 8008164:	b2db      	uxtb	r3, r3
 8008166:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	09db      	lsrs	r3, r3, #7
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	b2da      	uxtb	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	b2da      	uxtb	r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	089b      	lsrs	r3, r3, #2
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	b2da      	uxtb	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f003 030c 	and.w	r3, r3, #12
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ae:	0c1b      	lsrs	r3, r3, #16
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	7fdb      	ldrb	r3, [r3, #31]
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	099b      	lsrs	r3, r3, #6
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fc:	0a1b      	lsrs	r3, r3, #8
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	09db      	lsrs	r3, r3, #7
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	b2da      	uxtb	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	b2da      	uxtb	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	095b      	lsrs	r3, r3, #5
 800822a:	b2db      	uxtb	r3, r3
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	b2da      	uxtb	r2, r3
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	091b      	lsrs	r3, r3, #4
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	b2da      	uxtb	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	089b      	lsrs	r3, r3, #2
 800824e:	b2db      	uxtb	r3, r3
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	b2da      	uxtb	r2, r3
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	b2da      	uxtb	r2, r3
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	b2db      	uxtb	r3, r3
 8008272:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827e:	b2da      	uxtb	r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80082f4:	b5b0      	push	{r4, r5, r7, lr}
 80082f6:	b08e      	sub	sp, #56	; 0x38
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80082fe:	2300      	movs	r3, #0
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2203      	movs	r2, #3
 8008306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830e:	2b03      	cmp	r3, #3
 8008310:	d02e      	beq.n	8008370 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008318:	d106      	bne.n	8008328 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	639a      	str	r2, [r3, #56]	; 0x38
 8008326:	e029      	b.n	800837c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832e:	d10a      	bne.n	8008346 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fa1b 	bl	800876c <SD_WideBus_Enable>
 8008336:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	639a      	str	r2, [r3, #56]	; 0x38
 8008344:	e01a      	b.n	800837c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fa5a 	bl	8008806 <SD_WideBus_Disable>
 8008352:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
 8008360:	e00c      	b.n	800837c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
 800836e:	e005      	b.n	800837c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800838c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e024      	b.n	80083e4 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681d      	ldr	r5, [r3, #0]
 80083c0:	466c      	mov	r4, sp
 80083c2:	f107 0318 	add.w	r3, r7, #24
 80083c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083ce:	f107 030c 	add.w	r3, r7, #12
 80083d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083d4:	4628      	mov	r0, r5
 80083d6:	f000 ff89 	bl	80092ec <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3728      	adds	r7, #40	; 0x28
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bdb0      	pop	{r4, r5, r7, pc}

080083ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80083f4:	2304      	movs	r3, #4
 80083f6:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80083f8:	2300      	movs	r3, #0
 80083fa:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008400:	f107 030c 	add.w	r3, r7, #12
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f986 	bl	8008718 <SD_SendStatus>
 800840c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	0a5b      	lsrs	r3, r3, #9
 8008424:	b2db      	uxtb	r3, r3
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008436:	b5b0      	push	{r4, r5, r7, lr}
 8008438:	b094      	sub	sp, #80	; 0x50
 800843a:	af04      	add	r7, sp, #16
 800843c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800843e:	2300      	movs	r3, #0
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8008442:	2301      	movs	r3, #1
 8008444:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4618      	mov	r0, r3
 800844c:	f000 ffa6 	bl	800939c <SDMMC_GetPowerState>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008456:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800845a:	e0b1      	b.n	80085c0 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008460:	2b03      	cmp	r3, #3
 8008462:	d02f      	beq.n	80084c4 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4618      	mov	r0, r3
 800846a:	f001 f9ec 	bl	8009846 <SDMMC_CmdSendCID>
 800846e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <SD_InitCard+0x44>
    {
      return errorstate;
 8008476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008478:	e0a2      	b.n	80085c0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2100      	movs	r1, #0
 8008480:	4618      	mov	r0, r3
 8008482:	f000 ffd0 	bl	8009426 <SDMMC_GetResponse>
 8008486:	4602      	mov	r2, r0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2104      	movs	r1, #4
 8008492:	4618      	mov	r0, r3
 8008494:	f000 ffc7 	bl	8009426 <SDMMC_GetResponse>
 8008498:	4602      	mov	r2, r0
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2108      	movs	r1, #8
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 ffbe 	bl	8009426 <SDMMC_GetResponse>
 80084aa:	4602      	mov	r2, r0
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	210c      	movs	r1, #12
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 ffb5 	bl	8009426 <SDMMC_GetResponse>
 80084bc:	4602      	mov	r2, r0
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d00d      	beq.n	80084e8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f107 020e 	add.w	r2, r7, #14
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f9f6 	bl	80098c8 <SDMMC_CmdSetRelAdd>
 80084dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <SD_InitCard+0xb2>
    {
      return errorstate;
 80084e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e6:	e06b      	b.n	80085c0 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d036      	beq.n	800855e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80084f0:	89fb      	ldrh	r3, [r7, #14]
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008500:	041b      	lsls	r3, r3, #16
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f001 f9be 	bl	8009886 <SDMMC_CmdSendCSD>
 800850a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800850c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <SD_InitCard+0xe0>
    {
      return errorstate;
 8008512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008514:	e054      	b.n	80085c0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2100      	movs	r1, #0
 800851c:	4618      	mov	r0, r3
 800851e:	f000 ff82 	bl	8009426 <SDMMC_GetResponse>
 8008522:	4602      	mov	r2, r0
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2104      	movs	r1, #4
 800852e:	4618      	mov	r0, r3
 8008530:	f000 ff79 	bl	8009426 <SDMMC_GetResponse>
 8008534:	4602      	mov	r2, r0
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2108      	movs	r1, #8
 8008540:	4618      	mov	r0, r3
 8008542:	f000 ff70 	bl	8009426 <SDMMC_GetResponse>
 8008546:	4602      	mov	r2, r0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	210c      	movs	r1, #12
 8008552:	4618      	mov	r0, r3
 8008554:	f000 ff67 	bl	8009426 <SDMMC_GetResponse>
 8008558:	4602      	mov	r2, r0
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2104      	movs	r1, #4
 8008564:	4618      	mov	r0, r3
 8008566:	f000 ff5e 	bl	8009426 <SDMMC_GetResponse>
 800856a:	4603      	mov	r3, r0
 800856c:	0d1a      	lsrs	r2, r3, #20
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff fc67 	bl	8007e4c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6819      	ldr	r1, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008586:	041b      	lsls	r3, r3, #16
 8008588:	f04f 0400 	mov.w	r4, #0
 800858c:	461a      	mov	r2, r3
 800858e:	4623      	mov	r3, r4
 8008590:	4608      	mov	r0, r1
 8008592:	f001 f861 	bl	8009658 <SDMMC_CmdSelDesel>
 8008596:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <SD_InitCard+0x16c>
  {
    return errorstate;
 800859e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a0:	e00e      	b.n	80085c0 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681d      	ldr	r5, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	466c      	mov	r4, sp
 80085aa:	f103 0210 	add.w	r2, r3, #16
 80085ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80085b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085b4:	3304      	adds	r3, #4
 80085b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085b8:	4628      	mov	r0, r5
 80085ba:	f000 fe97 	bl	80092ec <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3740      	adds	r7, #64	; 0x40
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bdb0      	pop	{r4, r5, r7, pc}

080085c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80085dc:	2300      	movs	r3, #0
 80085de:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 f85c 	bl	80096a2 <SDMMC_CmdGoIdleState>
 80085ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <SD_PowerON+0x2e>
  {
    return errorstate;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	e08c      	b.n	8008710 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 f871 	bl	80096e2 <SDMMC_CmdOperCond>
 8008600:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d03d      	beq.n	8008684 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800860e:	e032      	b.n	8008676 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	60ba      	str	r2, [r7, #8]
 8008616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800861a:	4293      	cmp	r3, r2
 800861c:	d102      	bne.n	8008624 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800861e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008622:	e075      	b.n	8008710 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f001 f87a 	bl	8009724 <SDMMC_CmdAppCommand>
 8008630:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008638:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800863c:	e068      	b.n	8008710 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2100      	movs	r1, #0
 8008644:	4618      	mov	r0, r3
 8008646:	f001 f891 	bl	800976c <SDMMC_CmdAppOperCommand>
 800864a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008652:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008656:	e05b      	b.n	8008710 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f000 fee1 	bl	8009426 <SDMMC_GetResponse>
 8008664:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	0fdb      	lsrs	r3, r3, #31
 800866a:	2b01      	cmp	r3, #1
 800866c:	bf0c      	ite	eq
 800866e:	2301      	moveq	r3, #1
 8008670:	2300      	movne	r3, #0
 8008672:	b2db      	uxtb	r3, r3
 8008674:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0c9      	beq.n	8008610 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	645a      	str	r2, [r3, #68]	; 0x44
 8008682:	e044      	b.n	800870e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800868a:	e031      	b.n	80086f0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	60ba      	str	r2, [r7, #8]
 8008692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008696:	4293      	cmp	r3, r2
 8008698:	d102      	bne.n	80086a0 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800869a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800869e:	e037      	b.n	8008710 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2100      	movs	r1, #0
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 f83c 	bl	8009724 <SDMMC_CmdAppCommand>
 80086ac:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <SD_PowerON+0xf0>
      {
        return errorstate;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	e02b      	b.n	8008710 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 f853 	bl	800976c <SDMMC_CmdAppOperCommand>
 80086c6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <SD_PowerON+0x10a>
      {
        return errorstate;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	e01e      	b.n	8008710 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2100      	movs	r1, #0
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fea4 	bl	8009426 <SDMMC_GetResponse>
 80086de:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	0fdb      	lsrs	r3, r3, #31
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	bf0c      	ite	eq
 80086e8:	2301      	moveq	r3, #1
 80086ea:	2300      	movne	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d0ca      	beq.n	800868c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	645a      	str	r2, [r3, #68]	; 0x44
 8008706:	e002      	b.n	800870e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800872c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008730:	e018      	b.n	8008764 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f001 f8e5 	bl	800990e <SDMMC_CmdSendStatus>
 8008744:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <SD_SendStatus+0x38>
  {
    return errorstate;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	e009      	b.n	8008764 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f000 fe65 	bl	8009426 <SDMMC_GetResponse>
 800875c:	4602      	mov	r2, r0
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	2300      	movs	r3, #0
 800877a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fe4d 	bl	8009426 <SDMMC_GetResponse>
 800878c:	4603      	mov	r3, r0
 800878e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008796:	d102      	bne.n	800879e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800879c:	e02f      	b.n	80087fe <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800879e:	f107 030c 	add.w	r3, r7, #12
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f87b 	bl	80088a0 <SD_FindSCR>
 80087aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	e023      	b.n	80087fe <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01c      	beq.n	80087fa <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c8:	041b      	lsls	r3, r3, #16
 80087ca:	4619      	mov	r1, r3
 80087cc:	4610      	mov	r0, r2
 80087ce:	f000 ffa9 	bl	8009724 <SDMMC_CmdAppCommand>
 80087d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	e00f      	b.n	80087fe <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2102      	movs	r1, #2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 ffe7 	bl	80097b8 <SDMMC_CmdBusWidth>
 80087ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	e003      	b.n	80087fe <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80087f6:	2300      	movs	r3, #0
 80087f8:	e001      	b.n	80087fe <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b086      	sub	sp, #24
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2100      	movs	r1, #0
 8008820:	4618      	mov	r0, r3
 8008822:	f000 fe00 	bl	8009426 <SDMMC_GetResponse>
 8008826:	4603      	mov	r3, r0
 8008828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008830:	d102      	bne.n	8008838 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008836:	e02f      	b.n	8008898 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008838:	f107 030c 	add.w	r3, r7, #12
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f82e 	bl	80088a0 <SD_FindSCR>
 8008844:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	e023      	b.n	8008898 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01c      	beq.n	8008894 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008862:	041b      	lsls	r3, r3, #16
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f000 ff5c 	bl	8009724 <SDMMC_CmdAppCommand>
 800886c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	e00f      	b.n	8008898 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2100      	movs	r1, #0
 800887e:	4618      	mov	r0, r3
 8008880:	f000 ff9a 	bl	80097b8 <SDMMC_CmdBusWidth>
 8008884:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	e003      	b.n	8008898 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008890:	2300      	movs	r3, #0
 8008892:	e001      	b.n	8008898 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008894:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008898:	4618      	mov	r0, r3
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088a0:	b590      	push	{r4, r7, lr}
 80088a2:	b08f      	sub	sp, #60	; 0x3c
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80088ae:	f7fa f85d 	bl	800296c <HAL_GetTick>
 80088b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	2300      	movs	r3, #0
 80088be:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2108      	movs	r1, #8
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fdee 	bl	80094a8 <SDMMC_CmdBlockLength>
 80088cc:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	e0a8      	b.n	8008a2a <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e0:	041b      	lsls	r3, r3, #16
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f000 ff1d 	bl	8009724 <SDMMC_CmdAppCommand>
 80088ea:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	e099      	b.n	8008a2a <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295
 80088fa:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 80088fc:	2308      	movs	r3, #8
 80088fe:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008900:	2330      	movs	r3, #48	; 0x30
 8008902:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008904:	2302      	movs	r3, #2
 8008906:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008908:	2300      	movs	r3, #0
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800890c:	2301      	movs	r3, #1
 800890e:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f107 0214 	add.w	r2, r7, #20
 8008918:	4611      	mov	r1, r2
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fd98 	bl	8009450 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 ff6b 	bl	8009800 <SDMMC_CmdSendSCR>
 800892a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	2b00      	cmp	r3, #0
 8008930:	d022      	beq.n	8008978 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	e079      	b.n	8008a2a <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00e      	beq.n	8008962 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6819      	ldr	r1, [r3, #0]
 8008948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	f107 020c 	add.w	r2, r7, #12
 8008950:	18d4      	adds	r4, r2, r3
 8008952:	4608      	mov	r0, r1
 8008954:	f000 fcf6 	bl	8009344 <SDMMC_ReadFIFO>
 8008958:	4603      	mov	r3, r0
 800895a:	6023      	str	r3, [r4, #0]
      index++;
 800895c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895e:	3301      	adds	r3, #1
 8008960:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008962:	f7fa f803 	bl	800296c <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d102      	bne.n	8008978 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008972:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008976:	e058      	b.n	8008a2a <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800897e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008982:	4013      	ands	r3, r2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0d6      	beq.n	8008936 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d005      	beq.n	80089a2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2208      	movs	r2, #8
 800899c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800899e:	2308      	movs	r3, #8
 80089a0:	e043      	b.n	8008a2a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2202      	movs	r2, #2
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089b8:	2302      	movs	r3, #2
 80089ba:	e036      	b.n	8008a2a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	f003 0320 	and.w	r3, r3, #32
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d005      	beq.n	80089d6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2220      	movs	r2, #32
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80089d2:	2320      	movs	r3, #32
 80089d4:	e029      	b.n	8008a2a <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80089de:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	061a      	lsls	r2, r3, #24
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089ec:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	0a1b      	lsrs	r3, r3, #8
 80089f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089f6:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008a02:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a04:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	061a      	lsls	r2, r3, #24
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a12:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	0a1b      	lsrs	r3, r3, #8
 8008a18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a1c:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	0e1b      	lsrs	r3, r3, #24
 8008a22:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	373c      	adds	r7, #60	; 0x3c
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd90      	pop	{r4, r7, pc}

08008a32 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e025      	b.n	8008a92 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d106      	bne.n	8008a60 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f005 fd76 	bl	800e54c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f000 fb14 	bl	80090a0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	461a      	mov	r2, r3
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	f000 fb7e 	bl	8009184 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	60b9      	str	r1, [r7, #8]
 8008aa4:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d101      	bne.n	8008ab6 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	e018      	b.n	8008ae8 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fbdc 	bl	8009284 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d104      	bne.n	8008ade <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2205      	movs	r2, #5
 8008ad8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008adc:	e003      	b.n	8008ae6 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d101      	bne.n	8008b0a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008b06:	2302      	movs	r3, #2
 8008b08:	e00e      	b.n	8008b28 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fbd4 	bl	80092c6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e01d      	b.n	8008b7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f005 fc12 	bl	800e380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	f000 f97c 	bl	8008e6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68da      	ldr	r2, [r3, #12]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f042 0201 	orr.w	r2, r2, #1
 8008b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <HAL_TIM_Base_Start_IT+0x50>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b06      	cmp	r3, #6
 8008bb0:	d00b      	beq.n	8008bca <HAL_TIM_Base_Start_IT+0x42>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb8:	d007      	beq.n	8008bca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f042 0201 	orr.w	r2, r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	00010007 	.word	0x00010007

08008bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d122      	bne.n	8008c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d11b      	bne.n	8008c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f06f 0202 	mvn.w	r2, #2
 8008c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f003 0303 	and.w	r3, r3, #3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f905 	bl	8008e2e <HAL_TIM_IC_CaptureCallback>
 8008c24:	e005      	b.n	8008c32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f8f7 	bl	8008e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f908 	bl	8008e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d122      	bne.n	8008c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d11b      	bne.n	8008c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f06f 0204 	mvn.w	r2, #4
 8008c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f8db 	bl	8008e2e <HAL_TIM_IC_CaptureCallback>
 8008c78:	e005      	b.n	8008c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f8cd 	bl	8008e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f8de 	bl	8008e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b08      	cmp	r3, #8
 8008c98:	d122      	bne.n	8008ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f003 0308 	and.w	r3, r3, #8
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	d11b      	bne.n	8008ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f06f 0208 	mvn.w	r2, #8
 8008cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2204      	movs	r2, #4
 8008cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f8b1 	bl	8008e2e <HAL_TIM_IC_CaptureCallback>
 8008ccc:	e005      	b.n	8008cda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f8a3 	bl	8008e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f8b4 	bl	8008e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f003 0310 	and.w	r3, r3, #16
 8008cea:	2b10      	cmp	r3, #16
 8008cec:	d122      	bne.n	8008d34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f003 0310 	and.w	r3, r3, #16
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	d11b      	bne.n	8008d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f06f 0210 	mvn.w	r2, #16
 8008d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2208      	movs	r2, #8
 8008d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f887 	bl	8008e2e <HAL_TIM_IC_CaptureCallback>
 8008d20:	e005      	b.n	8008d2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f879 	bl	8008e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f88a 	bl	8008e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d10e      	bne.n	8008d60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d107      	bne.n	8008d60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f06f 0201 	mvn.w	r2, #1
 8008d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f003 fb2a 	bl	800c3b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6a:	2b80      	cmp	r3, #128	; 0x80
 8008d6c:	d10e      	bne.n	8008d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d78:	2b80      	cmp	r3, #128	; 0x80
 8008d7a:	d107      	bne.n	8008d8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f976 	bl	8009078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d9a:	d10e      	bne.n	8008dba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da6:	2b80      	cmp	r3, #128	; 0x80
 8008da8:	d107      	bne.n	8008dba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f969 	bl	800908c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc4:	2b40      	cmp	r3, #64	; 0x40
 8008dc6:	d10e      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd2:	2b40      	cmp	r3, #64	; 0x40
 8008dd4:	d107      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f838 	bl	8008e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f003 0320 	and.w	r3, r3, #32
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	d10e      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f003 0320 	and.w	r3, r3, #32
 8008dfe:	2b20      	cmp	r3, #32
 8008e00:	d107      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f06f 0220 	mvn.w	r2, #32
 8008e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f929 	bl	8009064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e12:	bf00      	nop
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e22:	bf00      	nop
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e36:	bf00      	nop
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
	...

08008e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a40      	ldr	r2, [pc, #256]	; (8008f80 <TIM_Base_SetConfig+0x114>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d013      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8a:	d00f      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a3d      	ldr	r2, [pc, #244]	; (8008f84 <TIM_Base_SetConfig+0x118>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00b      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a3c      	ldr	r2, [pc, #240]	; (8008f88 <TIM_Base_SetConfig+0x11c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d007      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a3b      	ldr	r2, [pc, #236]	; (8008f8c <TIM_Base_SetConfig+0x120>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d003      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a3a      	ldr	r2, [pc, #232]	; (8008f90 <TIM_Base_SetConfig+0x124>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d108      	bne.n	8008ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a2f      	ldr	r2, [pc, #188]	; (8008f80 <TIM_Base_SetConfig+0x114>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d02b      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ecc:	d027      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a2c      	ldr	r2, [pc, #176]	; (8008f84 <TIM_Base_SetConfig+0x118>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d023      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a2b      	ldr	r2, [pc, #172]	; (8008f88 <TIM_Base_SetConfig+0x11c>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d01f      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a2a      	ldr	r2, [pc, #168]	; (8008f8c <TIM_Base_SetConfig+0x120>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d01b      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a29      	ldr	r2, [pc, #164]	; (8008f90 <TIM_Base_SetConfig+0x124>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d017      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a28      	ldr	r2, [pc, #160]	; (8008f94 <TIM_Base_SetConfig+0x128>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d013      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a27      	ldr	r2, [pc, #156]	; (8008f98 <TIM_Base_SetConfig+0x12c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00f      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a26      	ldr	r2, [pc, #152]	; (8008f9c <TIM_Base_SetConfig+0x130>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00b      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a25      	ldr	r2, [pc, #148]	; (8008fa0 <TIM_Base_SetConfig+0x134>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d007      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a24      	ldr	r2, [pc, #144]	; (8008fa4 <TIM_Base_SetConfig+0x138>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d003      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a23      	ldr	r2, [pc, #140]	; (8008fa8 <TIM_Base_SetConfig+0x13c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d108      	bne.n	8008f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a0a      	ldr	r2, [pc, #40]	; (8008f80 <TIM_Base_SetConfig+0x114>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d003      	beq.n	8008f64 <TIM_Base_SetConfig+0xf8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a0c      	ldr	r2, [pc, #48]	; (8008f90 <TIM_Base_SetConfig+0x124>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d103      	bne.n	8008f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	691a      	ldr	r2, [r3, #16]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	615a      	str	r2, [r3, #20]
}
 8008f72:	bf00      	nop
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	40010000 	.word	0x40010000
 8008f84:	40000400 	.word	0x40000400
 8008f88:	40000800 	.word	0x40000800
 8008f8c:	40000c00 	.word	0x40000c00
 8008f90:	40010400 	.word	0x40010400
 8008f94:	40014000 	.word	0x40014000
 8008f98:	40014400 	.word	0x40014400
 8008f9c:	40014800 	.word	0x40014800
 8008fa0:	40001800 	.word	0x40001800
 8008fa4:	40001c00 	.word	0x40001c00
 8008fa8:	40002000 	.word	0x40002000

08008fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d101      	bne.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e045      	b.n	8009050 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a1c      	ldr	r2, [pc, #112]	; (800905c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d004      	beq.n	8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a1b      	ldr	r2, [pc, #108]	; (8009060 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d108      	bne.n	800900a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ffe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	4313      	orrs	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009022:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	4313      	orrs	r3, r2
 800902c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	40010000 	.word	0x40010000
 8009060:	40010400 	.word	0x40010400

08009064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d027      	beq.n	800910a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4b2f      	ldr	r3, [pc, #188]	; (8009180 <FMC_SDRAM_Init+0xe0>)
 80090c4:	4013      	ands	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80090d0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80090d6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80090dc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80090e2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80090e8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80090ee:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80090f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80090fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	e032      	b.n	8009170 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009116:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009120:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009126:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	4b12      	ldr	r3, [pc, #72]	; (8009180 <FMC_SDRAM_Init+0xe0>)
 8009138:	4013      	ands	r3, r2
 800913a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009144:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800914a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009150:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8009156:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800915c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	4313      	orrs	r3, r2
 8009162:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	ffff8000 	.word	0xffff8000

08009184 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d02e      	beq.n	80091fc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80091aa:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80091ba:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80091c4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80091ce:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80091d8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	3b01      	subs	r3, #1
 80091e0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80091e2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80091ec:	4313      	orrs	r3, r2
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	609a      	str	r2, [r3, #8]
 80091fa:	e039      	b.n	8009270 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	4b1e      	ldr	r3, [pc, #120]	; (8009280 <FMC_SDRAM_Timing_Init+0xfc>)
 8009206:	4013      	ands	r3, r2
 8009208:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	3b01      	subs	r3, #1
 8009210:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	3b01      	subs	r3, #1
 8009218:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800921a:	4313      	orrs	r3, r2
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800922e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	3b01      	subs	r3, #1
 800923c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800923e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	3b01      	subs	r3, #1
 8009246:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009248:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	3b01      	subs	r3, #1
 8009250:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009252:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	3b01      	subs	r3, #1
 800925a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800925c:	4313      	orrs	r3, r2
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	4313      	orrs	r3, r2
 8009262:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	ff0f0fff 	.word	0xff0f0fff

08009284 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800929c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80092a6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80092ae:	4313      	orrs	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	371c      	adds	r7, #28
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b083      	sub	sp, #12
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	695a      	ldr	r2, [r3, #20]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80092ec:	b084      	sub	sp, #16
 80092ee:	b480      	push	{r7}
 80092f0:	b085      	sub	sp, #20
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	f107 001c 	add.w	r0, r7, #28
 80092fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009302:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009304:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009306:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800930a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800930e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009312:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009316:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	4b07      	ldr	r3, [pc, #28]	; (8009340 <SDMMC_Init+0x54>)
 8009324:	4013      	ands	r3, r2
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	431a      	orrs	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	b004      	add	sp, #16
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	ffff8100 	.word	0xffff8100

08009344 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800935e:	b480      	push	{r7}
 8009360:	b083      	sub	sp, #12
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2203      	movs	r2, #3
 800938c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0303 	and.w	r3, r3, #3
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80093d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80093dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80093e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <SDMMC_SendCommand+0x50>)
 80093f0:	4013      	ands	r3, r2
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	431a      	orrs	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	fffff000 	.word	0xfffff000

0800940c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	b2db      	uxtb	r3, r3
}
 800941a:	4618      	mov	r0, r3
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009426:	b480      	push	{r7}
 8009428:	b085      	sub	sp, #20
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3314      	adds	r3, #20
 8009438:	461a      	mov	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	4413      	add	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
}  
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009476:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800947c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009482:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	431a      	orrs	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800949a:	2300      	movs	r3, #0

}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80094ba:	2310      	movs	r3, #16
 80094bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094be:	2340      	movs	r3, #64	; 0x40
 80094c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094cc:	f107 0308 	add.w	r3, r7, #8
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff ff70 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80094d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094dc:	2110      	movs	r1, #16
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa64 	bl	80099ac <SDMMC_GetCmdResp1>
 80094e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094e6:	69fb      	ldr	r3, [r7, #28]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3720      	adds	r7, #32
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094fa:	2300      	movs	r3, #0
 80094fc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009502:	2311      	movs	r3, #17
 8009504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009506:	2340      	movs	r3, #64	; 0x40
 8009508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800950a:	2300      	movs	r3, #0
 800950c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800950e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009512:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009514:	f107 0308 	add.w	r3, r7, #8
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff ff4c 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009520:	f241 3288 	movw	r2, #5000	; 0x1388
 8009524:	2111      	movs	r1, #17
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fa40 	bl	80099ac <SDMMC_GetCmdResp1>
 800952c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800952e:	69fb      	ldr	r3, [r7, #28]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3720      	adds	r7, #32
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009542:	2300      	movs	r3, #0
 8009544:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800954a:	2312      	movs	r3, #18
 800954c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800954e:	2340      	movs	r3, #64	; 0x40
 8009550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009552:	2300      	movs	r3, #0
 8009554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800955a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800955c:	f107 0308 	add.w	r3, r7, #8
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff ff28 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009568:	f241 3288 	movw	r2, #5000	; 0x1388
 800956c:	2112      	movs	r1, #18
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fa1c 	bl	80099ac <SDMMC_GetCmdResp1>
 8009574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009576:	69fb      	ldr	r3, [r7, #28]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800958a:	2300      	movs	r3, #0
 800958c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009592:	2318      	movs	r3, #24
 8009594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009596:	2340      	movs	r3, #64	; 0x40
 8009598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800959e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095a2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095a4:	f107 0308 	add.w	r3, r7, #8
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff ff04 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80095b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b4:	2118      	movs	r1, #24
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f9f8 	bl	80099ac <SDMMC_GetCmdResp1>
 80095bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095be:	69fb      	ldr	r3, [r7, #28]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80095da:	2319      	movs	r3, #25
 80095dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095de:	2340      	movs	r3, #64	; 0x40
 80095e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095ec:	f107 0308 	add.w	r3, r7, #8
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff fee0 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80095f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095fc:	2119      	movs	r1, #25
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f9d4 	bl	80099ac <SDMMC_GetCmdResp1>
 8009604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009606:	69fb      	ldr	r3, [r7, #28]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009618:	2300      	movs	r3, #0
 800961a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009620:	230c      	movs	r3, #12
 8009622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009624:	2340      	movs	r3, #64	; 0x40
 8009626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009628:	2300      	movs	r3, #0
 800962a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800962c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009630:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009632:	f107 0308 	add.w	r3, r7, #8
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff febd 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800963e:	4a05      	ldr	r2, [pc, #20]	; (8009654 <SDMMC_CmdStopTransfer+0x44>)
 8009640:	210c      	movs	r1, #12
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f9b2 	bl	80099ac <SDMMC_GetCmdResp1>
 8009648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800964a:	69fb      	ldr	r3, [r7, #28]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3720      	adds	r7, #32
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	05f5e100 	.word	0x05f5e100

08009658 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b08a      	sub	sp, #40	; 0x28
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009664:	2300      	movs	r3, #0
 8009666:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800966c:	2307      	movs	r3, #7
 800966e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009670:	2340      	movs	r3, #64	; 0x40
 8009672:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967c:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800967e:	f107 0310 	add.w	r3, r7, #16
 8009682:	4619      	mov	r1, r3
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff fe97 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800968a:	f241 3288 	movw	r2, #5000	; 0x1388
 800968e:	2107      	movs	r1, #7
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f98b 	bl	80099ac <SDMMC_GetCmdResp1>
 8009696:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800969a:	4618      	mov	r0, r3
 800969c:	3728      	adds	r7, #40	; 0x28
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b088      	sub	sp, #32
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096aa:	2300      	movs	r3, #0
 80096ac:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80096b6:	2300      	movs	r3, #0
 80096b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096ba:	2300      	movs	r3, #0
 80096bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096c2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096c4:	f107 0308 	add.w	r3, r7, #8
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7ff fe74 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f941 	bl	8009958 <SDMMC_GetCmdError>
 80096d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096d8:	69fb      	ldr	r3, [r7, #28]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3720      	adds	r7, #32
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b088      	sub	sp, #32
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096ea:	2300      	movs	r3, #0
 80096ec:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80096ee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80096f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80096f4:	2308      	movs	r3, #8
 80096f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096f8:	2340      	movs	r3, #64	; 0x40
 80096fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096fc:	2300      	movs	r3, #0
 80096fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009704:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009706:	f107 0308 	add.w	r3, r7, #8
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7ff fe53 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fb12 	bl	8009d3c <SDMMC_GetCmdResp7>
 8009718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800971a:	69fb      	ldr	r3, [r7, #28]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3720      	adds	r7, #32
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800972e:	2300      	movs	r3, #0
 8009730:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009736:	2337      	movs	r3, #55	; 0x37
 8009738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800973a:	2340      	movs	r3, #64	; 0x40
 800973c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800973e:	2300      	movs	r3, #0
 8009740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009746:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009748:	f107 0308 	add.w	r3, r7, #8
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff fe32 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009754:	f241 3288 	movw	r2, #5000	; 0x1388
 8009758:	2137      	movs	r1, #55	; 0x37
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f926 	bl	80099ac <SDMMC_GetCmdResp1>
 8009760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009762:	69fb      	ldr	r3, [r7, #28]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009776:	2300      	movs	r3, #0
 8009778:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <SDMMC_CmdAppOperCommand+0x48>)
 800977e:	4313      	orrs	r3, r2
 8009780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009782:	2329      	movs	r3, #41	; 0x29
 8009784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009786:	2340      	movs	r3, #64	; 0x40
 8009788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800978e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009792:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009794:	f107 0308 	add.w	r3, r7, #8
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7ff fe0c 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fa29 	bl	8009bf8 <SDMMC_GetCmdResp3>
 80097a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097a8:	69fb      	ldr	r3, [r7, #28]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3720      	adds	r7, #32
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	80100000 	.word	0x80100000

080097b8 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b088      	sub	sp, #32
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80097c2:	2300      	movs	r3, #0
 80097c4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80097ca:	2306      	movs	r3, #6
 80097cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097ce:	2340      	movs	r3, #64	; 0x40
 80097d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097d2:	2300      	movs	r3, #0
 80097d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097da:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097dc:	f107 0308 	add.w	r3, r7, #8
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff fde8 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80097e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ec:	2106      	movs	r1, #6
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8dc 	bl	80099ac <SDMMC_GetCmdResp1>
 80097f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097f6:	69fb      	ldr	r3, [r7, #28]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b088      	sub	sp, #32
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009808:	2300      	movs	r3, #0
 800980a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009810:	2333      	movs	r3, #51	; 0x33
 8009812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800981c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009820:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009822:	f107 0308 	add.w	r3, r7, #8
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff fdc5 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800982e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009832:	2133      	movs	r1, #51	; 0x33
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f8b9 	bl	80099ac <SDMMC_GetCmdResp1>
 800983a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800983c:	69fb      	ldr	r3, [r7, #28]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b088      	sub	sp, #32
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800984e:	2300      	movs	r3, #0
 8009850:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009856:	2302      	movs	r3, #2
 8009858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800985a:	23c0      	movs	r3, #192	; 0xc0
 800985c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800985e:	2300      	movs	r3, #0
 8009860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009866:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009868:	f107 0308 	add.w	r3, r7, #8
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7ff fda2 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f97f 	bl	8009b78 <SDMMC_GetCmdResp2>
 800987a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800987c:	69fb      	ldr	r3, [r7, #28]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3720      	adds	r7, #32
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b088      	sub	sp, #32
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009890:	2300      	movs	r3, #0
 8009892:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009898:	2309      	movs	r3, #9
 800989a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800989c:	23c0      	movs	r3, #192	; 0xc0
 800989e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098a0:	2300      	movs	r3, #0
 80098a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098a8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098aa:	f107 0308 	add.w	r3, r7, #8
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff fd81 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f95e 	bl	8009b78 <SDMMC_GetCmdResp2>
 80098bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098be:	69fb      	ldr	r3, [r7, #28]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3720      	adds	r7, #32
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80098d2:	2300      	movs	r3, #0
 80098d4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80098da:	2303      	movs	r3, #3
 80098dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098de:	2340      	movs	r3, #64	; 0x40
 80098e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098e2:	2300      	movs	r3, #0
 80098e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098ec:	f107 0308 	add.w	r3, r7, #8
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff fd60 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	2103      	movs	r1, #3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f9af 	bl	8009c60 <SDMMC_GetCmdResp6>
 8009902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009904:	69fb      	ldr	r3, [r7, #28]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b088      	sub	sp, #32
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009918:	2300      	movs	r3, #0
 800991a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009920:	230d      	movs	r3, #13
 8009922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009924:	2340      	movs	r3, #64	; 0x40
 8009926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800992c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009930:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fd3d 	bl	80093b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800993e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009942:	210d      	movs	r1, #13
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f831 	bl	80099ac <SDMMC_GetCmdResp1>
 800994a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800994c:	69fb      	ldr	r3, [r7, #28]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3720      	adds	r7, #32
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009958:	b490      	push	{r4, r7}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009960:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <SDMMC_GetCmdError+0x4c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a10      	ldr	r2, [pc, #64]	; (80099a8 <SDMMC_GetCmdError+0x50>)
 8009966:	fba2 2303 	umull	r2, r3, r2, r3
 800996a:	0a5b      	lsrs	r3, r3, #9
 800996c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009970:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009974:	4623      	mov	r3, r4
 8009976:	1e5c      	subs	r4, r3, #1
 8009978:	2b00      	cmp	r3, #0
 800997a:	d102      	bne.n	8009982 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800997c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009980:	e00a      	b.n	8009998 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0f2      	beq.n	8009974 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009994:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bc90      	pop	{r4, r7}
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	200000b0 	.word	0x200000b0
 80099a8:	10624dd3 	.word	0x10624dd3

080099ac <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80099ac:	b590      	push	{r4, r7, lr}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	460b      	mov	r3, r1
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80099ba:	4b6c      	ldr	r3, [pc, #432]	; (8009b6c <SDMMC_GetCmdResp1+0x1c0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a6c      	ldr	r2, [pc, #432]	; (8009b70 <SDMMC_GetCmdResp1+0x1c4>)
 80099c0:	fba2 2303 	umull	r2, r3, r2, r3
 80099c4:	0a5b      	lsrs	r3, r3, #9
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80099cc:	4623      	mov	r3, r4
 80099ce:	1e5c      	subs	r4, r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099d8:	e0c3      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0f2      	beq.n	80099cc <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ea:	f003 0304 	and.w	r3, r3, #4
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2204      	movs	r2, #4
 80099f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099f8:	2304      	movs	r3, #4
 80099fa:	e0b2      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d004      	beq.n	8009a12 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e0a7      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7ff fcfa 	bl	800940c <SDMMC_GetCommandResponse>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d001      	beq.n	8009a26 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e09d      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009a2e:	2100      	movs	r1, #0
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f7ff fcf8 	bl	8009426 <SDMMC_GetResponse>
 8009a36:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	4b4e      	ldr	r3, [pc, #312]	; (8009b74 <SDMMC_GetCmdResp1+0x1c8>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	e08d      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	da02      	bge.n	8009a52 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a50:	e087      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009a5c:	2340      	movs	r3, #64	; 0x40
 8009a5e:	e080      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009a6a:	2380      	movs	r3, #128	; 0x80
 8009a6c:	e079      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a7c:	e071      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a8c:	e069      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a9c:	e061      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009aac:	e059      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009abc:	e051      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009acc:	e049      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ad8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009adc:	e041      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d002      	beq.n	8009aee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aec:	e039      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009afc:	e031      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009b08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b0c:	e029      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009b18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009b1c:	e021      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d002      	beq.n	8009b2e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009b28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009b2c:	e019      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009b38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b3c:	e011      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009b48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b4c:	e009      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f003 0308 	and.w	r3, r3, #8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009b58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009b5c:	e001      	b.n	8009b62 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	371c      	adds	r7, #28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd90      	pop	{r4, r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200000b0 	.word	0x200000b0
 8009b70:	10624dd3 	.word	0x10624dd3
 8009b74:	fdffe008 	.word	0xfdffe008

08009b78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009b78:	b490      	push	{r4, r7}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009b80:	4b1b      	ldr	r3, [pc, #108]	; (8009bf0 <SDMMC_GetCmdResp2+0x78>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a1b      	ldr	r2, [pc, #108]	; (8009bf4 <SDMMC_GetCmdResp2+0x7c>)
 8009b86:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8a:	0a5b      	lsrs	r3, r3, #9
 8009b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009b94:	4623      	mov	r3, r4
 8009b96:	1e5c      	subs	r4, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d102      	bne.n	8009ba2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ba0:	e020      	b.n	8009be4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0f2      	beq.n	8009b94 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb2:	f003 0304 	and.w	r3, r3, #4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d004      	beq.n	8009bc4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	e00f      	b.n	8009be4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d004      	beq.n	8009bda <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e004      	b.n	8009be4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bc90      	pop	{r4, r7}
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	200000b0 	.word	0x200000b0
 8009bf4:	10624dd3 	.word	0x10624dd3

08009bf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009bf8:	b490      	push	{r4, r7}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009c00:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <SDMMC_GetCmdResp3+0x60>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a15      	ldr	r2, [pc, #84]	; (8009c5c <SDMMC_GetCmdResp3+0x64>)
 8009c06:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0a:	0a5b      	lsrs	r3, r3, #9
 8009c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009c14:	4623      	mov	r3, r4
 8009c16:	1e5c      	subs	r4, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c20:	e015      	b.n	8009c4e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c26:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0f2      	beq.n	8009c14 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d004      	beq.n	8009c44 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2204      	movs	r2, #4
 8009c3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c40:	2304      	movs	r3, #4
 8009c42:	e004      	b.n	8009c4e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009c4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bc90      	pop	{r4, r7}
 8009c56:	4770      	bx	lr
 8009c58:	200000b0 	.word	0x200000b0
 8009c5c:	10624dd3 	.word	0x10624dd3

08009c60 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009c6e:	4b31      	ldr	r3, [pc, #196]	; (8009d34 <SDMMC_GetCmdResp6+0xd4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a31      	ldr	r2, [pc, #196]	; (8009d38 <SDMMC_GetCmdResp6+0xd8>)
 8009c74:	fba2 2303 	umull	r2, r3, r2, r3
 8009c78:	0a5b      	lsrs	r3, r3, #9
 8009c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c7e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009c82:	4623      	mov	r3, r4
 8009c84:	1e5c      	subs	r4, r3, #1
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d102      	bne.n	8009c90 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c8e:	e04c      	b.n	8009d2a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c94:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d0f2      	beq.n	8009c82 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca0:	f003 0304 	and.w	r3, r3, #4
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d004      	beq.n	8009cb2 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2204      	movs	r2, #4
 8009cac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009cae:	2304      	movs	r3, #4
 8009cb0:	e03b      	b.n	8009d2a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d004      	beq.n	8009cc8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e030      	b.n	8009d2a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7ff fb9f 	bl	800940c <SDMMC_GetCommandResponse>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	7afb      	ldrb	r3, [r7, #11]
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d001      	beq.n	8009cdc <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e026      	b.n	8009d2a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009ce2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f7ff fb9d 	bl	8009426 <SDMMC_GetResponse>
 8009cec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d106      	bne.n	8009d06 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	0c1b      	lsrs	r3, r3, #16
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	e011      	b.n	8009d2a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d14:	e009      	b.n	8009d2a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d24:	e001      	b.n	8009d2a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	371c      	adds	r7, #28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd90      	pop	{r4, r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200000b0 	.word	0x200000b0
 8009d38:	10624dd3 	.word	0x10624dd3

08009d3c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009d3c:	b490      	push	{r4, r7}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009d44:	4b18      	ldr	r3, [pc, #96]	; (8009da8 <SDMMC_GetCmdResp7+0x6c>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a18      	ldr	r2, [pc, #96]	; (8009dac <SDMMC_GetCmdResp7+0x70>)
 8009d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4e:	0a5b      	lsrs	r3, r3, #9
 8009d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009d58:	4623      	mov	r3, r4
 8009d5a:	1e5c      	subs	r4, r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d64:	e01a      	b.n	8009d9c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0f2      	beq.n	8009d58 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d76:	f003 0304 	and.w	r3, r3, #4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d004      	beq.n	8009d88 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2240      	movs	r2, #64	; 0x40
 8009d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d84:	2304      	movs	r3, #4
 8009d86:	e009      	b.n	8009d9c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2240      	movs	r2, #64	; 0x40
 8009d98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009d9a:	2300      	movs	r3, #0
  
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bc90      	pop	{r4, r7}
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	200000b0 	.word	0x200000b0
 8009dac:	10624dd3 	.word	0x10624dd3

08009db0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009dba:	79fb      	ldrb	r3, [r7, #7]
 8009dbc:	4a08      	ldr	r2, [pc, #32]	; (8009de0 <disk_status+0x30>)
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	79fa      	ldrb	r2, [r7, #7]
 8009dc8:	4905      	ldr	r1, [pc, #20]	; (8009de0 <disk_status+0x30>)
 8009dca:	440a      	add	r2, r1
 8009dcc:	7a12      	ldrb	r2, [r2, #8]
 8009dce:	4610      	mov	r0, r2
 8009dd0:	4798      	blx	r3
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	2000036c 	.word	0x2000036c

08009de4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	4a0d      	ldr	r2, [pc, #52]	; (8009e2c <disk_initialize+0x48>)
 8009df6:	5cd3      	ldrb	r3, [r2, r3]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d111      	bne.n	8009e20 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009dfc:	79fb      	ldrb	r3, [r7, #7]
 8009dfe:	4a0b      	ldr	r2, [pc, #44]	; (8009e2c <disk_initialize+0x48>)
 8009e00:	2101      	movs	r1, #1
 8009e02:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009e04:	79fb      	ldrb	r3, [r7, #7]
 8009e06:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <disk_initialize+0x48>)
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	79fa      	ldrb	r2, [r7, #7]
 8009e12:	4906      	ldr	r1, [pc, #24]	; (8009e2c <disk_initialize+0x48>)
 8009e14:	440a      	add	r2, r1
 8009e16:	7a12      	ldrb	r2, [r2, #8]
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4798      	blx	r3
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	2000036c 	.word	0x2000036c

08009e30 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009e30:	b590      	push	{r4, r7, lr}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	607a      	str	r2, [r7, #4]
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	4a0a      	ldr	r2, [pc, #40]	; (8009e6c <disk_read+0x3c>)
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	689c      	ldr	r4, [r3, #8]
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	4a07      	ldr	r2, [pc, #28]	; (8009e6c <disk_read+0x3c>)
 8009e50:	4413      	add	r3, r2
 8009e52:	7a18      	ldrb	r0, [r3, #8]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	47a0      	blx	r4
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	371c      	adds	r7, #28
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd90      	pop	{r4, r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	2000036c 	.word	0x2000036c

08009e70 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009e70:	b590      	push	{r4, r7, lr}
 8009e72:	b087      	sub	sp, #28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
 8009e7a:	603b      	str	r3, [r7, #0]
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	4a0a      	ldr	r2, [pc, #40]	; (8009eac <disk_write+0x3c>)
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	68dc      	ldr	r4, [r3, #12]
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	4a07      	ldr	r2, [pc, #28]	; (8009eac <disk_write+0x3c>)
 8009e90:	4413      	add	r3, r2
 8009e92:	7a18      	ldrb	r0, [r3, #8]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	68b9      	ldr	r1, [r7, #8]
 8009e9a:	47a0      	blx	r4
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd90      	pop	{r4, r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	2000036c 	.word	0x2000036c

08009eb0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	603a      	str	r2, [r7, #0]
 8009eba:	71fb      	strb	r3, [r7, #7]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ec0:	79fb      	ldrb	r3, [r7, #7]
 8009ec2:	4a09      	ldr	r2, [pc, #36]	; (8009ee8 <disk_ioctl+0x38>)
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	79fa      	ldrb	r2, [r7, #7]
 8009ece:	4906      	ldr	r1, [pc, #24]	; (8009ee8 <disk_ioctl+0x38>)
 8009ed0:	440a      	add	r2, r1
 8009ed2:	7a10      	ldrb	r0, [r2, #8]
 8009ed4:	79b9      	ldrb	r1, [r7, #6]
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	4798      	blx	r3
 8009eda:	4603      	mov	r3, r0
 8009edc:	73fb      	strb	r3, [r7, #15]
  return res;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	2000036c 	.word	0x2000036c

08009eec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009efc:	89fb      	ldrh	r3, [r7, #14]
 8009efe:	021b      	lsls	r3, r3, #8
 8009f00:	b21a      	sxth	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	b21b      	sxth	r3, r3
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	b21b      	sxth	r3, r3
 8009f0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009f0e:	89fb      	ldrh	r3, [r7, #14]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3303      	adds	r3, #3
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	021b      	lsls	r3, r3, #8
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	3202      	adds	r2, #2
 8009f34:	7812      	ldrb	r2, [r2, #0]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	021b      	lsls	r3, r3, #8
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	3201      	adds	r2, #1
 8009f42:	7812      	ldrb	r2, [r2, #0]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	021b      	lsls	r3, r3, #8
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	7812      	ldrb	r2, [r2, #0]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]
	return rv;
 8009f54:	68fb      	ldr	r3, [r7, #12]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	887a      	ldrh	r2, [r7, #2]
 8009f76:	b2d2      	uxtb	r2, r2
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	887b      	ldrh	r3, [r7, #2]
 8009f7c:	0a1b      	lsrs	r3, r3, #8
 8009f7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	607a      	str	r2, [r7, #4]
 8009f86:	887a      	ldrh	r2, [r7, #2]
 8009f88:	b2d2      	uxtb	r2, r2
 8009f8a:	701a      	strb	r2, [r3, #0]
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	0a1b      	lsrs	r3, r3, #8
 8009fb2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	607a      	str	r2, [r7, #4]
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	b2d2      	uxtb	r2, r2
 8009fbe:	701a      	strb	r2, [r3, #0]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	0a1b      	lsrs	r3, r3, #8
 8009fc4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	0a1b      	lsrs	r3, r3, #8
 8009fd6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	607a      	str	r2, [r7, #4]
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	b2d2      	uxtb	r2, r2
 8009fe2:	701a      	strb	r2, [r3, #0]
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00d      	beq.n	800a026 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	1c53      	adds	r3, r2, #1
 800a00e:	613b      	str	r3, [r7, #16]
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	1c59      	adds	r1, r3, #1
 800a014:	6179      	str	r1, [r7, #20]
 800a016:	7812      	ldrb	r2, [r2, #0]
 800a018:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	607b      	str	r3, [r7, #4]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1f1      	bne.n	800a00a <mem_cpy+0x1a>
	}
}
 800a026:	bf00      	nop
 800a028:	371c      	adds	r7, #28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a032:	b480      	push	{r7}
 800a034:	b087      	sub	sp, #28
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	617a      	str	r2, [r7, #20]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	b2d2      	uxtb	r2, r2
 800a04c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3b01      	subs	r3, #1
 800a052:	607b      	str	r3, [r7, #4]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1f3      	bne.n	800a042 <mem_set+0x10>
}
 800a05a:	bf00      	nop
 800a05c:	371c      	adds	r7, #28
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a066:	b480      	push	{r7}
 800a068:	b089      	sub	sp, #36	; 0x24
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	61fb      	str	r3, [r7, #28]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	61fa      	str	r2, [r7, #28]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	4619      	mov	r1, r3
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	61ba      	str	r2, [r7, #24]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	1acb      	subs	r3, r1, r3
 800a092:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3b01      	subs	r3, #1
 800a098:	607b      	str	r3, [r7, #4]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <mem_cmp+0x40>
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0eb      	beq.n	800a07e <mem_cmp+0x18>

	return r;
 800a0a6:	697b      	ldr	r3, [r7, #20]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3724      	adds	r7, #36	; 0x24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a0be:	e002      	b.n	800a0c6 <chk_chr+0x12>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	607b      	str	r3, [r7, #4]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <chk_chr+0x26>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d1f2      	bne.n	800a0c0 <chk_chr+0xc>
	return *str;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
	...

0800a0ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60bb      	str	r3, [r7, #8]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	e029      	b.n	800a154 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a100:	4a27      	ldr	r2, [pc, #156]	; (800a1a0 <chk_lock+0xb4>)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	011b      	lsls	r3, r3, #4
 800a106:	4413      	add	r3, r2
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d01d      	beq.n	800a14a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a10e:	4a24      	ldr	r2, [pc, #144]	; (800a1a0 <chk_lock+0xb4>)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	4413      	add	r3, r2
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d116      	bne.n	800a14e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a120:	4a1f      	ldr	r2, [pc, #124]	; (800a1a0 <chk_lock+0xb4>)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	011b      	lsls	r3, r3, #4
 800a126:	4413      	add	r3, r2
 800a128:	3304      	adds	r3, #4
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a130:	429a      	cmp	r2, r3
 800a132:	d10c      	bne.n	800a14e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a134:	4a1a      	ldr	r2, [pc, #104]	; (800a1a0 <chk_lock+0xb4>)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	4413      	add	r3, r2
 800a13c:	3308      	adds	r3, #8
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a144:	429a      	cmp	r2, r3
 800a146:	d102      	bne.n	800a14e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a148:	e007      	b.n	800a15a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a14a:	2301      	movs	r3, #1
 800a14c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3301      	adds	r3, #1
 800a152:	60fb      	str	r3, [r7, #12]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d9d2      	bls.n	800a100 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d109      	bne.n	800a174 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <chk_lock+0x80>
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d101      	bne.n	800a170 <chk_lock+0x84>
 800a16c:	2300      	movs	r3, #0
 800a16e:	e010      	b.n	800a192 <chk_lock+0xa6>
 800a170:	2312      	movs	r3, #18
 800a172:	e00e      	b.n	800a192 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d108      	bne.n	800a18c <chk_lock+0xa0>
 800a17a:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <chk_lock+0xb4>)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	4413      	add	r3, r2
 800a182:	330c      	adds	r3, #12
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a18a:	d101      	bne.n	800a190 <chk_lock+0xa4>
 800a18c:	2310      	movs	r3, #16
 800a18e:	e000      	b.n	800a192 <chk_lock+0xa6>
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	2000034c 	.word	0x2000034c

0800a1a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	607b      	str	r3, [r7, #4]
 800a1ae:	e002      	b.n	800a1b6 <enq_lock+0x12>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	607b      	str	r3, [r7, #4]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d806      	bhi.n	800a1ca <enq_lock+0x26>
 800a1bc:	4a09      	ldr	r2, [pc, #36]	; (800a1e4 <enq_lock+0x40>)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	4413      	add	r3, r2
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1f2      	bne.n	800a1b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	bf14      	ite	ne
 800a1d0:	2301      	movne	r3, #1
 800a1d2:	2300      	moveq	r3, #0
 800a1d4:	b2db      	uxtb	r3, r3
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	2000034c 	.word	0x2000034c

0800a1e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
 800a1f6:	e01f      	b.n	800a238 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a1f8:	4a41      	ldr	r2, [pc, #260]	; (800a300 <inc_lock+0x118>)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	011b      	lsls	r3, r3, #4
 800a1fe:	4413      	add	r3, r2
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	429a      	cmp	r2, r3
 800a208:	d113      	bne.n	800a232 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a20a:	4a3d      	ldr	r2, [pc, #244]	; (800a300 <inc_lock+0x118>)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	011b      	lsls	r3, r3, #4
 800a210:	4413      	add	r3, r2
 800a212:	3304      	adds	r3, #4
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d109      	bne.n	800a232 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a21e:	4a38      	ldr	r2, [pc, #224]	; (800a300 <inc_lock+0x118>)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	011b      	lsls	r3, r3, #4
 800a224:	4413      	add	r3, r2
 800a226:	3308      	adds	r3, #8
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a22e:	429a      	cmp	r2, r3
 800a230:	d006      	beq.n	800a240 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3301      	adds	r3, #1
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d9dc      	bls.n	800a1f8 <inc_lock+0x10>
 800a23e:	e000      	b.n	800a242 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a240:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b02      	cmp	r3, #2
 800a246:	d132      	bne.n	800a2ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a248:	2300      	movs	r3, #0
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	e002      	b.n	800a254 <inc_lock+0x6c>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d806      	bhi.n	800a268 <inc_lock+0x80>
 800a25a:	4a29      	ldr	r2, [pc, #164]	; (800a300 <inc_lock+0x118>)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	4413      	add	r3, r2
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1f2      	bne.n	800a24e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d101      	bne.n	800a272 <inc_lock+0x8a>
 800a26e:	2300      	movs	r3, #0
 800a270:	e040      	b.n	800a2f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	4922      	ldr	r1, [pc, #136]	; (800a300 <inc_lock+0x118>)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	440b      	add	r3, r1
 800a27e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689a      	ldr	r2, [r3, #8]
 800a284:	491e      	ldr	r1, [pc, #120]	; (800a300 <inc_lock+0x118>)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	011b      	lsls	r3, r3, #4
 800a28a:	440b      	add	r3, r1
 800a28c:	3304      	adds	r3, #4
 800a28e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	695a      	ldr	r2, [r3, #20]
 800a294:	491a      	ldr	r1, [pc, #104]	; (800a300 <inc_lock+0x118>)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	011b      	lsls	r3, r3, #4
 800a29a:	440b      	add	r3, r1
 800a29c:	3308      	adds	r3, #8
 800a29e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a2a0:	4a17      	ldr	r2, [pc, #92]	; (800a300 <inc_lock+0x118>)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	4413      	add	r3, r2
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d009      	beq.n	800a2c8 <inc_lock+0xe0>
 800a2b4:	4a12      	ldr	r2, [pc, #72]	; (800a300 <inc_lock+0x118>)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	011b      	lsls	r3, r3, #4
 800a2ba:	4413      	add	r3, r2
 800a2bc:	330c      	adds	r3, #12
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <inc_lock+0xe0>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e015      	b.n	800a2f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d108      	bne.n	800a2e0 <inc_lock+0xf8>
 800a2ce:	4a0c      	ldr	r2, [pc, #48]	; (800a300 <inc_lock+0x118>)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	4413      	add	r3, r2
 800a2d6:	330c      	adds	r3, #12
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	e001      	b.n	800a2e4 <inc_lock+0xfc>
 800a2e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2e4:	4906      	ldr	r1, [pc, #24]	; (800a300 <inc_lock+0x118>)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	011b      	lsls	r3, r3, #4
 800a2ea:	440b      	add	r3, r1
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3301      	adds	r3, #1
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	2000034c 	.word	0x2000034c

0800a304 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3b01      	subs	r3, #1
 800a310:	607b      	str	r3, [r7, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d825      	bhi.n	800a364 <dec_lock+0x60>
		n = Files[i].ctr;
 800a318:	4a17      	ldr	r2, [pc, #92]	; (800a378 <dec_lock+0x74>)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	4413      	add	r3, r2
 800a320:	330c      	adds	r3, #12
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a326:	89fb      	ldrh	r3, [r7, #14]
 800a328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a32c:	d101      	bne.n	800a332 <dec_lock+0x2e>
 800a32e:	2300      	movs	r3, #0
 800a330:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a332:	89fb      	ldrh	r3, [r7, #14]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <dec_lock+0x3a>
 800a338:	89fb      	ldrh	r3, [r7, #14]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a33e:	4a0e      	ldr	r2, [pc, #56]	; (800a378 <dec_lock+0x74>)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	011b      	lsls	r3, r3, #4
 800a344:	4413      	add	r3, r2
 800a346:	330c      	adds	r3, #12
 800a348:	89fa      	ldrh	r2, [r7, #14]
 800a34a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a34c:	89fb      	ldrh	r3, [r7, #14]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d105      	bne.n	800a35e <dec_lock+0x5a>
 800a352:	4a09      	ldr	r2, [pc, #36]	; (800a378 <dec_lock+0x74>)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	011b      	lsls	r3, r3, #4
 800a358:	4413      	add	r3, r2
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	737b      	strb	r3, [r7, #13]
 800a362:	e001      	b.n	800a368 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a364:	2302      	movs	r3, #2
 800a366:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a368:	7b7b      	ldrb	r3, [r7, #13]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	2000034c 	.word	0x2000034c

0800a37c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a384:	2300      	movs	r3, #0
 800a386:	60fb      	str	r3, [r7, #12]
 800a388:	e010      	b.n	800a3ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a38a:	4a0d      	ldr	r2, [pc, #52]	; (800a3c0 <clear_lock+0x44>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	011b      	lsls	r3, r3, #4
 800a390:	4413      	add	r3, r2
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	429a      	cmp	r2, r3
 800a398:	d105      	bne.n	800a3a6 <clear_lock+0x2a>
 800a39a:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <clear_lock+0x44>)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	4413      	add	r3, r2
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d9eb      	bls.n	800a38a <clear_lock+0xe>
	}
}
 800a3b2:	bf00      	nop
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	2000034c 	.word	0x2000034c

0800a3c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	78db      	ldrb	r3, [r3, #3]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d034      	beq.n	800a442 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	7858      	ldrb	r0, [r3, #1]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	f7ff fd40 	bl	8009e70 <disk_write>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	73fb      	strb	r3, [r7, #15]
 800a3fa:	e022      	b.n	800a442 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	1ad2      	subs	r2, r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d217      	bcs.n	800a442 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	789b      	ldrb	r3, [r3, #2]
 800a416:	613b      	str	r3, [r7, #16]
 800a418:	e010      	b.n	800a43c <sync_window+0x78>
					wsect += fs->fsize;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4413      	add	r3, r2
 800a422:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	7858      	ldrb	r0, [r3, #1]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a42e:	2301      	movs	r3, #1
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	f7ff fd1d 	bl	8009e70 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	3b01      	subs	r3, #1
 800a43a:	613b      	str	r3, [r7, #16]
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d8eb      	bhi.n	800a41a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a442:	7bfb      	ldrb	r3, [r7, #15]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3718      	adds	r7, #24
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d01b      	beq.n	800a49c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7ff ffad 	bl	800a3c4 <sync_window>
 800a46a:	4603      	mov	r3, r0
 800a46c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d113      	bne.n	800a49c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	7858      	ldrb	r0, [r3, #1]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a47e:	2301      	movs	r3, #1
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	f7ff fcd5 	bl	8009e30 <disk_read>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a48c:	f04f 33ff 	mov.w	r3, #4294967295
 800a490:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a492:	2301      	movs	r3, #1
 800a494:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff ff87 	bl	800a3c4 <sync_window>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d158      	bne.n	800a572 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d148      	bne.n	800a55a <sync_fs+0xb2>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	791b      	ldrb	r3, [r3, #4]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d144      	bne.n	800a55a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	3330      	adds	r3, #48	; 0x30
 800a4d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff fda9 	bl	800a032 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3330      	adds	r3, #48	; 0x30
 800a4e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff fd38 	bl	8009f62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3330      	adds	r3, #48	; 0x30
 800a4f6:	4921      	ldr	r1, [pc, #132]	; (800a57c <sync_fs+0xd4>)
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fd4d 	bl	8009f98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3330      	adds	r3, #48	; 0x30
 800a502:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a506:	491e      	ldr	r1, [pc, #120]	; (800a580 <sync_fs+0xd8>)
 800a508:	4618      	mov	r0, r3
 800a50a:	f7ff fd45 	bl	8009f98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3330      	adds	r3, #48	; 0x30
 800a512:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	4619      	mov	r1, r3
 800a51c:	4610      	mov	r0, r2
 800a51e:	f7ff fd3b 	bl	8009f98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	3330      	adds	r3, #48	; 0x30
 800a526:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f7ff fd31 	bl	8009f98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	1c5a      	adds	r2, r3, #1
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	7858      	ldrb	r0, [r3, #1]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54e:	2301      	movs	r3, #1
 800a550:	f7ff fc8e 	bl	8009e70 <disk_write>
			fs->fsi_flag = 0;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	785b      	ldrb	r3, [r3, #1]
 800a55e:	2200      	movs	r2, #0
 800a560:	2100      	movs	r1, #0
 800a562:	4618      	mov	r0, r3
 800a564:	f7ff fca4 	bl	8009eb0 <disk_ioctl>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <sync_fs+0xca>
 800a56e:	2301      	movs	r3, #1
 800a570:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a572:	7bfb      	ldrb	r3, [r7, #15]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	41615252 	.word	0x41615252
 800a580:	61417272 	.word	0x61417272

0800a584 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	3b02      	subs	r3, #2
 800a592:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	3b02      	subs	r3, #2
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d301      	bcc.n	800a5a4 <clust2sect+0x20>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e008      	b.n	800a5b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	895b      	ldrh	r3, [r3, #10]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	fb03 f202 	mul.w	r2, r3, r2
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b4:	4413      	add	r3, r2
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b086      	sub	sp, #24
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d904      	bls.n	800a5e2 <get_fat+0x20>
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d302      	bcc.n	800a5e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	e08c      	b.n	800a702 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d045      	beq.n	800a682 <get_fat+0xc0>
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d05d      	beq.n	800a6b6 <get_fat+0xf4>
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d177      	bne.n	800a6ee <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	085b      	lsrs	r3, r3, #1
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	6a1a      	ldr	r2, [r3, #32]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	0a5b      	lsrs	r3, r3, #9
 800a614:	4413      	add	r3, r2
 800a616:	4619      	mov	r1, r3
 800a618:	6938      	ldr	r0, [r7, #16]
 800a61a:	f7ff ff17 	bl	800a44c <move_window>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d167      	bne.n	800a6f4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	60fa      	str	r2, [r7, #12]
 800a62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	4413      	add	r3, r2
 800a632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a636:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	6a1a      	ldr	r2, [r3, #32]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	0a5b      	lsrs	r3, r3, #9
 800a640:	4413      	add	r3, r2
 800a642:	4619      	mov	r1, r3
 800a644:	6938      	ldr	r0, [r7, #16]
 800a646:	f7ff ff01 	bl	800a44c <move_window>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d153      	bne.n	800a6f8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	4413      	add	r3, r2
 800a65a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a65e:	021b      	lsls	r3, r3, #8
 800a660:	461a      	mov	r2, r3
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	4313      	orrs	r3, r2
 800a666:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <get_fat+0xb6>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	091b      	lsrs	r3, r3, #4
 800a676:	e002      	b.n	800a67e <get_fat+0xbc>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a67e:	617b      	str	r3, [r7, #20]
			break;
 800a680:	e03f      	b.n	800a702 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	6a1a      	ldr	r2, [r3, #32]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	0a1b      	lsrs	r3, r3, #8
 800a68a:	4413      	add	r3, r2
 800a68c:	4619      	mov	r1, r3
 800a68e:	6938      	ldr	r0, [r7, #16]
 800a690:	f7ff fedc 	bl	800a44c <move_window>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d130      	bne.n	800a6fc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a6a8:	4413      	add	r3, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff fc1e 	bl	8009eec <ld_word>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	617b      	str	r3, [r7, #20]
			break;
 800a6b4:	e025      	b.n	800a702 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	6a1a      	ldr	r2, [r3, #32]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	09db      	lsrs	r3, r3, #7
 800a6be:	4413      	add	r3, r2
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6938      	ldr	r0, [r7, #16]
 800a6c4:	f7ff fec2 	bl	800a44c <move_window>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d118      	bne.n	800a700 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a6dc:	4413      	add	r3, r2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff fc1c 	bl	8009f1c <ld_dword>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a6ea:	617b      	str	r3, [r7, #20]
			break;
 800a6ec:	e009      	b.n	800a702 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	e006      	b.n	800a702 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6f4:	bf00      	nop
 800a6f6:	e004      	b.n	800a702 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6f8:	bf00      	nop
 800a6fa:	e002      	b.n	800a702 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6fc:	bf00      	nop
 800a6fe:	e000      	b.n	800a702 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a700:	bf00      	nop
		}
	}

	return val;
 800a702:	697b      	ldr	r3, [r7, #20]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a70c:	b590      	push	{r4, r7, lr}
 800a70e:	b089      	sub	sp, #36	; 0x24
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a718:	2302      	movs	r3, #2
 800a71a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	f240 80d6 	bls.w	800a8d0 <put_fat+0x1c4>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	f080 80d0 	bcs.w	800a8d0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	2b02      	cmp	r3, #2
 800a736:	d073      	beq.n	800a820 <put_fat+0x114>
 800a738:	2b03      	cmp	r3, #3
 800a73a:	f000 8091 	beq.w	800a860 <put_fat+0x154>
 800a73e:	2b01      	cmp	r3, #1
 800a740:	f040 80c6 	bne.w	800a8d0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	61bb      	str	r3, [r7, #24]
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	085b      	lsrs	r3, r3, #1
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	4413      	add	r3, r2
 800a750:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6a1a      	ldr	r2, [r3, #32]
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	0a5b      	lsrs	r3, r3, #9
 800a75a:	4413      	add	r3, r2
 800a75c:	4619      	mov	r1, r3
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7ff fe74 	bl	800a44c <move_window>
 800a764:	4603      	mov	r3, r0
 800a766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a768:	7ffb      	ldrb	r3, [r7, #31]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f040 80a9 	bne.w	800a8c2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	1c59      	adds	r1, r3, #1
 800a77a:	61b9      	str	r1, [r7, #24]
 800a77c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a780:	4413      	add	r3, r2
 800a782:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00d      	beq.n	800a7aa <put_fat+0x9e>
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	b25b      	sxtb	r3, r3
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	b25a      	sxtb	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	011b      	lsls	r3, r3, #4
 800a7a0:	b25b      	sxtb	r3, r3
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	b25b      	sxtb	r3, r3
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	e001      	b.n	800a7ae <put_fat+0xa2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a1a      	ldr	r2, [r3, #32]
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	0a5b      	lsrs	r3, r3, #9
 800a7c0:	4413      	add	r3, r2
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f7ff fe41 	bl	800a44c <move_window>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7ce:	7ffb      	ldrb	r3, [r7, #31]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d178      	bne.n	800a8c6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e0:	4413      	add	r3, r2
 800a7e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <put_fat+0xea>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	091b      	lsrs	r3, r3, #4
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	e00e      	b.n	800a814 <put_fat+0x108>
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	b25b      	sxtb	r3, r3
 800a7fc:	f023 030f 	bic.w	r3, r3, #15
 800a800:	b25a      	sxtb	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	0a1b      	lsrs	r3, r3, #8
 800a806:	b25b      	sxtb	r3, r3
 800a808:	f003 030f 	and.w	r3, r3, #15
 800a80c:	b25b      	sxtb	r3, r3
 800a80e:	4313      	orrs	r3, r2
 800a810:	b25b      	sxtb	r3, r3
 800a812:	b2db      	uxtb	r3, r3
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2201      	movs	r2, #1
 800a81c:	70da      	strb	r2, [r3, #3]
			break;
 800a81e:	e057      	b.n	800a8d0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a1a      	ldr	r2, [r3, #32]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	0a1b      	lsrs	r3, r3, #8
 800a828:	4413      	add	r3, r2
 800a82a:	4619      	mov	r1, r3
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f7ff fe0d 	bl	800a44c <move_window>
 800a832:	4603      	mov	r3, r0
 800a834:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a836:	7ffb      	ldrb	r3, [r7, #31]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d146      	bne.n	800a8ca <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a84a:	4413      	add	r3, r2
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	b292      	uxth	r2, r2
 800a850:	4611      	mov	r1, r2
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff fb85 	bl	8009f62 <st_word>
			fs->wflag = 1;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2201      	movs	r2, #1
 800a85c:	70da      	strb	r2, [r3, #3]
			break;
 800a85e:	e037      	b.n	800a8d0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a1a      	ldr	r2, [r3, #32]
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	09db      	lsrs	r3, r3, #7
 800a868:	4413      	add	r3, r2
 800a86a:	4619      	mov	r1, r3
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f7ff fded 	bl	800a44c <move_window>
 800a872:	4603      	mov	r3, r0
 800a874:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a876:	7ffb      	ldrb	r3, [r7, #31]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d128      	bne.n	800a8ce <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a890:	4413      	add	r3, r2
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff fb42 	bl	8009f1c <ld_dword>
 800a898:	4603      	mov	r3, r0
 800a89a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a89e:	4323      	orrs	r3, r4
 800a8a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a8b0:	4413      	add	r3, r2
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fb6f 	bl	8009f98 <st_dword>
			fs->wflag = 1;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	70da      	strb	r2, [r3, #3]
			break;
 800a8c0:	e006      	b.n	800a8d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8c2:	bf00      	nop
 800a8c4:	e004      	b.n	800a8d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8c6:	bf00      	nop
 800a8c8:	e002      	b.n	800a8d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8ca:	bf00      	nop
 800a8cc:	e000      	b.n	800a8d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8ce:	bf00      	nop
		}
	}
	return res;
 800a8d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3724      	adds	r7, #36	; 0x24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd90      	pop	{r4, r7, pc}

0800a8da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b088      	sub	sp, #32
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d904      	bls.n	800a900 <remove_chain+0x26>
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d301      	bcc.n	800a904 <remove_chain+0x2a>
 800a900:	2302      	movs	r3, #2
 800a902:	e04b      	b.n	800a99c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00c      	beq.n	800a924 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a90a:	f04f 32ff 	mov.w	r2, #4294967295
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	69b8      	ldr	r0, [r7, #24]
 800a912:	f7ff fefb 	bl	800a70c <put_fat>
 800a916:	4603      	mov	r3, r0
 800a918:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a91a:	7ffb      	ldrb	r3, [r7, #31]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <remove_chain+0x4a>
 800a920:	7ffb      	ldrb	r3, [r7, #31]
 800a922:	e03b      	b.n	800a99c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f7ff fe4b 	bl	800a5c2 <get_fat>
 800a92c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d031      	beq.n	800a998 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d101      	bne.n	800a93e <remove_chain+0x64>
 800a93a:	2302      	movs	r3, #2
 800a93c:	e02e      	b.n	800a99c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a944:	d101      	bne.n	800a94a <remove_chain+0x70>
 800a946:	2301      	movs	r3, #1
 800a948:	e028      	b.n	800a99c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a94a:	2200      	movs	r2, #0
 800a94c:	68b9      	ldr	r1, [r7, #8]
 800a94e:	69b8      	ldr	r0, [r7, #24]
 800a950:	f7ff fedc 	bl	800a70c <put_fat>
 800a954:	4603      	mov	r3, r0
 800a956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a958:	7ffb      	ldrb	r3, [r7, #31]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <remove_chain+0x88>
 800a95e:	7ffb      	ldrb	r3, [r7, #31]
 800a960:	e01c      	b.n	800a99c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	691a      	ldr	r2, [r3, #16]
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	3b02      	subs	r3, #2
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d20b      	bcs.n	800a988 <remove_chain+0xae>
			fs->free_clst++;
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	791b      	ldrb	r3, [r3, #4]
 800a97e:	f043 0301 	orr.w	r3, r3, #1
 800a982:	b2da      	uxtb	r2, r3
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	429a      	cmp	r2, r3
 800a994:	d3c6      	bcc.n	800a924 <remove_chain+0x4a>
 800a996:	e000      	b.n	800a99a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a998:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3720      	adds	r7, #32
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10d      	bne.n	800a9d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d004      	beq.n	800a9d0 <create_chain+0x2c>
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	69ba      	ldr	r2, [r7, #24]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d31b      	bcc.n	800aa08 <create_chain+0x64>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	61bb      	str	r3, [r7, #24]
 800a9d4:	e018      	b.n	800aa08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7ff fdf2 	bl	800a5c2 <get_fat>
 800a9de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d801      	bhi.n	800a9ea <create_chain+0x46>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e070      	b.n	800aacc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f0:	d101      	bne.n	800a9f6 <create_chain+0x52>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	e06a      	b.n	800aacc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d201      	bcs.n	800aa04 <create_chain+0x60>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	e063      	b.n	800aacc <create_chain+0x128>
		scl = clst;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	69fa      	ldr	r2, [r7, #28]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d307      	bcc.n	800aa2c <create_chain+0x88>
				ncl = 2;
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aa20:	69fa      	ldr	r2, [r7, #28]
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d901      	bls.n	800aa2c <create_chain+0x88>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e04f      	b.n	800aacc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa2c:	69f9      	ldr	r1, [r7, #28]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7ff fdc7 	bl	800a5c2 <get_fat>
 800aa34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00e      	beq.n	800aa5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d003      	beq.n	800aa4a <create_chain+0xa6>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa48:	d101      	bne.n	800aa4e <create_chain+0xaa>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	e03e      	b.n	800aacc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aa4e:	69fa      	ldr	r2, [r7, #28]
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d1da      	bne.n	800aa0c <create_chain+0x68>
 800aa56:	2300      	movs	r3, #0
 800aa58:	e038      	b.n	800aacc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aa5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aa5c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa60:	69f9      	ldr	r1, [r7, #28]
 800aa62:	6938      	ldr	r0, [r7, #16]
 800aa64:	f7ff fe52 	bl	800a70c <put_fat>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d109      	bne.n	800aa86 <create_chain+0xe2>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d006      	beq.n	800aa86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aa78:	69fa      	ldr	r2, [r7, #28]
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6938      	ldr	r0, [r7, #16]
 800aa7e:	f7ff fe45 	bl	800a70c <put_fat>
 800aa82:	4603      	mov	r3, r0
 800aa84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d116      	bne.n	800aaba <create_chain+0x116>
		fs->last_clst = ncl;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	69fa      	ldr	r2, [r7, #28]
 800aa90:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	691a      	ldr	r2, [r3, #16]
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	3b02      	subs	r3, #2
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d804      	bhi.n	800aaaa <create_chain+0x106>
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	1e5a      	subs	r2, r3, #1
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	791b      	ldrb	r3, [r3, #4]
 800aaae:	f043 0301 	orr.w	r3, r3, #1
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	711a      	strb	r2, [r3, #4]
 800aab8:	e007      	b.n	800aaca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d102      	bne.n	800aac6 <create_chain+0x122>
 800aac0:	f04f 33ff 	mov.w	r3, #4294967295
 800aac4:	e000      	b.n	800aac8 <create_chain+0x124>
 800aac6:	2301      	movs	r3, #1
 800aac8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aaca:	69fb      	ldr	r3, [r7, #28]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3720      	adds	r7, #32
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	3304      	adds	r3, #4
 800aaea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	0a5b      	lsrs	r3, r3, #9
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	8952      	ldrh	r2, [r2, #10]
 800aaf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	1d1a      	adds	r2, r3, #4
 800aafe:	613a      	str	r2, [r7, #16]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <clmt_clust+0x3a>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e010      	b.n	800ab30 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d307      	bcc.n	800ab26 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	617b      	str	r3, [r7, #20]
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	3304      	adds	r3, #4
 800ab22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab24:	e7e9      	b.n	800aafa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ab26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	4413      	add	r3, r2
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	371c      	adds	r7, #28
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab52:	d204      	bcs.n	800ab5e <dir_sdi+0x22>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	f003 031f 	and.w	r3, r3, #31
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ab5e:	2302      	movs	r3, #2
 800ab60:	e063      	b.n	800ac2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d106      	bne.n	800ab82 <dir_sdi+0x46>
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d902      	bls.n	800ab82 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10c      	bne.n	800aba2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	095b      	lsrs	r3, r3, #5
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	8912      	ldrh	r2, [r2, #8]
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d301      	bcc.n	800ab98 <dir_sdi+0x5c>
 800ab94:	2302      	movs	r3, #2
 800ab96:	e048      	b.n	800ac2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	61da      	str	r2, [r3, #28]
 800aba0:	e029      	b.n	800abf6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	895b      	ldrh	r3, [r3, #10]
 800aba6:	025b      	lsls	r3, r3, #9
 800aba8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abaa:	e019      	b.n	800abe0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6979      	ldr	r1, [r7, #20]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff fd06 	bl	800a5c2 <get_fat>
 800abb6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abbe:	d101      	bne.n	800abc4 <dir_sdi+0x88>
 800abc0:	2301      	movs	r3, #1
 800abc2:	e032      	b.n	800ac2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d904      	bls.n	800abd4 <dir_sdi+0x98>
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d301      	bcc.n	800abd8 <dir_sdi+0x9c>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e028      	b.n	800ac2a <dir_sdi+0xee>
			ofs -= csz;
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d2e1      	bcs.n	800abac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800abe8:	6979      	ldr	r1, [r7, #20]
 800abea:	6938      	ldr	r0, [r7, #16]
 800abec:	f7ff fcca 	bl	800a584 <clust2sect>
 800abf0:	4602      	mov	r2, r0
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <dir_sdi+0xcc>
 800ac04:	2302      	movs	r3, #2
 800ac06:	e010      	b.n	800ac2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	69da      	ldr	r2, [r3, #28]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	0a5b      	lsrs	r3, r3, #9
 800ac10:	441a      	add	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac22:	441a      	add	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3718      	adds	r7, #24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b086      	sub	sp, #24
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	3320      	adds	r3, #32
 800ac48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <dir_next+0x28>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac58:	d301      	bcc.n	800ac5e <dir_next+0x2c>
 800ac5a:	2304      	movs	r3, #4
 800ac5c:	e0aa      	b.n	800adb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f040 8098 	bne.w	800ad9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	69db      	ldr	r3, [r3, #28]
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	095b      	lsrs	r3, r3, #5
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	8912      	ldrh	r2, [r2, #8]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	f0c0 8088 	bcc.w	800ad9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	61da      	str	r2, [r3, #28]
 800ac90:	2304      	movs	r3, #4
 800ac92:	e08f      	b.n	800adb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	0a5b      	lsrs	r3, r3, #9
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	8952      	ldrh	r2, [r2, #10]
 800ac9c:	3a01      	subs	r2, #1
 800ac9e:	4013      	ands	r3, r2
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d17a      	bne.n	800ad9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	4619      	mov	r1, r3
 800acac:	4610      	mov	r0, r2
 800acae:	f7ff fc88 	bl	800a5c2 <get_fat>
 800acb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d801      	bhi.n	800acbe <dir_next+0x8c>
 800acba:	2302      	movs	r3, #2
 800acbc:	e07a      	b.n	800adb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc4:	d101      	bne.n	800acca <dir_next+0x98>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e074      	b.n	800adb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d358      	bcc.n	800ad86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d104      	bne.n	800ace4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	61da      	str	r2, [r3, #28]
 800ace0:	2304      	movs	r3, #4
 800ace2:	e067      	b.n	800adb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	4619      	mov	r1, r3
 800acec:	4610      	mov	r0, r2
 800acee:	f7ff fe59 	bl	800a9a4 <create_chain>
 800acf2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <dir_next+0xcc>
 800acfa:	2307      	movs	r3, #7
 800acfc:	e05a      	b.n	800adb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d101      	bne.n	800ad08 <dir_next+0xd6>
 800ad04:	2302      	movs	r3, #2
 800ad06:	e055      	b.n	800adb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0e:	d101      	bne.n	800ad14 <dir_next+0xe2>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e04f      	b.n	800adb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f7ff fb55 	bl	800a3c4 <sync_window>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <dir_next+0xf2>
 800ad20:	2301      	movs	r3, #1
 800ad22:	e047      	b.n	800adb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3330      	adds	r3, #48	; 0x30
 800ad28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7ff f97f 	bl	800a032 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad34:	2300      	movs	r3, #0
 800ad36:	613b      	str	r3, [r7, #16]
 800ad38:	6979      	ldr	r1, [r7, #20]
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff fc22 	bl	800a584 <clust2sect>
 800ad40:	4602      	mov	r2, r0
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	62da      	str	r2, [r3, #44]	; 0x2c
 800ad46:	e012      	b.n	800ad6e <dir_next+0x13c>
						fs->wflag = 1;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fb38 	bl	800a3c4 <sync_window>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <dir_next+0x12c>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e02a      	b.n	800adb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	3301      	adds	r3, #1
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	895b      	ldrh	r3, [r3, #10]
 800ad72:	461a      	mov	r2, r3
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d3e6      	bcc.n	800ad48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	1ad2      	subs	r2, r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ad8c:	6979      	ldr	r1, [r7, #20]
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f7ff fbf8 	bl	800a584 <clust2sect>
 800ad94:	4602      	mov	r2, r0
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adac:	441a      	add	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800adcc:	2100      	movs	r1, #0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7ff feb4 	bl	800ab3c <dir_sdi>
 800add4:	4603      	mov	r3, r0
 800add6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d12b      	bne.n	800ae36 <dir_alloc+0x7a>
		n = 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	69db      	ldr	r3, [r3, #28]
 800ade6:	4619      	mov	r1, r3
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f7ff fb2f 	bl	800a44c <move_window>
 800adee:	4603      	mov	r3, r0
 800adf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d11d      	bne.n	800ae34 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	2be5      	cmp	r3, #229	; 0xe5
 800ae00:	d004      	beq.n	800ae0c <dir_alloc+0x50>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d107      	bne.n	800ae1c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	613b      	str	r3, [r7, #16]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d102      	bne.n	800ae20 <dir_alloc+0x64>
 800ae1a:	e00c      	b.n	800ae36 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ae20:	2101      	movs	r1, #1
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff ff05 	bl	800ac32 <dir_next>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0d7      	beq.n	800ade2 <dir_alloc+0x26>
 800ae32:	e000      	b.n	800ae36 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ae34:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	2b04      	cmp	r3, #4
 800ae3a:	d101      	bne.n	800ae40 <dir_alloc+0x84>
 800ae3c:	2307      	movs	r3, #7
 800ae3e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	331a      	adds	r3, #26
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff f847 	bl	8009eec <ld_word>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	d109      	bne.n	800ae7e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	3314      	adds	r3, #20
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff f83c 	bl	8009eec <ld_word>
 800ae74:	4603      	mov	r3, r0
 800ae76:	041b      	lsls	r3, r3, #16
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	331a      	adds	r3, #26
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff f85f 	bl	8009f62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	2b03      	cmp	r3, #3
 800aeaa:	d109      	bne.n	800aec0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f103 0214 	add.w	r2, r3, #20
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	0c1b      	lsrs	r3, r3, #16
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4610      	mov	r0, r2
 800aebc:	f7ff f851 	bl	8009f62 <st_word>
	}
}
 800aec0:	bf00      	nop
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aed6:	2100      	movs	r1, #0
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7ff fe2f 	bl	800ab3c <dir_sdi>
 800aede:	4603      	mov	r3, r0
 800aee0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <dir_find+0x24>
 800aee8:	7dfb      	ldrb	r3, [r7, #23]
 800aeea:	e03e      	b.n	800af6a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	69db      	ldr	r3, [r3, #28]
 800aef0:	4619      	mov	r1, r3
 800aef2:	6938      	ldr	r0, [r7, #16]
 800aef4:	f7ff faaa 	bl	800a44c <move_window>
 800aef8:	4603      	mov	r3, r0
 800aefa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d12f      	bne.n	800af62 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d102      	bne.n	800af16 <dir_find+0x4e>
 800af10:	2304      	movs	r3, #4
 800af12:	75fb      	strb	r3, [r7, #23]
 800af14:	e028      	b.n	800af68 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a1b      	ldr	r3, [r3, #32]
 800af1a:	330b      	adds	r3, #11
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af22:	b2da      	uxtb	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a1b      	ldr	r3, [r3, #32]
 800af2c:	330b      	adds	r3, #11
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f003 0308 	and.w	r3, r3, #8
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10a      	bne.n	800af4e <dir_find+0x86>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a18      	ldr	r0, [r3, #32]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3324      	adds	r3, #36	; 0x24
 800af40:	220b      	movs	r2, #11
 800af42:	4619      	mov	r1, r3
 800af44:	f7ff f88f 	bl	800a066 <mem_cmp>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00b      	beq.n	800af66 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800af4e:	2100      	movs	r1, #0
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff fe6e 	bl	800ac32 <dir_next>
 800af56:	4603      	mov	r3, r0
 800af58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d0c5      	beq.n	800aeec <dir_find+0x24>
 800af60:	e002      	b.n	800af68 <dir_find+0xa0>
		if (res != FR_OK) break;
 800af62:	bf00      	nop
 800af64:	e000      	b.n	800af68 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800af66:	bf00      	nop

	return res;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800af80:	2101      	movs	r1, #1
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff ff1a 	bl	800adbc <dir_alloc>
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d11c      	bne.n	800afcc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	69db      	ldr	r3, [r3, #28]
 800af96:	4619      	mov	r1, r3
 800af98:	68b8      	ldr	r0, [r7, #8]
 800af9a:	f7ff fa57 	bl	800a44c <move_window>
 800af9e:	4603      	mov	r3, r0
 800afa0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d111      	bne.n	800afcc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	2220      	movs	r2, #32
 800afae:	2100      	movs	r1, #0
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7ff f83e 	bl	800a032 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a18      	ldr	r0, [r3, #32]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3324      	adds	r3, #36	; 0x24
 800afbe:	220b      	movs	r2, #11
 800afc0:	4619      	mov	r1, r3
 800afc2:	f7ff f815 	bl	8009ff0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2201      	movs	r2, #1
 800afca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b088      	sub	sp, #32
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3324      	adds	r3, #36	; 0x24
 800afec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800afee:	220b      	movs	r2, #11
 800aff0:	2120      	movs	r1, #32
 800aff2:	68b8      	ldr	r0, [r7, #8]
 800aff4:	f7ff f81d 	bl	800a032 <mem_set>
	si = i = 0; ni = 8;
 800aff8:	2300      	movs	r3, #0
 800affa:	613b      	str	r3, [r7, #16]
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	2308      	movs	r3, #8
 800b002:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	617a      	str	r2, [r7, #20]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	4413      	add	r3, r2
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b012:	7ffb      	ldrb	r3, [r7, #31]
 800b014:	2b20      	cmp	r3, #32
 800b016:	d94e      	bls.n	800b0b6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b018:	7ffb      	ldrb	r3, [r7, #31]
 800b01a:	2b2f      	cmp	r3, #47	; 0x2f
 800b01c:	d006      	beq.n	800b02c <create_name+0x54>
 800b01e:	7ffb      	ldrb	r3, [r7, #31]
 800b020:	2b5c      	cmp	r3, #92	; 0x5c
 800b022:	d110      	bne.n	800b046 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b024:	e002      	b.n	800b02c <create_name+0x54>
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	3301      	adds	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	4413      	add	r3, r2
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	2b2f      	cmp	r3, #47	; 0x2f
 800b036:	d0f6      	beq.n	800b026 <create_name+0x4e>
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	4413      	add	r3, r2
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	2b5c      	cmp	r3, #92	; 0x5c
 800b042:	d0f0      	beq.n	800b026 <create_name+0x4e>
			break;
 800b044:	e038      	b.n	800b0b8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b046:	7ffb      	ldrb	r3, [r7, #31]
 800b048:	2b2e      	cmp	r3, #46	; 0x2e
 800b04a:	d003      	beq.n	800b054 <create_name+0x7c>
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	429a      	cmp	r2, r3
 800b052:	d30c      	bcc.n	800b06e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	2b0b      	cmp	r3, #11
 800b058:	d002      	beq.n	800b060 <create_name+0x88>
 800b05a:	7ffb      	ldrb	r3, [r7, #31]
 800b05c:	2b2e      	cmp	r3, #46	; 0x2e
 800b05e:	d001      	beq.n	800b064 <create_name+0x8c>
 800b060:	2306      	movs	r3, #6
 800b062:	e044      	b.n	800b0ee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b064:	2308      	movs	r3, #8
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	230b      	movs	r3, #11
 800b06a:	61bb      	str	r3, [r7, #24]
			continue;
 800b06c:	e022      	b.n	800b0b4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b06e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b072:	2b00      	cmp	r3, #0
 800b074:	da04      	bge.n	800b080 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b076:	7ffb      	ldrb	r3, [r7, #31]
 800b078:	3b80      	subs	r3, #128	; 0x80
 800b07a:	4a1f      	ldr	r2, [pc, #124]	; (800b0f8 <create_name+0x120>)
 800b07c:	5cd3      	ldrb	r3, [r2, r3]
 800b07e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b080:	7ffb      	ldrb	r3, [r7, #31]
 800b082:	4619      	mov	r1, r3
 800b084:	481d      	ldr	r0, [pc, #116]	; (800b0fc <create_name+0x124>)
 800b086:	f7ff f815 	bl	800a0b4 <chk_chr>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <create_name+0xbc>
 800b090:	2306      	movs	r3, #6
 800b092:	e02c      	b.n	800b0ee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b094:	7ffb      	ldrb	r3, [r7, #31]
 800b096:	2b60      	cmp	r3, #96	; 0x60
 800b098:	d905      	bls.n	800b0a6 <create_name+0xce>
 800b09a:	7ffb      	ldrb	r3, [r7, #31]
 800b09c:	2b7a      	cmp	r3, #122	; 0x7a
 800b09e:	d802      	bhi.n	800b0a6 <create_name+0xce>
 800b0a0:	7ffb      	ldrb	r3, [r7, #31]
 800b0a2:	3b20      	subs	r3, #32
 800b0a4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	1c5a      	adds	r2, r3, #1
 800b0aa:	613a      	str	r2, [r7, #16]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	7ffa      	ldrb	r2, [r7, #31]
 800b0b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b0b4:	e7a6      	b.n	800b004 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b0b6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	441a      	add	r2, r3
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <create_name+0xf4>
 800b0c8:	2306      	movs	r3, #6
 800b0ca:	e010      	b.n	800b0ee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2be5      	cmp	r3, #229	; 0xe5
 800b0d2:	d102      	bne.n	800b0da <create_name+0x102>
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2205      	movs	r2, #5
 800b0d8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b0da:	7ffb      	ldrb	r3, [r7, #31]
 800b0dc:	2b20      	cmp	r3, #32
 800b0de:	d801      	bhi.n	800b0e4 <create_name+0x10c>
 800b0e0:	2204      	movs	r2, #4
 800b0e2:	e000      	b.n	800b0e6 <create_name+0x10e>
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	330b      	adds	r3, #11
 800b0ea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b0ec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3720      	adds	r7, #32
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	08011ae4 	.word	0x08011ae4
 800b0fc:	0800f0d0 	.word	0x0800f0d0

0800b100 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b114:	e002      	b.n	800b11c <follow_path+0x1c>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	3301      	adds	r3, #1
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b2f      	cmp	r3, #47	; 0x2f
 800b122:	d0f8      	beq.n	800b116 <follow_path+0x16>
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b5c      	cmp	r3, #92	; 0x5c
 800b12a:	d0f4      	beq.n	800b116 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	2200      	movs	r2, #0
 800b130:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	2b1f      	cmp	r3, #31
 800b138:	d80a      	bhi.n	800b150 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2280      	movs	r2, #128	; 0x80
 800b13e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b142:	2100      	movs	r1, #0
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7ff fcf9 	bl	800ab3c <dir_sdi>
 800b14a:	4603      	mov	r3, r0
 800b14c:	75fb      	strb	r3, [r7, #23]
 800b14e:	e043      	b.n	800b1d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b150:	463b      	mov	r3, r7
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff ff3f 	bl	800afd8 <create_name>
 800b15a:	4603      	mov	r3, r0
 800b15c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d134      	bne.n	800b1ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff feaf 	bl	800aec8 <dir_find>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b174:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b176:	7dfb      	ldrb	r3, [r7, #23]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00a      	beq.n	800b192 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
 800b17e:	2b04      	cmp	r3, #4
 800b180:	d127      	bne.n	800b1d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b182:	7afb      	ldrb	r3, [r7, #11]
 800b184:	f003 0304 	and.w	r3, r3, #4
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d122      	bne.n	800b1d2 <follow_path+0xd2>
 800b18c:	2305      	movs	r3, #5
 800b18e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b190:	e01f      	b.n	800b1d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b192:	7afb      	ldrb	r3, [r7, #11]
 800b194:	f003 0304 	and.w	r3, r3, #4
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d11c      	bne.n	800b1d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	799b      	ldrb	r3, [r3, #6]
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b1a8:	2305      	movs	r3, #5
 800b1aa:	75fb      	strb	r3, [r7, #23]
 800b1ac:	e014      	b.n	800b1d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1bc:	4413      	add	r3, r2
 800b1be:	4619      	mov	r1, r3
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7ff fe42 	bl	800ae4a <ld_clust>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b1cc:	e7c0      	b.n	800b150 <follow_path+0x50>
			if (res != FR_OK) break;
 800b1ce:	bf00      	nop
 800b1d0:	e002      	b.n	800b1d8 <follow_path+0xd8>
				break;
 800b1d2:	bf00      	nop
 800b1d4:	e000      	b.n	800b1d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b1d6:	bf00      	nop
			}
		}
	}

	return res;
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b087      	sub	sp, #28
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d031      	beq.n	800b25c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	e002      	b.n	800b206 <get_ldnumber+0x24>
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	3301      	adds	r3, #1
 800b204:	617b      	str	r3, [r7, #20]
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	d903      	bls.n	800b216 <get_ldnumber+0x34>
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b3a      	cmp	r3, #58	; 0x3a
 800b214:	d1f4      	bne.n	800b200 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b3a      	cmp	r3, #58	; 0x3a
 800b21c:	d11c      	bne.n	800b258 <get_ldnumber+0x76>
			tp = *path;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	60fa      	str	r2, [r7, #12]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	3b30      	subs	r3, #48	; 0x30
 800b22e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b09      	cmp	r3, #9
 800b234:	d80e      	bhi.n	800b254 <get_ldnumber+0x72>
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d10a      	bne.n	800b254 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d107      	bne.n	800b254 <get_ldnumber+0x72>
					vol = (int)i;
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	3301      	adds	r3, #1
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	e002      	b.n	800b25e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b258:	2300      	movs	r3, #0
 800b25a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b25c:	693b      	ldr	r3, [r7, #16]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	371c      	adds	r7, #28
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
	...

0800b26c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	70da      	strb	r2, [r3, #3]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f04f 32ff 	mov.w	r2, #4294967295
 800b282:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff f8e0 	bl	800a44c <move_window>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <check_fs+0x2a>
 800b292:	2304      	movs	r3, #4
 800b294:	e038      	b.n	800b308 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3330      	adds	r3, #48	; 0x30
 800b29a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe fe24 	bl	8009eec <ld_word>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d001      	beq.n	800b2b4 <check_fs+0x48>
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e029      	b.n	800b308 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2ba:	2be9      	cmp	r3, #233	; 0xe9
 800b2bc:	d009      	beq.n	800b2d2 <check_fs+0x66>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2c4:	2beb      	cmp	r3, #235	; 0xeb
 800b2c6:	d11e      	bne.n	800b306 <check_fs+0x9a>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b2ce:	2b90      	cmp	r3, #144	; 0x90
 800b2d0:	d119      	bne.n	800b306 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3330      	adds	r3, #48	; 0x30
 800b2d6:	3336      	adds	r3, #54	; 0x36
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe fe1f 	bl	8009f1c <ld_dword>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b2e4:	4a0a      	ldr	r2, [pc, #40]	; (800b310 <check_fs+0xa4>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d101      	bne.n	800b2ee <check_fs+0x82>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e00c      	b.n	800b308 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3330      	adds	r3, #48	; 0x30
 800b2f2:	3352      	adds	r3, #82	; 0x52
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fe fe11 	bl	8009f1c <ld_dword>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	4b05      	ldr	r3, [pc, #20]	; (800b314 <check_fs+0xa8>)
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d101      	bne.n	800b306 <check_fs+0x9a>
 800b302:	2300      	movs	r3, #0
 800b304:	e000      	b.n	800b308 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b306:	2302      	movs	r3, #2
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	00544146 	.word	0x00544146
 800b314:	33544146 	.word	0x33544146

0800b318 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b096      	sub	sp, #88	; 0x58
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	4613      	mov	r3, r2
 800b324:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f7ff ff58 	bl	800b1e2 <get_ldnumber>
 800b332:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b336:	2b00      	cmp	r3, #0
 800b338:	da01      	bge.n	800b33e <find_volume+0x26>
 800b33a:	230b      	movs	r3, #11
 800b33c:	e22e      	b.n	800b79c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b33e:	4aa8      	ldr	r2, [pc, #672]	; (800b5e0 <find_volume+0x2c8>)
 800b340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b346:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <find_volume+0x3a>
 800b34e:	230c      	movs	r3, #12
 800b350:	e224      	b.n	800b79c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b356:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	f023 0301 	bic.w	r3, r3, #1
 800b35e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01a      	beq.n	800b39e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	785b      	ldrb	r3, [r3, #1]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fe fd1f 	bl	8009db0 <disk_status>
 800b372:	4603      	mov	r3, r0
 800b374:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b378:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10c      	bne.n	800b39e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b384:	79fb      	ldrb	r3, [r7, #7]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d007      	beq.n	800b39a <find_volume+0x82>
 800b38a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b396:	230a      	movs	r3, #10
 800b398:	e200      	b.n	800b79c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b39a:	2300      	movs	r3, #0
 800b39c:	e1fe      	b.n	800b79c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ae:	785b      	ldrb	r3, [r3, #1]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fe fd17 	bl	8009de4 <disk_initialize>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b3bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e1e7      	b.n	800b79c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b3cc:	79fb      	ldrb	r3, [r7, #7]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d007      	beq.n	800b3e2 <find_volume+0xca>
 800b3d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b3d6:	f003 0304 	and.w	r3, r3, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b3de:	230a      	movs	r3, #10
 800b3e0:	e1dc      	b.n	800b79c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b3e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3ea:	f7ff ff3f 	bl	800b26c <check_fs>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b3f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d14b      	bne.n	800b494 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b400:	e01f      	b.n	800b442 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40a:	011b      	lsls	r3, r3, #4
 800b40c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b410:	4413      	add	r3, r2
 800b412:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	3304      	adds	r3, #4
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d006      	beq.n	800b42c <find_volume+0x114>
 800b41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b420:	3308      	adds	r3, #8
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe fd7a 	bl	8009f1c <ld_dword>
 800b428:	4602      	mov	r2, r0
 800b42a:	e000      	b.n	800b42e <find_volume+0x116>
 800b42c:	2200      	movs	r2, #0
 800b42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b436:	440b      	add	r3, r1
 800b438:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b43e:	3301      	adds	r3, #1
 800b440:	643b      	str	r3, [r7, #64]	; 0x40
 800b442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b444:	2b03      	cmp	r3, #3
 800b446:	d9dc      	bls.n	800b402 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b448:	2300      	movs	r3, #0
 800b44a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <find_volume+0x140>
 800b452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b454:	3b01      	subs	r3, #1
 800b456:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b460:	4413      	add	r3, r2
 800b462:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b466:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d005      	beq.n	800b47a <find_volume+0x162>
 800b46e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b470:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b472:	f7ff fefb 	bl	800b26c <check_fs>
 800b476:	4603      	mov	r3, r0
 800b478:	e000      	b.n	800b47c <find_volume+0x164>
 800b47a:	2303      	movs	r3, #3
 800b47c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b484:	2b01      	cmp	r3, #1
 800b486:	d905      	bls.n	800b494 <find_volume+0x17c>
 800b488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b48a:	3301      	adds	r3, #1
 800b48c:	643b      	str	r3, [r7, #64]	; 0x40
 800b48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b490:	2b03      	cmp	r3, #3
 800b492:	d9e1      	bls.n	800b458 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b498:	2b04      	cmp	r3, #4
 800b49a:	d101      	bne.n	800b4a0 <find_volume+0x188>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e17d      	b.n	800b79c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b4a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d901      	bls.n	800b4ac <find_volume+0x194>
 800b4a8:	230d      	movs	r3, #13
 800b4aa:	e177      	b.n	800b79c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	3330      	adds	r3, #48	; 0x30
 800b4b0:	330b      	adds	r3, #11
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe fd1a 	bl	8009eec <ld_word>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4be:	d001      	beq.n	800b4c4 <find_volume+0x1ac>
 800b4c0:	230d      	movs	r3, #13
 800b4c2:	e16b      	b.n	800b79c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	3330      	adds	r3, #48	; 0x30
 800b4c8:	3316      	adds	r3, #22
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fe fd0e 	bl	8009eec <ld_word>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d106      	bne.n	800b4e8 <find_volume+0x1d0>
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	3330      	adds	r3, #48	; 0x30
 800b4de:	3324      	adds	r3, #36	; 0x24
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fe fd1b 	bl	8009f1c <ld_dword>
 800b4e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fa:	789b      	ldrb	r3, [r3, #2]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d005      	beq.n	800b50c <find_volume+0x1f4>
 800b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b502:	789b      	ldrb	r3, [r3, #2]
 800b504:	2b02      	cmp	r3, #2
 800b506:	d001      	beq.n	800b50c <find_volume+0x1f4>
 800b508:	230d      	movs	r3, #13
 800b50a:	e147      	b.n	800b79c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50e:	789b      	ldrb	r3, [r3, #2]
 800b510:	461a      	mov	r2, r3
 800b512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b514:	fb02 f303 	mul.w	r3, r2, r3
 800b518:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b520:	b29a      	uxth	r2, r3
 800b522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b524:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b528:	895b      	ldrh	r3, [r3, #10]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d008      	beq.n	800b540 <find_volume+0x228>
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	895b      	ldrh	r3, [r3, #10]
 800b532:	461a      	mov	r2, r3
 800b534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b536:	895b      	ldrh	r3, [r3, #10]
 800b538:	3b01      	subs	r3, #1
 800b53a:	4013      	ands	r3, r2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <find_volume+0x22c>
 800b540:	230d      	movs	r3, #13
 800b542:	e12b      	b.n	800b79c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b546:	3330      	adds	r3, #48	; 0x30
 800b548:	3311      	adds	r3, #17
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe fcce 	bl	8009eec <ld_word>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	891b      	ldrh	r3, [r3, #8]
 800b55c:	f003 030f 	and.w	r3, r3, #15
 800b560:	b29b      	uxth	r3, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <find_volume+0x252>
 800b566:	230d      	movs	r3, #13
 800b568:	e118      	b.n	800b79c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56c:	3330      	adds	r3, #48	; 0x30
 800b56e:	3313      	adds	r3, #19
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe fcbb 	bl	8009eec <ld_word>
 800b576:	4603      	mov	r3, r0
 800b578:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d106      	bne.n	800b58e <find_volume+0x276>
 800b580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b582:	3330      	adds	r3, #48	; 0x30
 800b584:	3320      	adds	r3, #32
 800b586:	4618      	mov	r0, r3
 800b588:	f7fe fcc8 	bl	8009f1c <ld_dword>
 800b58c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b590:	3330      	adds	r3, #48	; 0x30
 800b592:	330e      	adds	r3, #14
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe fca9 	bl	8009eec <ld_word>
 800b59a:	4603      	mov	r3, r0
 800b59c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b59e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <find_volume+0x290>
 800b5a4:	230d      	movs	r3, #13
 800b5a6:	e0f9      	b.n	800b79c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b5a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ac:	4413      	add	r3, r2
 800b5ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5b0:	8912      	ldrh	r2, [r2, #8]
 800b5b2:	0912      	lsrs	r2, r2, #4
 800b5b4:	b292      	uxth	r2, r2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b5ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d201      	bcs.n	800b5c6 <find_volume+0x2ae>
 800b5c2:	230d      	movs	r3, #13
 800b5c4:	e0ea      	b.n	800b79c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b5c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5ce:	8952      	ldrh	r2, [r2, #10]
 800b5d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d103      	bne.n	800b5e4 <find_volume+0x2cc>
 800b5dc:	230d      	movs	r3, #13
 800b5de:	e0dd      	b.n	800b79c <find_volume+0x484>
 800b5e0:	20000344 	.word	0x20000344
		fmt = FS_FAT32;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d802      	bhi.n	800b5fa <find_volume+0x2e2>
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b600:	4293      	cmp	r3, r2
 800b602:	d802      	bhi.n	800b60a <find_volume+0x2f2>
 800b604:	2301      	movs	r3, #1
 800b606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	1c9a      	adds	r2, r3, #2
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b616:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b61a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b61c:	441a      	add	r2, r3
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b626:	441a      	add	r2, r3
 800b628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b62c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b630:	2b03      	cmp	r3, #3
 800b632:	d11e      	bne.n	800b672 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	3330      	adds	r3, #48	; 0x30
 800b638:	332a      	adds	r3, #42	; 0x2a
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe fc56 	bl	8009eec <ld_word>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <find_volume+0x332>
 800b646:	230d      	movs	r3, #13
 800b648:	e0a8      	b.n	800b79c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64c:	891b      	ldrh	r3, [r3, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <find_volume+0x33e>
 800b652:	230d      	movs	r3, #13
 800b654:	e0a2      	b.n	800b79c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b658:	3330      	adds	r3, #48	; 0x30
 800b65a:	332c      	adds	r3, #44	; 0x2c
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fc5d 	bl	8009f1c <ld_dword>
 800b662:	4602      	mov	r2, r0
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	647b      	str	r3, [r7, #68]	; 0x44
 800b670:	e01f      	b.n	800b6b2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	891b      	ldrh	r3, [r3, #8]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <find_volume+0x366>
 800b67a:	230d      	movs	r3, #13
 800b67c:	e08e      	b.n	800b79c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b680:	6a1a      	ldr	r2, [r3, #32]
 800b682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b684:	441a      	add	r2, r3
 800b686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b688:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b68a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d103      	bne.n	800b69a <find_volume+0x382>
 800b692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	e00a      	b.n	800b6b0 <find_volume+0x398>
 800b69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69c:	695a      	ldr	r2, [r3, #20]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	005b      	lsls	r3, r3, #1
 800b6a2:	4413      	add	r3, r2
 800b6a4:	085a      	lsrs	r2, r3, #1
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b6b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b4:	699a      	ldr	r2, [r3, #24]
 800b6b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b6bc:	0a5b      	lsrs	r3, r3, #9
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d201      	bcs.n	800b6c6 <find_volume+0x3ae>
 800b6c2:	230d      	movs	r3, #13
 800b6c4:	e06a      	b.n	800b79c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6cc:	611a      	str	r2, [r3, #16]
 800b6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d0:	691a      	ldr	r2, [r3, #16]
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	2280      	movs	r2, #128	; 0x80
 800b6da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b6dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6e0:	2b03      	cmp	r3, #3
 800b6e2:	d149      	bne.n	800b778 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e6:	3330      	adds	r3, #48	; 0x30
 800b6e8:	3330      	adds	r3, #48	; 0x30
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe fbfe 	bl	8009eec <ld_word>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d140      	bne.n	800b778 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b6f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6fe:	f7fe fea5 	bl	800a44c <move_window>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d137      	bne.n	800b778 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70a:	2200      	movs	r2, #0
 800b70c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b710:	3330      	adds	r3, #48	; 0x30
 800b712:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b716:	4618      	mov	r0, r3
 800b718:	f7fe fbe8 	bl	8009eec <ld_word>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b724:	429a      	cmp	r2, r3
 800b726:	d127      	bne.n	800b778 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	3330      	adds	r3, #48	; 0x30
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe fbf5 	bl	8009f1c <ld_dword>
 800b732:	4602      	mov	r2, r0
 800b734:	4b1b      	ldr	r3, [pc, #108]	; (800b7a4 <find_volume+0x48c>)
 800b736:	429a      	cmp	r2, r3
 800b738:	d11e      	bne.n	800b778 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73c:	3330      	adds	r3, #48	; 0x30
 800b73e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe fbea 	bl	8009f1c <ld_dword>
 800b748:	4602      	mov	r2, r0
 800b74a:	4b17      	ldr	r3, [pc, #92]	; (800b7a8 <find_volume+0x490>)
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d113      	bne.n	800b778 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b752:	3330      	adds	r3, #48	; 0x30
 800b754:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe fbdf 	bl	8009f1c <ld_dword>
 800b75e:	4602      	mov	r2, r0
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	3330      	adds	r3, #48	; 0x30
 800b768:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fe fbd5 	bl	8009f1c <ld_dword>
 800b772:	4602      	mov	r2, r0
 800b774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b776:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b77e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b780:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <find_volume+0x494>)
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	3301      	adds	r3, #1
 800b786:	b29a      	uxth	r2, r3
 800b788:	4b08      	ldr	r3, [pc, #32]	; (800b7ac <find_volume+0x494>)
 800b78a:	801a      	strh	r2, [r3, #0]
 800b78c:	4b07      	ldr	r3, [pc, #28]	; (800b7ac <find_volume+0x494>)
 800b78e:	881a      	ldrh	r2, [r3, #0]
 800b790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b792:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b796:	f7fe fdf1 	bl	800a37c <clear_lock>
#endif
	return FR_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3758      	adds	r7, #88	; 0x58
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	41615252 	.word	0x41615252
 800b7a8:	61417272 	.word	0x61417272
 800b7ac:	20000348 	.word	0x20000348

0800b7b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b7ba:	2309      	movs	r3, #9
 800b7bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d01c      	beq.n	800b7fe <validate+0x4e>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d018      	beq.n	800b7fe <validate+0x4e>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d013      	beq.n	800b7fe <validate+0x4e>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	889a      	ldrh	r2, [r3, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	88db      	ldrh	r3, [r3, #6]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d10c      	bne.n	800b7fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	785b      	ldrb	r3, [r3, #1]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe fae0 	bl	8009db0 <disk_status>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	f003 0301 	and.w	r3, r3, #1
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <validate+0x4e>
			res = FR_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <validate+0x5a>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	e000      	b.n	800b80c <validate+0x5c>
 800b80a:	2300      	movs	r3, #0
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	6013      	str	r3, [r2, #0]
	return res;
 800b810:	7bfb      	ldrb	r3, [r7, #15]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
	...

0800b81c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b088      	sub	sp, #32
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	4613      	mov	r3, r2
 800b828:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b82e:	f107 0310 	add.w	r3, r7, #16
 800b832:	4618      	mov	r0, r3
 800b834:	f7ff fcd5 	bl	800b1e2 <get_ldnumber>
 800b838:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	da01      	bge.n	800b844 <f_mount+0x28>
 800b840:	230b      	movs	r3, #11
 800b842:	e02b      	b.n	800b89c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b844:	4a17      	ldr	r2, [pc, #92]	; (800b8a4 <f_mount+0x88>)
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b84c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d005      	beq.n	800b860 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b854:	69b8      	ldr	r0, [r7, #24]
 800b856:	f7fe fd91 	bl	800a37c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	2200      	movs	r2, #0
 800b85e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d002      	beq.n	800b86c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	490d      	ldr	r1, [pc, #52]	; (800b8a4 <f_mount+0x88>)
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <f_mount+0x66>
 800b87c:	79fb      	ldrb	r3, [r7, #7]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d001      	beq.n	800b886 <f_mount+0x6a>
 800b882:	2300      	movs	r3, #0
 800b884:	e00a      	b.n	800b89c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b886:	f107 010c 	add.w	r1, r7, #12
 800b88a:	f107 0308 	add.w	r3, r7, #8
 800b88e:	2200      	movs	r2, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff fd41 	bl	800b318 <find_volume>
 800b896:	4603      	mov	r3, r0
 800b898:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3720      	adds	r7, #32
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20000344 	.word	0x20000344

0800b8a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b098      	sub	sp, #96	; 0x60
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <f_open+0x18>
 800b8bc:	2309      	movs	r3, #9
 800b8be:	e1ad      	b.n	800bc1c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b8c0:	79fb      	ldrb	r3, [r7, #7]
 800b8c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b8c8:	79fa      	ldrb	r2, [r7, #7]
 800b8ca:	f107 0110 	add.w	r1, r7, #16
 800b8ce:	f107 0308 	add.w	r3, r7, #8
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff fd20 	bl	800b318 <find_volume>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b8de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f040 8191 	bne.w	800bc0a <f_open+0x362>
		dj.obj.fs = fs;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	f107 0314 	add.w	r3, r7, #20
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff fc03 	bl	800b100 <follow_path>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b904:	2b00      	cmp	r3, #0
 800b906:	d11a      	bne.n	800b93e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b908:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b90c:	b25b      	sxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	da03      	bge.n	800b91a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b912:	2306      	movs	r3, #6
 800b914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b918:	e011      	b.n	800b93e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b91a:	79fb      	ldrb	r3, [r7, #7]
 800b91c:	f023 0301 	bic.w	r3, r3, #1
 800b920:	2b00      	cmp	r3, #0
 800b922:	bf14      	ite	ne
 800b924:	2301      	movne	r3, #1
 800b926:	2300      	moveq	r3, #0
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	461a      	mov	r2, r3
 800b92c:	f107 0314 	add.w	r3, r7, #20
 800b930:	4611      	mov	r1, r2
 800b932:	4618      	mov	r0, r3
 800b934:	f7fe fbda 	bl	800a0ec <chk_lock>
 800b938:	4603      	mov	r3, r0
 800b93a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b93e:	79fb      	ldrb	r3, [r7, #7]
 800b940:	f003 031c 	and.w	r3, r3, #28
 800b944:	2b00      	cmp	r3, #0
 800b946:	d07f      	beq.n	800ba48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d017      	beq.n	800b980 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b954:	2b04      	cmp	r3, #4
 800b956:	d10e      	bne.n	800b976 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b958:	f7fe fc24 	bl	800a1a4 <enq_lock>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d006      	beq.n	800b970 <f_open+0xc8>
 800b962:	f107 0314 	add.w	r3, r7, #20
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff fb03 	bl	800af72 <dir_register>
 800b96c:	4603      	mov	r3, r0
 800b96e:	e000      	b.n	800b972 <f_open+0xca>
 800b970:	2312      	movs	r3, #18
 800b972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	f043 0308 	orr.w	r3, r3, #8
 800b97c:	71fb      	strb	r3, [r7, #7]
 800b97e:	e010      	b.n	800b9a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b980:	7ebb      	ldrb	r3, [r7, #26]
 800b982:	f003 0311 	and.w	r3, r3, #17
 800b986:	2b00      	cmp	r3, #0
 800b988:	d003      	beq.n	800b992 <f_open+0xea>
					res = FR_DENIED;
 800b98a:	2307      	movs	r3, #7
 800b98c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b990:	e007      	b.n	800b9a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b992:	79fb      	ldrb	r3, [r7, #7]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <f_open+0xfa>
 800b99c:	2308      	movs	r3, #8
 800b99e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b9a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d168      	bne.n	800ba7c <f_open+0x1d4>
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	f003 0308 	and.w	r3, r3, #8
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d063      	beq.n	800ba7c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b9b4:	f000 fc54 	bl	800c260 <get_fattime>
 800b9b8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9bc:	330e      	adds	r3, #14
 800b9be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe fae9 	bl	8009f98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c8:	3316      	adds	r3, #22
 800b9ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fe fae3 	bl	8009f98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d4:	330b      	adds	r3, #11
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9de:	4611      	mov	r1, r2
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7ff fa32 	bl	800ae4a <ld_clust>
 800b9e6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fa4a 	bl	800ae88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	331c      	adds	r3, #28
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe facc 	bl	8009f98 <st_dword>
					fs->wflag = 1;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	2201      	movs	r2, #1
 800ba04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ba06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d037      	beq.n	800ba7c <f_open+0x1d4>
						dw = fs->winsect;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ba12:	f107 0314 	add.w	r3, r7, #20
 800ba16:	2200      	movs	r2, #0
 800ba18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fe ff5d 	bl	800a8da <remove_chain>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ba26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d126      	bne.n	800ba7c <f_open+0x1d4>
							res = move_window(fs, dw);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fd0a 	bl	800a44c <move_window>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba42:	3a01      	subs	r2, #1
 800ba44:	60da      	str	r2, [r3, #12]
 800ba46:	e019      	b.n	800ba7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ba48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d115      	bne.n	800ba7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ba50:	7ebb      	ldrb	r3, [r7, #26]
 800ba52:	f003 0310 	and.w	r3, r3, #16
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ba5a:	2304      	movs	r3, #4
 800ba5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ba60:	e00c      	b.n	800ba7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	f003 0302 	and.w	r3, r3, #2
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d007      	beq.n	800ba7c <f_open+0x1d4>
 800ba6c:	7ebb      	ldrb	r3, [r7, #26]
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <f_open+0x1d4>
						res = FR_DENIED;
 800ba76:	2307      	movs	r3, #7
 800ba78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ba7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d128      	bne.n	800bad6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	f003 0308 	and.w	r3, r3, #8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ba8e:	79fb      	ldrb	r3, [r7, #7]
 800ba90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ba9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	f023 0301 	bic.w	r3, r3, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bf14      	ite	ne
 800baae:	2301      	movne	r3, #1
 800bab0:	2300      	moveq	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	461a      	mov	r2, r3
 800bab6:	f107 0314 	add.w	r3, r7, #20
 800baba:	4611      	mov	r1, r2
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe fb93 	bl	800a1e8 <inc_lock>
 800bac2:	4602      	mov	r2, r0
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <f_open+0x22e>
 800bad0:	2302      	movs	r3, #2
 800bad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bada:	2b00      	cmp	r3, #0
 800badc:	f040 8095 	bne.w	800bc0a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff f9af 	bl	800ae4a <ld_clust>
 800baec:	4602      	mov	r2, r0
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800baf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf4:	331c      	adds	r3, #28
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe fa10 	bl	8009f1c <ld_dword>
 800bafc:	4602      	mov	r2, r0
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	88da      	ldrh	r2, [r3, #6]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	79fa      	ldrb	r2, [r7, #7]
 800bb1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3330      	adds	r3, #48	; 0x30
 800bb32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb36:	2100      	movs	r1, #0
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe fa7a 	bl	800a032 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	f003 0320 	and.w	r3, r3, #32
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d060      	beq.n	800bc0a <f_open+0x362>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d05c      	beq.n	800bc0a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	68da      	ldr	r2, [r3, #12]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	895b      	ldrh	r3, [r3, #10]
 800bb5c:	025b      	lsls	r3, r3, #9
 800bb5e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	657b      	str	r3, [r7, #84]	; 0x54
 800bb6c:	e016      	b.n	800bb9c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fd25 	bl	800a5c2 <get_fat>
 800bb78:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bb7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d802      	bhi.n	800bb86 <f_open+0x2de>
 800bb80:	2302      	movs	r3, #2
 800bb82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bb86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8c:	d102      	bne.n	800bb94 <f_open+0x2ec>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bb94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	657b      	str	r3, [r7, #84]	; 0x54
 800bb9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d103      	bne.n	800bbac <f_open+0x304>
 800bba4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d8e0      	bhi.n	800bb6e <f_open+0x2c6>
				}
				fp->clust = clst;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bbb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d127      	bne.n	800bc0a <f_open+0x362>
 800bbba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d022      	beq.n	800bc0a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe fcdb 	bl	800a584 <clust2sect>
 800bbce:	6478      	str	r0, [r7, #68]	; 0x44
 800bbd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d103      	bne.n	800bbde <f_open+0x336>
						res = FR_INT_ERR;
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bbdc:	e015      	b.n	800bc0a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bbde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbe0:	0a5a      	lsrs	r2, r3, #9
 800bbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe4:	441a      	add	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	7858      	ldrb	r0, [r3, #1]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6a1a      	ldr	r2, [r3, #32]
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	f7fe f919 	bl	8009e30 <disk_read>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <f_open+0x362>
 800bc04:	2301      	movs	r3, #1
 800bc06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bc0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <f_open+0x370>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bc18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3760      	adds	r7, #96	; 0x60
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08c      	sub	sp, #48	; 0x30
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
 800bc30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f107 0210 	add.w	r2, r7, #16
 800bc42:	4611      	mov	r1, r2
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff fdb3 	bl	800b7b0 <validate>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bc50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d107      	bne.n	800bc68 <f_write+0x44>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	7d5b      	ldrb	r3, [r3, #21]
 800bc5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bc60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <f_write+0x4a>
 800bc68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc6c:	e14b      	b.n	800bf06 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	7d1b      	ldrb	r3, [r3, #20]
 800bc72:	f003 0302 	and.w	r3, r3, #2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d101      	bne.n	800bc7e <f_write+0x5a>
 800bc7a:	2307      	movs	r3, #7
 800bc7c:	e143      	b.n	800bf06 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	699a      	ldr	r2, [r3, #24]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	441a      	add	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	f080 812d 	bcs.w	800beea <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	43db      	mvns	r3, r3
 800bc96:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bc98:	e127      	b.n	800beea <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f040 80e3 	bne.w	800be6e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	0a5b      	lsrs	r3, r3, #9
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	8952      	ldrh	r2, [r2, #10]
 800bcb2:	3a01      	subs	r2, #1
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d143      	bne.n	800bd46 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10c      	bne.n	800bce0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d11a      	bne.n	800bd08 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fe fe64 	bl	800a9a4 <create_chain>
 800bcdc:	62b8      	str	r0, [r7, #40]	; 0x28
 800bcde:	e013      	b.n	800bd08 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d007      	beq.n	800bcf8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	4619      	mov	r1, r3
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7fe fef0 	bl	800aad4 <clmt_clust>
 800bcf4:	62b8      	str	r0, [r7, #40]	; 0x28
 800bcf6:	e007      	b.n	800bd08 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	69db      	ldr	r3, [r3, #28]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f7fe fe4f 	bl	800a9a4 <create_chain>
 800bd06:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 80f2 	beq.w	800bef4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d104      	bne.n	800bd20 <f_write+0xfc>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	755a      	strb	r2, [r3, #21]
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	e0f2      	b.n	800bf06 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd26:	d104      	bne.n	800bd32 <f_write+0x10e>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	755a      	strb	r2, [r3, #21]
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e0e9      	b.n	800bf06 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd36:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <f_write+0x122>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd44:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	7d1b      	ldrb	r3, [r3, #20]
 800bd4a:	b25b      	sxtb	r3, r3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	da18      	bge.n	800bd82 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	7858      	ldrb	r0, [r3, #1]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6a1a      	ldr	r2, [r3, #32]
 800bd5e:	2301      	movs	r3, #1
 800bd60:	f7fe f886 	bl	8009e70 <disk_write>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d004      	beq.n	800bd74 <f_write+0x150>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	755a      	strb	r2, [r3, #21]
 800bd70:	2301      	movs	r3, #1
 800bd72:	e0c8      	b.n	800bf06 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	7d1b      	ldrb	r3, [r3, #20]
 800bd78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	69db      	ldr	r3, [r3, #28]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	f7fe fbfa 	bl	800a584 <clust2sect>
 800bd90:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d104      	bne.n	800bda2 <f_write+0x17e>
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	755a      	strb	r2, [r3, #21]
 800bd9e:	2302      	movs	r3, #2
 800bda0:	e0b1      	b.n	800bf06 <f_write+0x2e2>
			sect += csect;
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	4413      	add	r3, r2
 800bda8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	0a5b      	lsrs	r3, r3, #9
 800bdae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d03c      	beq.n	800be30 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bdb6:	69ba      	ldr	r2, [r7, #24]
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	4413      	add	r3, r2
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	8952      	ldrh	r2, [r2, #10]
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d905      	bls.n	800bdd0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	895b      	ldrh	r3, [r3, #10]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	7858      	ldrb	r0, [r3, #1]
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	69f9      	ldr	r1, [r7, #28]
 800bdda:	f7fe f849 	bl	8009e70 <disk_write>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d004      	beq.n	800bdee <f_write+0x1ca>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2201      	movs	r2, #1
 800bde8:	755a      	strb	r2, [r3, #21]
 800bdea:	2301      	movs	r3, #1
 800bdec:	e08b      	b.n	800bf06 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6a1a      	ldr	r2, [r3, #32]
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	6a3a      	ldr	r2, [r7, #32]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d915      	bls.n	800be28 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6a1a      	ldr	r2, [r3, #32]
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	025b      	lsls	r3, r3, #9
 800be0c:	69fa      	ldr	r2, [r7, #28]
 800be0e:	4413      	add	r3, r2
 800be10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be14:	4619      	mov	r1, r3
 800be16:	f7fe f8eb 	bl	8009ff0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	7d1b      	ldrb	r3, [r3, #20]
 800be1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be22:	b2da      	uxtb	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	025b      	lsls	r3, r3, #9
 800be2c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800be2e:	e03f      	b.n	800beb0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	697a      	ldr	r2, [r7, #20]
 800be36:	429a      	cmp	r2, r3
 800be38:	d016      	beq.n	800be68 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	699a      	ldr	r2, [r3, #24]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be42:	429a      	cmp	r2, r3
 800be44:	d210      	bcs.n	800be68 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	7858      	ldrb	r0, [r3, #1]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be50:	2301      	movs	r3, #1
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	f7fd ffec 	bl	8009e30 <disk_read>
 800be58:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d004      	beq.n	800be68 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2201      	movs	r2, #1
 800be62:	755a      	strb	r2, [r3, #21]
 800be64:	2301      	movs	r3, #1
 800be66:	e04e      	b.n	800bf06 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be76:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800be7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800be7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	d901      	bls.n	800be88 <f_write+0x264>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be96:	4413      	add	r3, r2
 800be98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be9a:	69f9      	ldr	r1, [r7, #28]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fe f8a7 	bl	8009ff0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	7d1b      	ldrb	r3, [r3, #20]
 800bea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800beaa:	b2da      	uxtb	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800beb0:	69fa      	ldr	r2, [r7, #28]
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	4413      	add	r3, r2
 800beb6:	61fb      	str	r3, [r7, #28]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	699a      	ldr	r2, [r3, #24]
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	441a      	add	r2, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	619a      	str	r2, [r3, #24]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	68da      	ldr	r2, [r3, #12]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	429a      	cmp	r2, r3
 800bece:	bf38      	it	cc
 800bed0:	461a      	movcc	r2, r3
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	60da      	str	r2, [r3, #12]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	441a      	add	r2, r3
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	601a      	str	r2, [r3, #0]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	f47f aed4 	bne.w	800bc9a <f_write+0x76>
 800bef2:	e000      	b.n	800bef6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bef4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	7d1b      	ldrb	r3, [r3, #20]
 800befa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3730      	adds	r7, #48	; 0x30
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b086      	sub	sp, #24
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f107 0208 	add.w	r2, r7, #8
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7ff fc46 	bl	800b7b0 <validate>
 800bf24:	4603      	mov	r3, r0
 800bf26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d168      	bne.n	800c000 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	7d1b      	ldrb	r3, [r3, #20]
 800bf32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d062      	beq.n	800c000 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	7d1b      	ldrb	r3, [r3, #20]
 800bf3e:	b25b      	sxtb	r3, r3
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	da15      	bge.n	800bf70 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	7858      	ldrb	r0, [r3, #1]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1a      	ldr	r2, [r3, #32]
 800bf52:	2301      	movs	r3, #1
 800bf54:	f7fd ff8c 	bl	8009e70 <disk_write>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <f_sync+0x54>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e04f      	b.n	800c002 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7d1b      	ldrb	r3, [r3, #20]
 800bf66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bf70:	f000 f976 	bl	800c260 <get_fattime>
 800bf74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f7fe fa64 	bl	800a44c <move_window>
 800bf84:	4603      	mov	r3, r0
 800bf86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bf88:	7dfb      	ldrb	r3, [r7, #23]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d138      	bne.n	800c000 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	330b      	adds	r3, #11
 800bf98:	781a      	ldrb	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	330b      	adds	r3, #11
 800bf9e:	f042 0220 	orr.w	r2, r2, #32
 800bfa2:	b2d2      	uxtb	r2, r2
 800bfa4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	461a      	mov	r2, r3
 800bfb0:	68f9      	ldr	r1, [r7, #12]
 800bfb2:	f7fe ff69 	bl	800ae88 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f103 021c 	add.w	r2, r3, #28
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4610      	mov	r0, r2
 800bfc4:	f7fd ffe8 	bl	8009f98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	3316      	adds	r3, #22
 800bfcc:	6939      	ldr	r1, [r7, #16]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fd ffe2 	bl	8009f98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3312      	adds	r3, #18
 800bfd8:	2100      	movs	r1, #0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fd ffc1 	bl	8009f62 <st_word>
					fs->wflag = 1;
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fa5d 	bl	800a4a8 <sync_fs>
 800bfee:	4603      	mov	r3, r0
 800bff0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	7d1b      	ldrb	r3, [r3, #20]
 800bff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c000:	7dfb      	ldrb	r3, [r7, #23]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3718      	adds	r7, #24
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7ff ff7b 	bl	800bf0e <f_sync>
 800c018:	4603      	mov	r3, r0
 800c01a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d118      	bne.n	800c054 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f107 0208 	add.w	r2, r7, #8
 800c028:	4611      	mov	r1, r2
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7ff fbc0 	bl	800b7b0 <validate>
 800c030:	4603      	mov	r3, r0
 800c032:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c034:	7bfb      	ldrb	r3, [r7, #15]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10c      	bne.n	800c054 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fe f960 	bl	800a304 <dec_lock>
 800c044:	4603      	mov	r3, r0
 800c046:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c048:	7bfb      	ldrb	r3, [r7, #15]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d102      	bne.n	800c054 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c054:	7bfb      	ldrb	r3, [r7, #15]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
	...

0800c060 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	4613      	mov	r3, r2
 800c06c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c06e:	2301      	movs	r3, #1
 800c070:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c076:	4b1f      	ldr	r3, [pc, #124]	; (800c0f4 <FATFS_LinkDriverEx+0x94>)
 800c078:	7a5b      	ldrb	r3, [r3, #9]
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d131      	bne.n	800c0e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c080:	4b1c      	ldr	r3, [pc, #112]	; (800c0f4 <FATFS_LinkDriverEx+0x94>)
 800c082:	7a5b      	ldrb	r3, [r3, #9]
 800c084:	b2db      	uxtb	r3, r3
 800c086:	461a      	mov	r2, r3
 800c088:	4b1a      	ldr	r3, [pc, #104]	; (800c0f4 <FATFS_LinkDriverEx+0x94>)
 800c08a:	2100      	movs	r1, #0
 800c08c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c08e:	4b19      	ldr	r3, [pc, #100]	; (800c0f4 <FATFS_LinkDriverEx+0x94>)
 800c090:	7a5b      	ldrb	r3, [r3, #9]
 800c092:	b2db      	uxtb	r3, r3
 800c094:	4a17      	ldr	r2, [pc, #92]	; (800c0f4 <FATFS_LinkDriverEx+0x94>)
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c09e:	4b15      	ldr	r3, [pc, #84]	; (800c0f4 <FATFS_LinkDriverEx+0x94>)
 800c0a0:	7a5b      	ldrb	r3, [r3, #9]
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	4b13      	ldr	r3, [pc, #76]	; (800c0f4 <FATFS_LinkDriverEx+0x94>)
 800c0a8:	4413      	add	r3, r2
 800c0aa:	79fa      	ldrb	r2, [r7, #7]
 800c0ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c0ae:	4b11      	ldr	r3, [pc, #68]	; (800c0f4 <FATFS_LinkDriverEx+0x94>)
 800c0b0:	7a5b      	ldrb	r3, [r3, #9]
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	1c5a      	adds	r2, r3, #1
 800c0b6:	b2d1      	uxtb	r1, r2
 800c0b8:	4a0e      	ldr	r2, [pc, #56]	; (800c0f4 <FATFS_LinkDriverEx+0x94>)
 800c0ba:	7251      	strb	r1, [r2, #9]
 800c0bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c0be:	7dbb      	ldrb	r3, [r7, #22]
 800c0c0:	3330      	adds	r3, #48	; 0x30
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	223a      	movs	r2, #58	; 0x3a
 800c0ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	3302      	adds	r3, #2
 800c0d4:	222f      	movs	r2, #47	; 0x2f
 800c0d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	3303      	adds	r3, #3
 800c0dc:	2200      	movs	r2, #0
 800c0de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	371c      	adds	r7, #28
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	2000036c 	.word	0x2000036c

0800c0f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c102:	2200      	movs	r2, #0
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7ff ffaa 	bl	800c060 <FATFS_LinkDriverEx>
 800c10c:	4603      	mov	r3, r0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
	...

0800c118 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c122:	f000 f879 	bl	800c218 <BSP_SD_IsDetected>
 800c126:	4603      	mov	r3, r0
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d001      	beq.n	800c130 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c12c:	2302      	movs	r3, #2
 800c12e:	e012      	b.n	800c156 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800c130:	480b      	ldr	r0, [pc, #44]	; (800c160 <BSP_SD_Init+0x48>)
 800c132:	f7fb faff 	bl	8007734 <HAL_SD_Init>
 800c136:	4603      	mov	r3, r0
 800c138:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c13a:	79fb      	ldrb	r3, [r7, #7]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d109      	bne.n	800c154 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c144:	4806      	ldr	r0, [pc, #24]	; (800c160 <BSP_SD_Init+0x48>)
 800c146:	f7fc f8d5 	bl	80082f4 <HAL_SD_ConfigWideBusOperation>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c154:	79fb      	ldrb	r3, [r7, #7]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3708      	adds	r7, #8
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	20000a68 	.word	0x20000a68

0800c164 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b088      	sub	sp, #32
 800c168:	af02      	add	r7, sp, #8
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
 800c170:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	68f9      	ldr	r1, [r7, #12]
 800c180:	4806      	ldr	r0, [pc, #24]	; (800c19c <BSP_SD_ReadBlocks+0x38>)
 800c182:	f7fb fb66 	bl	8007852 <HAL_SD_ReadBlocks>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c190:	7dfb      	ldrb	r3, [r7, #23]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3718      	adds	r7, #24
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20000a68 	.word	0x20000a68

0800c1a0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b088      	sub	sp, #32
 800c1a4:	af02      	add	r7, sp, #8
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	68f9      	ldr	r1, [r7, #12]
 800c1bc:	4806      	ldr	r0, [pc, #24]	; (800c1d8 <BSP_SD_WriteBlocks+0x38>)
 800c1be:	f7fb fcde 	bl	8007b7e <HAL_SD_WriteBlocks>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d001      	beq.n	800c1cc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20000a68 	.word	0x20000a68

0800c1dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c1e0:	4805      	ldr	r0, [pc, #20]	; (800c1f8 <BSP_SD_GetCardState+0x1c>)
 800c1e2:	f7fc f903 	bl	80083ec <HAL_SD_GetCardState>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b04      	cmp	r3, #4
 800c1ea:	bf14      	ite	ne
 800c1ec:	2301      	movne	r3, #1
 800c1ee:	2300      	moveq	r3, #0
 800c1f0:	b2db      	uxtb	r3, r3
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20000a68 	.word	0x20000a68

0800c1fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	4803      	ldr	r0, [pc, #12]	; (800c214 <BSP_SD_GetCardInfo+0x18>)
 800c208:	f7fc f848 	bl	800829c <HAL_SD_GetCardInfo>
}
 800c20c:	bf00      	nop
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	20000a68 	.word	0x20000a68

0800c218 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c21e:	2301      	movs	r3, #1
 800c220:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c222:	f000 f825 	bl	800c270 <BSP_PlatformIsDetected>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d101      	bne.n	800c230 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c22c:	2300      	movs	r3, #0
 800c22e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c230:	79fb      	ldrb	r3, [r7, #7]
 800c232:	b2db      	uxtb	r3, r3
}
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c240:	4904      	ldr	r1, [pc, #16]	; (800c254 <MX_FATFS_Init+0x18>)
 800c242:	4805      	ldr	r0, [pc, #20]	; (800c258 <MX_FATFS_Init+0x1c>)
 800c244:	f7ff ff58 	bl	800c0f8 <FATFS_LinkDriver>
 800c248:	4603      	mov	r3, r0
 800c24a:	461a      	mov	r2, r3
 800c24c:	4b03      	ldr	r3, [pc, #12]	; (800c25c <MX_FATFS_Init+0x20>)
 800c24e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c250:	bf00      	nop
 800c252:	bd80      	pop	{r7, pc}
 800c254:	200005cc 	.word	0x200005cc
 800c258:	08011b64 	.word	0x08011b64
 800c25c:	200005c8 	.word	0x200005c8

0800c260 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c264:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c266:	4618      	mov	r0, r3
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c276:	2301      	movs	r3, #1
 800c278:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c27a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c27e:	4806      	ldr	r0, [pc, #24]	; (800c298 <BSP_PlatformIsDetected+0x28>)
 800c280:	f7f9 f968 	bl	8005554 <HAL_GPIO_ReadPin>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c28a:	2300      	movs	r3, #0
 800c28c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c28e:	79fb      	ldrb	r3, [r7, #7]
}  
 800c290:	4618      	mov	r0, r3
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	40022000 	.word	0x40022000

0800c29c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	80fb      	strh	r3, [r7, #6]



	if(GPIO_Pin == GPIO_PIN_13){
 800c2a6:	88fb      	ldrh	r3, [r7, #6]
 800c2a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2ac:	d170      	bne.n	800c390 <HAL_GPIO_EXTI_Callback+0xf4>

		BSP_TS_GetState(&TS_State);
 800c2ae:	483a      	ldr	r0, [pc, #232]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c2b0:	f7f6 f9c0 	bl	8002634 <BSP_TS_GetState>

		if(TS_State.touchDetected){
 800c2b4:	4b38      	ldr	r3, [pc, #224]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d069      	beq.n	800c390 <HAL_GPIO_EXTI_Callback+0xf4>

		   if( (int)TS_State.touchX[0] <480 && (int)TS_State.touchY[0] <480  ){
 800c2bc:	4b36      	ldr	r3, [pc, #216]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c2be:	885b      	ldrh	r3, [r3, #2]
 800c2c0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800c2c4:	d20a      	bcs.n	800c2dc <HAL_GPIO_EXTI_Callback+0x40>
 800c2c6:	4b34      	ldr	r3, [pc, #208]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c2c8:	88db      	ldrh	r3, [r3, #6]
 800c2ca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800c2ce:	d205      	bcs.n	800c2dc <HAL_GPIO_EXTI_Callback+0x40>

			   HAL_Delay(100);
 800c2d0:	2064      	movs	r0, #100	; 0x64
 800c2d2:	f7f6 fb57 	bl	8002984 <HAL_Delay>

			   turnFlag=1;
 800c2d6:	4b31      	ldr	r3, [pc, #196]	; (800c39c <HAL_GPIO_EXTI_Callback+0x100>)
 800c2d8:	2201      	movs	r2, #1
 800c2da:	601a      	str	r2, [r3, #0]


            }

		   if( (int)TS_State.touchX[0] >500 &&  (int)TS_State.touchX[0] <780 && (int)TS_State.touchY[0] >180 && (int)TS_State.touchY[0] < 230  ){
 800c2dc:	4b2e      	ldr	r3, [pc, #184]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c2de:	885b      	ldrh	r3, [r3, #2]
 800c2e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c2e4:	d927      	bls.n	800c336 <HAL_GPIO_EXTI_Callback+0x9a>
 800c2e6:	4b2c      	ldr	r3, [pc, #176]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c2e8:	885b      	ldrh	r3, [r3, #2]
 800c2ea:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 800c2ee:	d222      	bcs.n	800c336 <HAL_GPIO_EXTI_Callback+0x9a>
 800c2f0:	4b29      	ldr	r3, [pc, #164]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c2f2:	88db      	ldrh	r3, [r3, #6]
 800c2f4:	2bb4      	cmp	r3, #180	; 0xb4
 800c2f6:	d91e      	bls.n	800c336 <HAL_GPIO_EXTI_Callback+0x9a>
 800c2f8:	4b27      	ldr	r3, [pc, #156]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c2fa:	88db      	ldrh	r3, [r3, #6]
 800c2fc:	2be5      	cmp	r3, #229	; 0xe5
 800c2fe:	d81a      	bhi.n	800c336 <HAL_GPIO_EXTI_Callback+0x9a>

			   if(startSoft==0  && startARMSoft==0){
 800c300:	4b27      	ldr	r3, [pc, #156]	; (800c3a0 <HAL_GPIO_EXTI_Callback+0x104>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d116      	bne.n	800c336 <HAL_GPIO_EXTI_Callback+0x9a>
 800c308:	4b26      	ldr	r3, [pc, #152]	; (800c3a4 <HAL_GPIO_EXTI_Callback+0x108>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d112      	bne.n	800c336 <HAL_GPIO_EXTI_Callback+0x9a>
				   startFlag=1;
 800c310:	4b25      	ldr	r3, [pc, #148]	; (800c3a8 <HAL_GPIO_EXTI_Callback+0x10c>)
 800c312:	2201      	movs	r2, #1
 800c314:	601a      	str	r2, [r3, #0]
				   startSoft++;
 800c316:	4b22      	ldr	r3, [pc, #136]	; (800c3a0 <HAL_GPIO_EXTI_Callback+0x104>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	3301      	adds	r3, #1
 800c31c:	4a20      	ldr	r2, [pc, #128]	; (800c3a0 <HAL_GPIO_EXTI_Callback+0x104>)
 800c31e:	6013      	str	r3, [r2, #0]

				   BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800c320:	4822      	ldr	r0, [pc, #136]	; (800c3ac <HAL_GPIO_EXTI_Callback+0x110>)
 800c322:	f7f5 f973 	bl	800160c <BSP_LCD_SetTextColor>
				   BSP_LCD_DrawRect(500, 180, 280, 50);
 800c326:	2332      	movs	r3, #50	; 0x32
 800c328:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c32c:	21b4      	movs	r1, #180	; 0xb4
 800c32e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c332:	f7f5 fb67 	bl	8001a04 <BSP_LCD_DrawRect>
			   }


		   }

		   if( (int)TS_State.touchX[0] >500 &&  (int)TS_State.touchX[0] <780 && (int)TS_State.touchY[0] >100 && (int)TS_State.touchY[0] < 150  ){
 800c336:	4b18      	ldr	r3, [pc, #96]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c338:	885b      	ldrh	r3, [r3, #2]
 800c33a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c33e:	d927      	bls.n	800c390 <HAL_GPIO_EXTI_Callback+0xf4>
 800c340:	4b15      	ldr	r3, [pc, #84]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c342:	885b      	ldrh	r3, [r3, #2]
 800c344:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 800c348:	d222      	bcs.n	800c390 <HAL_GPIO_EXTI_Callback+0xf4>
 800c34a:	4b13      	ldr	r3, [pc, #76]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c34c:	88db      	ldrh	r3, [r3, #6]
 800c34e:	2b64      	cmp	r3, #100	; 0x64
 800c350:	d91e      	bls.n	800c390 <HAL_GPIO_EXTI_Callback+0xf4>
 800c352:	4b11      	ldr	r3, [pc, #68]	; (800c398 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c354:	88db      	ldrh	r3, [r3, #6]
 800c356:	2b95      	cmp	r3, #149	; 0x95
 800c358:	d81a      	bhi.n	800c390 <HAL_GPIO_EXTI_Callback+0xf4>

		   			   if(startSoft==0  && startARMSoft==0){
 800c35a:	4b11      	ldr	r3, [pc, #68]	; (800c3a0 <HAL_GPIO_EXTI_Callback+0x104>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d116      	bne.n	800c390 <HAL_GPIO_EXTI_Callback+0xf4>
 800c362:	4b10      	ldr	r3, [pc, #64]	; (800c3a4 <HAL_GPIO_EXTI_Callback+0x108>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d112      	bne.n	800c390 <HAL_GPIO_EXTI_Callback+0xf4>
		   				   startARMFlag=1;
 800c36a:	4b11      	ldr	r3, [pc, #68]	; (800c3b0 <HAL_GPIO_EXTI_Callback+0x114>)
 800c36c:	2201      	movs	r2, #1
 800c36e:	601a      	str	r2, [r3, #0]
		   				    startARMSoft++;
 800c370:	4b0c      	ldr	r3, [pc, #48]	; (800c3a4 <HAL_GPIO_EXTI_Callback+0x108>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3301      	adds	r3, #1
 800c376:	4a0b      	ldr	r2, [pc, #44]	; (800c3a4 <HAL_GPIO_EXTI_Callback+0x108>)
 800c378:	6013      	str	r3, [r2, #0]

		   				BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800c37a:	480c      	ldr	r0, [pc, #48]	; (800c3ac <HAL_GPIO_EXTI_Callback+0x110>)
 800c37c:	f7f5 f946 	bl	800160c <BSP_LCD_SetTextColor>
		   				BSP_LCD_DrawRect(500, 100, 280, 50);
 800c380:	2332      	movs	r3, #50	; 0x32
 800c382:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c386:	2164      	movs	r1, #100	; 0x64
 800c388:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c38c:	f7f5 fb3a 	bl	8001a04 <BSP_LCD_DrawRect>
        		   }

	}
  }

}
 800c390:	bf00      	nop
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	20000ce4 	.word	0x20000ce4
 800c39c:	20000388 	.word	0x20000388
 800c3a0:	20000378 	.word	0x20000378
 800c3a4:	2000037c 	.word	0x2000037c
 800c3a8:	2000038c 	.word	0x2000038c
 800c3ac:	ff000080 	.word	0xff000080
 800c3b0:	20000390 	.word	0x20000390

0800c3b4 <HAL_TIM_PeriodElapsedCallback>:

void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){           // 2 em 2 seg
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a2a      	ldr	r2, [pc, #168]	; (800c46c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d145      	bne.n	800c452 <HAL_TIM_PeriodElapsedCallback+0x9e>
					HAL_StatusTypeDef status=HAL_ADC_PollForConversion(&hadc1,TEMP_REFRESH_PERIOD);
 800c3c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c3ca:	4829      	ldr	r0, [pc, #164]	; (800c470 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800c3cc:	f7f6 fc00 	bl	8002bd0 <HAL_ADC_PollForConversion>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	73fb      	strb	r3, [r7, #15]
			  	  	  if(status==HAL_OK)
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d13b      	bne.n	800c452 <HAL_TIM_PeriodElapsedCallback+0x9e>
			  	  	  {
			  	  		  ConvertedValue=HAL_ADC_GetValue(&hadc1); //get value
 800c3da:	4825      	ldr	r0, [pc, #148]	; (800c470 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800c3dc:	f7f6 fdbd 	bl	8002f5a <HAL_ADC_GetValue>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	4b24      	ldr	r3, [pc, #144]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800c3e4:	601a      	str	r2, [r3, #0]

			  	  		  JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800c3e6:	4b23      	ldr	r3, [pc, #140]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f640 42e4 	movw	r2, #3300	; 0xce4
 800c3ee:	fb02 f203 	mul.w	r2, r2, r3
 800c3f2:	4b21      	ldr	r3, [pc, #132]	; (800c478 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800c3f4:	fba3 1302 	umull	r1, r3, r3, r2
 800c3f8:	1ad2      	subs	r2, r2, r3
 800c3fa:	0852      	lsrs	r2, r2, #1
 800c3fc:	4413      	add	r3, r2
 800c3fe:	0ada      	lsrs	r2, r3, #11
 800c400:	4613      	mov	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	005b      	lsls	r3, r3, #1
 800c408:	461a      	mov	r2, r3
 800c40a:	4b1c      	ldr	r3, [pc, #112]	; (800c47c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800c40c:	4413      	add	r3, r2
 800c40e:	4a1c      	ldr	r2, [pc, #112]	; (800c480 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800c410:	fba2 2303 	umull	r2, r3, r2, r3
 800c414:	08db      	lsrs	r3, r3, #3
 800c416:	3319      	adds	r3, #25
 800c418:	461a      	mov	r2, r3
 800c41a:	4b1a      	ldr	r3, [pc, #104]	; (800c484 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800c41c:	601a      	str	r2, [r3, #0]
			  	  		  /* Display the Temperature Value on the LCD */
			  	  		  sprintf(desc, "T= %ld C", JTemp);
 800c41e:	4b19      	ldr	r3, [pc, #100]	; (800c484 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	461a      	mov	r2, r3
 800c424:	4918      	ldr	r1, [pc, #96]	; (800c488 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800c426:	4819      	ldr	r0, [pc, #100]	; (800c48c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800c428:	f002 fa04 	bl	800e834 <siprintf>
			  	  		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c42c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c430:	f7f5 f8ec 	bl	800160c <BSP_LCD_SetTextColor>
			  	  	      BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c434:	f04f 30ff 	mov.w	r0, #4294967295
 800c438:	f7f5 f900 	bl	800163c <BSP_LCD_SetBackColor>
			  	  	      BSP_LCD_SetFont(&Font16);
 800c43c:	4814      	ldr	r0, [pc, #80]	; (800c490 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800c43e:	f7f5 f917 	bl	8001670 <BSP_LCD_SetFont>
			  	  		  BSP_LCD_DisplayStringAt(650, 435, (uint8_t *)desc, LEFT_MODE);
 800c442:	2303      	movs	r3, #3
 800c444:	4a11      	ldr	r2, [pc, #68]	; (800c48c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800c446:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c44a:	f240 208a 	movw	r0, #650	; 0x28a
 800c44e:	f7f5 f995 	bl	800177c <BSP_LCD_DisplayStringAt>
			  	  	  }

	}

	if(htim->Instance == TIM7){
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a0f      	ldr	r2, [pc, #60]	; (800c494 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d102      	bne.n	800c462 <HAL_TIM_PeriodElapsedCallback+0xae>
		flagClock=1;
 800c45c:	4b0e      	ldr	r3, [pc, #56]	; (800c498 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800c45e:	2201      	movs	r2, #1
 800c460:	601a      	str	r2, [r3, #0]

		}


}
 800c462:	bf00      	nop
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	40001000 	.word	0x40001000
 800c470:	20000b94 	.word	0x20000b94
 800c474:	20000a30 	.word	0x20000a30
 800c478:	00100101 	.word	0x00100101
 800c47c:	ffffe250 	.word	0xffffe250
 800c480:	51eb851f 	.word	0x51eb851f
 800c484:	20000bdc 	.word	0x20000bdc
 800c488:	0800f114 	.word	0x0800f114
 800c48c:	20000c28 	.word	0x20000c28
 800c490:	20000044 	.word	0x20000044
 800c494:	40001400 	.word	0x40001400
 800c498:	20000394 	.word	0x20000394

0800c49c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c49c:	b590      	push	{r4, r7, lr}
 800c49e:	b08b      	sub	sp, #44	; 0x2c
 800c4a0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c4a2:	f7f6 fa11 	bl	80028c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c4a6:	f000 fc0b 	bl	800ccc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c4aa:	f000 ffbb 	bl	800d424 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800c4ae:	f000 fcfd 	bl	800ceac <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800c4b2:	f000 fd33 	bl	800cf1c <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800c4b6:	f000 ff67 	bl	800d388 <MX_FMC_Init>
  MX_LTDC_Init();
 800c4ba:	f000 fe23 	bl	800d104 <MX_LTDC_Init>
  MX_TIM6_Init();
 800c4be:	f000 fef3 	bl	800d2a8 <MX_TIM6_Init>
  MX_ADC1_Init();
 800c4c2:	f000 fc9f 	bl	800ce04 <MX_ADC1_Init>
  MX_SDMMC2_SD_Init();
 800c4c6:	f000 fecf 	bl	800d268 <MX_SDMMC2_SD_Init>
  MX_TIM7_Init();
 800c4ca:	f000 ff25 	bl	800d318 <MX_TIM7_Init>
  MX_FATFS_Init();
 800c4ce:	f7ff feb5 	bl	800c23c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
    BSP_LED_Init(LED_RED);
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	f7f4 fc1a 	bl	8000d0c <BSP_LED_Init>
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 800c4d8:	2100      	movs	r1, #0
 800c4da:	2000      	movs	r0, #0
 800c4dc:	f7f4 fc60 	bl	8000da0 <BSP_PB_Init>

    LCD_Config();
 800c4e0:	f001 f838 	bl	800d554 <LCD_Config>

    BSP_TS_Init(800,480);
 800c4e4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800c4e8:	f44f 7048 	mov.w	r0, #800	; 0x320
 800c4ec:	f7f6 f810 	bl	8002510 <BSP_TS_Init>
    BSP_TS_ITConfig();
 800c4f0:	f7f6 f86e 	bl	80025d0 <BSP_TS_ITConfig>

    HAL_ADC_Start(&hadc1);     //start do adc
 800c4f4:	4850      	ldr	r0, [pc, #320]	; (800c638 <main+0x19c>)
 800c4f6:	f7f6 faab 	bl	8002a50 <HAL_ADC_Start>

    HAL_TIM_Base_Start_IT(&htim6);
 800c4fa:	4850      	ldr	r0, [pc, #320]	; (800c63c <main+0x1a0>)
 800c4fc:	f7fc fb44 	bl	8008b88 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 800c500:	484f      	ldr	r0, [pc, #316]	; (800c640 <main+0x1a4>)
 800c502:	f7fc fb41 	bl	8008b88 <HAL_TIM_Base_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
/*  PUSH-BUTTON  */
	  if(BSP_PB_GetState(BUTTON_WAKEUP)==1){
 800c506:	2000      	movs	r0, #0
 800c508:	f7f4 fc9e 	bl	8000e48 <BSP_PB_GetState>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d138      	bne.n	800c584 <main+0xe8>
		  LCD_Config();
 800c512:	f001 f81f 	bl	800d554 <LCD_Config>
		  gameON=0;
 800c516:	4b4b      	ldr	r3, [pc, #300]	; (800c644 <main+0x1a8>)
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]
		  gameARMon=0;
 800c51c:	4b4a      	ldr	r3, [pc, #296]	; (800c648 <main+0x1ac>)
 800c51e:	2200      	movs	r2, #0
 800c520:	601a      	str	r2, [r3, #0]
		  startSoft=0;
 800c522:	4b4a      	ldr	r3, [pc, #296]	; (800c64c <main+0x1b0>)
 800c524:	2200      	movs	r2, #0
 800c526:	601a      	str	r2, [r3, #0]
		  startARMSoft=0;
 800c528:	4b49      	ldr	r3, [pc, #292]	; (800c650 <main+0x1b4>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	601a      	str	r2, [r3, #0]
		  newPlayer=0;
 800c52e:	4b49      	ldr	r3, [pc, #292]	; (800c654 <main+0x1b8>)
 800c530:	2200      	movs	r2, #0
 800c532:	601a      	str	r2, [r3, #0]

		  //volta a escrever a matriz
		        for (int i=0;i<8;i++){
 800c534:	2300      	movs	r3, #0
 800c536:	627b      	str	r3, [r7, #36]	; 0x24
 800c538:	e013      	b.n	800c562 <main+0xc6>
		                    for (int j=0;j<8;j++){
 800c53a:	2300      	movs	r3, #0
 800c53c:	623b      	str	r3, [r7, #32]
 800c53e:	e00a      	b.n	800c556 <main+0xba>
		                   board[i][j]='.';
 800c540:	4a45      	ldr	r2, [pc, #276]	; (800c658 <main+0x1bc>)
 800c542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c544:	00db      	lsls	r3, r3, #3
 800c546:	441a      	add	r2, r3
 800c548:	6a3b      	ldr	r3, [r7, #32]
 800c54a:	4413      	add	r3, r2
 800c54c:	222e      	movs	r2, #46	; 0x2e
 800c54e:	701a      	strb	r2, [r3, #0]
		                    for (int j=0;j<8;j++){
 800c550:	6a3b      	ldr	r3, [r7, #32]
 800c552:	3301      	adds	r3, #1
 800c554:	623b      	str	r3, [r7, #32]
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	2b07      	cmp	r3, #7
 800c55a:	ddf1      	ble.n	800c540 <main+0xa4>
		        for (int i=0;i<8;i++){
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	3301      	adds	r3, #1
 800c560:	627b      	str	r3, [r7, #36]	; 0x24
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	2b07      	cmp	r3, #7
 800c566:	dde8      	ble.n	800c53a <main+0x9e>
		                  }
		                }
		                board[3][3]='x';
 800c568:	4b3b      	ldr	r3, [pc, #236]	; (800c658 <main+0x1bc>)
 800c56a:	2278      	movs	r2, #120	; 0x78
 800c56c:	76da      	strb	r2, [r3, #27]
		                board[3][4]='o';
 800c56e:	4b3a      	ldr	r3, [pc, #232]	; (800c658 <main+0x1bc>)
 800c570:	226f      	movs	r2, #111	; 0x6f
 800c572:	771a      	strb	r2, [r3, #28]
		                board[4][3]='o';
 800c574:	4b38      	ldr	r3, [pc, #224]	; (800c658 <main+0x1bc>)
 800c576:	226f      	movs	r2, #111	; 0x6f
 800c578:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		                board[4][4]='x';
 800c57c:	4b36      	ldr	r3, [pc, #216]	; (800c658 <main+0x1bc>)
 800c57e:	2278      	movs	r2, #120	; 0x78
 800c580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24




/*    Play game against Human     */
if(startFlag==1 ){
 800c584:	4b35      	ldr	r3, [pc, #212]	; (800c65c <main+0x1c0>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d107      	bne.n	800c59c <main+0x100>
	  startFlag=0;
 800c58c:	4b33      	ldr	r3, [pc, #204]	; (800c65c <main+0x1c0>)
 800c58e:	2200      	movs	r2, #0
 800c590:	601a      	str	r2, [r3, #0]

	  gameON=1;
 800c592:	4b2c      	ldr	r3, [pc, #176]	; (800c644 <main+0x1a8>)
 800c594:	2201      	movs	r2, #1
 800c596:	601a      	str	r2, [r3, #0]
	  startGame();
 800c598:	f001 f892 	bl	800d6c0 <startGame>

}

if (gameON==1){
 800c59c:	4b29      	ldr	r3, [pc, #164]	; (800c644 <main+0x1a8>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	f040 82ee 	bne.w	800cb82 <main+0x6e6>

//Player1

	  if(newPlayer%2 == 0){
 800c5a6:	4b2b      	ldr	r3, [pc, #172]	; (800c654 <main+0x1b8>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d16e      	bne.n	800c690 <main+0x1f4>

	  	 BSP_LCD_SetTextColor(colorP1);
 800c5b2:	4b2b      	ldr	r3, [pc, #172]	; (800c660 <main+0x1c4>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7f5 f828 	bl	800160c <BSP_LCD_SetTextColor>
	  	 BSP_LCD_DisplayStringAt(590, 250, (uint8_t *)"PLAYER 1", LEFT_MODE);
 800c5bc:	2303      	movs	r3, #3
 800c5be:	4a29      	ldr	r2, [pc, #164]	; (800c664 <main+0x1c8>)
 800c5c0:	21fa      	movs	r1, #250	; 0xfa
 800c5c2:	f240 204e 	movw	r0, #590	; 0x24e
 800c5c6:	f7f5 f8d9 	bl	800177c <BSP_LCD_DisplayStringAt>

	  	 symbPlayer='x';
 800c5ca:	4b27      	ldr	r3, [pc, #156]	; (800c668 <main+0x1cc>)
 800c5cc:	2278      	movs	r2, #120	; 0x78
 800c5ce:	701a      	strb	r2, [r3, #0]
	  	 symbAdv='o';
 800c5d0:	4b26      	ldr	r3, [pc, #152]	; (800c66c <main+0x1d0>)
 800c5d2:	226f      	movs	r2, #111	; 0x6f
 800c5d4:	701a      	strb	r2, [r3, #0]
	  	 colorPlayer=colorP1;
 800c5d6:	4b22      	ldr	r3, [pc, #136]	; (800c660 <main+0x1c4>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a25      	ldr	r2, [pc, #148]	; (800c670 <main+0x1d4>)
 800c5dc:	6013      	str	r3, [r2, #0]
	  	 //colorAdv=colorP2;

	  	 if(turnFlag==1){
 800c5de:	4b25      	ldr	r3, [pc, #148]	; (800c674 <main+0x1d8>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d102      	bne.n	800c5ec <main+0x150>
	  		 downTimer=20;
 800c5e6:	4b24      	ldr	r3, [pc, #144]	; (800c678 <main+0x1dc>)
 800c5e8:	2214      	movs	r2, #20
 800c5ea:	601a      	str	r2, [r3, #0]
	  	 }

	  	 if(timOutFlag == 1){
 800c5ec:	4b23      	ldr	r3, [pc, #140]	; (800c67c <main+0x1e0>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d116      	bne.n	800c622 <main+0x186>
	  		timOutFlag=0;
 800c5f4:	4b21      	ldr	r3, [pc, #132]	; (800c67c <main+0x1e0>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	601a      	str	r2, [r3, #0]
	  		timOutP1++;
 800c5fa:	4b21      	ldr	r3, [pc, #132]	; (800c680 <main+0x1e4>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3301      	adds	r3, #1
 800c600:	4a1f      	ldr	r2, [pc, #124]	; (800c680 <main+0x1e4>)
 800c602:	6013      	str	r3, [r2, #0]

	  		sprintf(timeOutString, "Timeout P1: %d", timOutP1);
 800c604:	4b1e      	ldr	r3, [pc, #120]	; (800c680 <main+0x1e4>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	461a      	mov	r2, r3
 800c60a:	491e      	ldr	r1, [pc, #120]	; (800c684 <main+0x1e8>)
 800c60c:	481e      	ldr	r0, [pc, #120]	; (800c688 <main+0x1ec>)
 800c60e:	f002 f911 	bl	800e834 <siprintf>
	  		BSP_LCD_DisplayStringAt(550, 320, (uint8_t *)timeOutString, LEFT_MODE);
 800c612:	2303      	movs	r3, #3
 800c614:	4a1c      	ldr	r2, [pc, #112]	; (800c688 <main+0x1ec>)
 800c616:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c61a:	f240 2026 	movw	r0, #550	; 0x226
 800c61e:	f7f5 f8ad 	bl	800177c <BSP_LCD_DisplayStringAt>

	  	 }

	  	 if(timOutP1 == 3){
 800c622:	4b17      	ldr	r3, [pc, #92]	; (800c680 <main+0x1e4>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b03      	cmp	r3, #3
 800c628:	d174      	bne.n	800c714 <main+0x278>
	  		gameON = 0;
 800c62a:	4b06      	ldr	r3, [pc, #24]	; (800c644 <main+0x1a8>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	601a      	str	r2, [r3, #0]
	  		gameEnd=1;
 800c630:	4b16      	ldr	r3, [pc, #88]	; (800c68c <main+0x1f0>)
 800c632:	2201      	movs	r2, #1
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	e06d      	b.n	800c714 <main+0x278>
 800c638:	20000b94 	.word	0x20000b94
 800c63c:	20000be8 	.word	0x20000be8
 800c640:	20000d38 	.word	0x20000d38
 800c644:	2000039c 	.word	0x2000039c
 800c648:	200003a0 	.word	0x200003a0
 800c64c:	20000378 	.word	0x20000378
 800c650:	2000037c 	.word	0x2000037c
 800c654:	20000398 	.word	0x20000398
 800c658:	20000064 	.word	0x20000064
 800c65c:	2000038c 	.word	0x2000038c
 800c660:	200000a4 	.word	0x200000a4
 800c664:	0800f120 	.word	0x0800f120
 800c668:	20000be0 	.word	0x20000be0
 800c66c:	20000a50 	.word	0x20000a50
 800c670:	20000be4 	.word	0x20000be4
 800c674:	20000388 	.word	0x20000388
 800c678:	20000060 	.word	0x20000060
 800c67c:	200003b0 	.word	0x200003b0
 800c680:	200003b4 	.word	0x200003b4
 800c684:	0800f12c 	.word	0x0800f12c
 800c688:	20000a54 	.word	0x20000a54
 800c68c:	200003a4 	.word	0x200003a4

//Player2

	 else{

	  	BSP_LCD_SetTextColor(colorP2);
 800c690:	4b9c      	ldr	r3, [pc, #624]	; (800c904 <main+0x468>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4618      	mov	r0, r3
 800c696:	f7f4 ffb9 	bl	800160c <BSP_LCD_SetTextColor>
	  	 BSP_LCD_DisplayStringAt(590, 250, (uint8_t *)"PLAYER 2", LEFT_MODE);
 800c69a:	2303      	movs	r3, #3
 800c69c:	4a9a      	ldr	r2, [pc, #616]	; (800c908 <main+0x46c>)
 800c69e:	21fa      	movs	r1, #250	; 0xfa
 800c6a0:	f240 204e 	movw	r0, #590	; 0x24e
 800c6a4:	f7f5 f86a 	bl	800177c <BSP_LCD_DisplayStringAt>

	  	symbPlayer='o';
 800c6a8:	4b98      	ldr	r3, [pc, #608]	; (800c90c <main+0x470>)
 800c6aa:	226f      	movs	r2, #111	; 0x6f
 800c6ac:	701a      	strb	r2, [r3, #0]
	    symbAdv='x';
 800c6ae:	4b98      	ldr	r3, [pc, #608]	; (800c910 <main+0x474>)
 800c6b0:	2278      	movs	r2, #120	; 0x78
 800c6b2:	701a      	strb	r2, [r3, #0]
	    colorPlayer=colorP2;
 800c6b4:	4b93      	ldr	r3, [pc, #588]	; (800c904 <main+0x468>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a96      	ldr	r2, [pc, #600]	; (800c914 <main+0x478>)
 800c6ba:	6013      	str	r3, [r2, #0]

	    if(turnFlag==1){
 800c6bc:	4b96      	ldr	r3, [pc, #600]	; (800c918 <main+0x47c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d102      	bne.n	800c6ca <main+0x22e>
	    	downTimer=20;
 800c6c4:	4b95      	ldr	r3, [pc, #596]	; (800c91c <main+0x480>)
 800c6c6:	2214      	movs	r2, #20
 800c6c8:	601a      	str	r2, [r3, #0]
	    }

	    if(timOutFlag == 1){
 800c6ca:	4b95      	ldr	r3, [pc, #596]	; (800c920 <main+0x484>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d116      	bne.n	800c700 <main+0x264>
	       timOutFlag=0;
 800c6d2:	4b93      	ldr	r3, [pc, #588]	; (800c920 <main+0x484>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	601a      	str	r2, [r3, #0]
    		timOutP2++;
 800c6d8:	4b92      	ldr	r3, [pc, #584]	; (800c924 <main+0x488>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	4a91      	ldr	r2, [pc, #580]	; (800c924 <main+0x488>)
 800c6e0:	6013      	str	r3, [r2, #0]

    		sprintf(timeOutString, "Timeout P2: %d", timOutP2);
 800c6e2:	4b90      	ldr	r3, [pc, #576]	; (800c924 <main+0x488>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	498f      	ldr	r1, [pc, #572]	; (800c928 <main+0x48c>)
 800c6ea:	4890      	ldr	r0, [pc, #576]	; (800c92c <main+0x490>)
 800c6ec:	f002 f8a2 	bl	800e834 <siprintf>
    		BSP_LCD_DisplayStringAt(550, 340, (uint8_t *)timeOutString, LEFT_MODE);
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	4a8e      	ldr	r2, [pc, #568]	; (800c92c <main+0x490>)
 800c6f4:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800c6f8:	f240 2026 	movw	r0, #550	; 0x226
 800c6fc:	f7f5 f83e 	bl	800177c <BSP_LCD_DisplayStringAt>
	    }

	    if(timOutP2 == 3){
 800c700:	4b88      	ldr	r3, [pc, #544]	; (800c924 <main+0x488>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b03      	cmp	r3, #3
 800c706:	d105      	bne.n	800c714 <main+0x278>
	  		gameON = 0;
 800c708:	4b89      	ldr	r3, [pc, #548]	; (800c930 <main+0x494>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	601a      	str	r2, [r3, #0]
	  		gameEnd = 1;
 800c70e:	4b89      	ldr	r3, [pc, #548]	; (800c934 <main+0x498>)
 800c710:	2201      	movs	r2, #1
 800c712:	601a      	str	r2, [r3, #0]

	   }

//------verificar se ha jogadas possiveis------------------------------------------------------------------

	  jogadasPossiveis(symbPlayer, symbAdv);
 800c714:	4b7d      	ldr	r3, [pc, #500]	; (800c90c <main+0x470>)
 800c716:	781a      	ldrb	r2, [r3, #0]
 800c718:	4b7d      	ldr	r3, [pc, #500]	; (800c910 <main+0x474>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	4619      	mov	r1, r3
 800c71e:	4610      	mov	r0, r2
 800c720:	f001 faec 	bl	800dcfc <jogadasPossiveis>

	  /*se n houver jogadas possiveis a segunda posiçao da matriz (jogPosssiveis[1]) vai estar igual a zero*/
	  /*e preciso verificar a segunda posiçao e nao a primeira pq (0,0) e uma jogada possivel              */

	  if( jogPossiveisX[1]==jogPossiveisY[1]  && jogPossiveisX[1]==0  ){
 800c724:	4b84      	ldr	r3, [pc, #528]	; (800c938 <main+0x49c>)
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	4b84      	ldr	r3, [pc, #528]	; (800c93c <main+0x4a0>)
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d109      	bne.n	800c744 <main+0x2a8>
 800c730:	4b81      	ldr	r3, [pc, #516]	; (800c938 <main+0x49c>)
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d105      	bne.n	800c744 <main+0x2a8>
		  gameON = 0;
 800c738:	4b7d      	ldr	r3, [pc, #500]	; (800c930 <main+0x494>)
 800c73a:	2200      	movs	r2, #0
 800c73c:	601a      	str	r2, [r3, #0]
		  gameEnd = 1;
 800c73e:	4b7d      	ldr	r3, [pc, #500]	; (800c934 <main+0x498>)
 800c740:	2201      	movs	r2, #1
 800c742:	601a      	str	r2, [r3, #0]
	  }

//----colocar as peças-------------------------------------------------------------------------------------

	  casaX = (int)TS_State.touchX[0]/60;
 800c744:	4b7e      	ldr	r3, [pc, #504]	; (800c940 <main+0x4a4>)
 800c746:	885b      	ldrh	r3, [r3, #2]
 800c748:	4a7e      	ldr	r2, [pc, #504]	; (800c944 <main+0x4a8>)
 800c74a:	fba2 2303 	umull	r2, r3, r2, r3
 800c74e:	095b      	lsrs	r3, r3, #5
 800c750:	b29a      	uxth	r2, r3
 800c752:	4b7d      	ldr	r3, [pc, #500]	; (800c948 <main+0x4ac>)
 800c754:	801a      	strh	r2, [r3, #0]
	  casaY = (int)TS_State.touchY[0]/60;
 800c756:	4b7a      	ldr	r3, [pc, #488]	; (800c940 <main+0x4a4>)
 800c758:	88db      	ldrh	r3, [r3, #6]
 800c75a:	4a7a      	ldr	r2, [pc, #488]	; (800c944 <main+0x4a8>)
 800c75c:	fba2 2303 	umull	r2, r3, r2, r3
 800c760:	095b      	lsrs	r3, r3, #5
 800c762:	b29a      	uxth	r2, r3
 800c764:	4b79      	ldr	r3, [pc, #484]	; (800c94c <main+0x4b0>)
 800c766:	801a      	strh	r2, [r3, #0]
	  jogadaX = casaX*60+30;
 800c768:	4b77      	ldr	r3, [pc, #476]	; (800c948 <main+0x4ac>)
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	461a      	mov	r2, r3
 800c76e:	0112      	lsls	r2, r2, #4
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	b29b      	uxth	r3, r3
 800c776:	331e      	adds	r3, #30
 800c778:	b29a      	uxth	r2, r3
 800c77a:	4b75      	ldr	r3, [pc, #468]	; (800c950 <main+0x4b4>)
 800c77c:	801a      	strh	r2, [r3, #0]
	  jogadaY = casaY*60+30;
 800c77e:	4b73      	ldr	r3, [pc, #460]	; (800c94c <main+0x4b0>)
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	461a      	mov	r2, r3
 800c784:	0112      	lsls	r2, r2, #4
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	331e      	adds	r3, #30
 800c78e:	b29a      	uxth	r2, r3
 800c790:	4b70      	ldr	r3, [pc, #448]	; (800c954 <main+0x4b8>)
 800c792:	801a      	strh	r2, [r3, #0]

	  BSP_LCD_SetTextColor(colorPlayer);
 800c794:	4b5f      	ldr	r3, [pc, #380]	; (800c914 <main+0x478>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4618      	mov	r0, r3
 800c79a:	f7f4 ff37 	bl	800160c <BSP_LCD_SetTextColor>

	  //verificar q a casa está vazia
	  if(board[casaY][casaX] == '.'  ){
 800c79e:	4b6b      	ldr	r3, [pc, #428]	; (800c94c <main+0x4b0>)
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	4b68      	ldr	r3, [pc, #416]	; (800c948 <main+0x4ac>)
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4a6b      	ldr	r2, [pc, #428]	; (800c958 <main+0x4bc>)
 800c7ac:	00c3      	lsls	r3, r0, #3
 800c7ae:	4413      	add	r3, r2
 800c7b0:	440b      	add	r3, r1
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7b6:	f040 81d8 	bne.w	800cb6a <main+0x6ce>


		  //verificar se existe peça adversaria na casa adjacente
		  //verfica linha-----------------------------------------------------------------------------

			  if( board[casaY+1][casaX]==symbAdv ){
 800c7ba:	4b64      	ldr	r3, [pc, #400]	; (800c94c <main+0x4b0>)
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	4a61      	ldr	r2, [pc, #388]	; (800c948 <main+0x4ac>)
 800c7c2:	8812      	ldrh	r2, [r2, #0]
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	4a64      	ldr	r2, [pc, #400]	; (800c958 <main+0x4bc>)
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	4413      	add	r3, r2
 800c7cc:	440b      	add	r3, r1
 800c7ce:	781a      	ldrb	r2, [r3, #0]
 800c7d0:	4b4f      	ldr	r3, [pc, #316]	; (800c910 <main+0x474>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d157      	bne.n	800c888 <main+0x3ec>


				  BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 800c7d8:	4b5d      	ldr	r3, [pc, #372]	; (800c950 <main+0x4b4>)
 800c7da:	8818      	ldrh	r0, [r3, #0]
 800c7dc:	4b5d      	ldr	r3, [pc, #372]	; (800c954 <main+0x4b8>)
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	2219      	movs	r2, #25
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	f7f5 fa8a 	bl	8001cfc <BSP_LCD_FillCircle>

				  board[casaY][casaX]=symbPlayer;
 800c7e8:	4b58      	ldr	r3, [pc, #352]	; (800c94c <main+0x4b0>)
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	461c      	mov	r4, r3
 800c7ee:	4b56      	ldr	r3, [pc, #344]	; (800c948 <main+0x4ac>)
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	4b45      	ldr	r3, [pc, #276]	; (800c90c <main+0x470>)
 800c7f6:	7819      	ldrb	r1, [r3, #0]
 800c7f8:	4a57      	ldr	r2, [pc, #348]	; (800c958 <main+0x4bc>)
 800c7fa:	00e3      	lsls	r3, r4, #3
 800c7fc:	4413      	add	r3, r2
 800c7fe:	4403      	add	r3, r0
 800c800:	460a      	mov	r2, r1
 800c802:	701a      	strb	r2, [r3, #0]

				  //troca as peças
				  for (int i = casaY ; i<8 ; i++){
 800c804:	4b51      	ldr	r3, [pc, #324]	; (800c94c <main+0x4b0>)
 800c806:	881b      	ldrh	r3, [r3, #0]
 800c808:	61fb      	str	r3, [r7, #28]
 800c80a:	e039      	b.n	800c880 <main+0x3e4>
				  	 if( board [i][casaX] == symbPlayer){
 800c80c:	4b4e      	ldr	r3, [pc, #312]	; (800c948 <main+0x4ac>)
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	4619      	mov	r1, r3
 800c812:	4a51      	ldr	r2, [pc, #324]	; (800c958 <main+0x4bc>)
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	00db      	lsls	r3, r3, #3
 800c818:	4413      	add	r3, r2
 800c81a:	440b      	add	r3, r1
 800c81c:	781a      	ldrb	r2, [r3, #0]
 800c81e:	4b3b      	ldr	r3, [pc, #236]	; (800c90c <main+0x470>)
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	429a      	cmp	r2, r3
 800c824:	d129      	bne.n	800c87a <main+0x3de>
				  		  j=i;
 800c826:	4a4d      	ldr	r2, [pc, #308]	; (800c95c <main+0x4c0>)
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	6013      	str	r3, [r2, #0]
				  		  for(int i = casaY; i<=j; i++){
 800c82c:	4b47      	ldr	r3, [pc, #284]	; (800c94c <main+0x4b0>)
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	61bb      	str	r3, [r7, #24]
 800c832:	e01d      	b.n	800c870 <main+0x3d4>
				  			 board[i][casaX]= symbPlayer;
 800c834:	4b44      	ldr	r3, [pc, #272]	; (800c948 <main+0x4ac>)
 800c836:	881b      	ldrh	r3, [r3, #0]
 800c838:	4618      	mov	r0, r3
 800c83a:	4b34      	ldr	r3, [pc, #208]	; (800c90c <main+0x470>)
 800c83c:	7819      	ldrb	r1, [r3, #0]
 800c83e:	4a46      	ldr	r2, [pc, #280]	; (800c958 <main+0x4bc>)
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	4413      	add	r3, r2
 800c846:	4403      	add	r3, r0
 800c848:	460a      	mov	r2, r1
 800c84a:	701a      	strb	r2, [r3, #0]

				  			  BSP_LCD_FillCircle(jogadaX,  (i*60+30)  ,25);
 800c84c:	4b40      	ldr	r3, [pc, #256]	; (800c950 <main+0x4b4>)
 800c84e:	8818      	ldrh	r0, [r3, #0]
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	b29b      	uxth	r3, r3
 800c854:	461a      	mov	r2, r3
 800c856:	0112      	lsls	r2, r2, #4
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	331e      	adds	r3, #30
 800c860:	b29b      	uxth	r3, r3
 800c862:	2219      	movs	r2, #25
 800c864:	4619      	mov	r1, r3
 800c866:	f7f5 fa49 	bl	8001cfc <BSP_LCD_FillCircle>
				  		  for(int i = casaY; i<=j; i++){
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	3301      	adds	r3, #1
 800c86e:	61bb      	str	r3, [r7, #24]
 800c870:	4b3a      	ldr	r3, [pc, #232]	; (800c95c <main+0x4c0>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	69ba      	ldr	r2, [r7, #24]
 800c876:	429a      	cmp	r2, r3
 800c878:	dddc      	ble.n	800c834 <main+0x398>
				  for (int i = casaY ; i<8 ; i++){
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	3301      	adds	r3, #1
 800c87e:	61fb      	str	r3, [r7, #28]
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	2b07      	cmp	r3, #7
 800c884:	ddc2      	ble.n	800c80c <main+0x370>
 800c886:	e094      	b.n	800c9b2 <main+0x516>
				  }



			  }
			  else if(board[casaY-1][casaX]==symbAdv ){
 800c888:	4b30      	ldr	r3, [pc, #192]	; (800c94c <main+0x4b0>)
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	3b01      	subs	r3, #1
 800c88e:	4a2e      	ldr	r2, [pc, #184]	; (800c948 <main+0x4ac>)
 800c890:	8812      	ldrh	r2, [r2, #0]
 800c892:	4611      	mov	r1, r2
 800c894:	4a30      	ldr	r2, [pc, #192]	; (800c958 <main+0x4bc>)
 800c896:	00db      	lsls	r3, r3, #3
 800c898:	4413      	add	r3, r2
 800c89a:	440b      	add	r3, r1
 800c89c:	781a      	ldrb	r2, [r3, #0]
 800c89e:	4b1c      	ldr	r3, [pc, #112]	; (800c910 <main+0x474>)
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	f040 8085 	bne.w	800c9b2 <main+0x516>

			  				  BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 800c8a8:	4b29      	ldr	r3, [pc, #164]	; (800c950 <main+0x4b4>)
 800c8aa:	8818      	ldrh	r0, [r3, #0]
 800c8ac:	4b29      	ldr	r3, [pc, #164]	; (800c954 <main+0x4b8>)
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	2219      	movs	r2, #25
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	f7f5 fa22 	bl	8001cfc <BSP_LCD_FillCircle>

			  				  board[casaY][casaX]=symbPlayer;
 800c8b8:	4b24      	ldr	r3, [pc, #144]	; (800c94c <main+0x4b0>)
 800c8ba:	881b      	ldrh	r3, [r3, #0]
 800c8bc:	461c      	mov	r4, r3
 800c8be:	4b22      	ldr	r3, [pc, #136]	; (800c948 <main+0x4ac>)
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	4b11      	ldr	r3, [pc, #68]	; (800c90c <main+0x470>)
 800c8c6:	7819      	ldrb	r1, [r3, #0]
 800c8c8:	4a23      	ldr	r2, [pc, #140]	; (800c958 <main+0x4bc>)
 800c8ca:	00e3      	lsls	r3, r4, #3
 800c8cc:	4413      	add	r3, r2
 800c8ce:	4403      	add	r3, r0
 800c8d0:	460a      	mov	r2, r1
 800c8d2:	701a      	strb	r2, [r3, #0]

			  				 //troca as peças
			  				for (int i = casaY ; i>0 ; i--){
 800c8d4:	4b1d      	ldr	r3, [pc, #116]	; (800c94c <main+0x4b0>)
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	617b      	str	r3, [r7, #20]
 800c8da:	e067      	b.n	800c9ac <main+0x510>
			  				      if( board [i][casaX] == symbPlayer){
 800c8dc:	4b1a      	ldr	r3, [pc, #104]	; (800c948 <main+0x4ac>)
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4a1d      	ldr	r2, [pc, #116]	; (800c958 <main+0x4bc>)
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	00db      	lsls	r3, r3, #3
 800c8e8:	4413      	add	r3, r2
 800c8ea:	440b      	add	r3, r1
 800c8ec:	781a      	ldrb	r2, [r3, #0]
 800c8ee:	4b07      	ldr	r3, [pc, #28]	; (800c90c <main+0x470>)
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d157      	bne.n	800c9a6 <main+0x50a>
			  						  j=i;
 800c8f6:	4a19      	ldr	r2, [pc, #100]	; (800c95c <main+0x4c0>)
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	6013      	str	r3, [r2, #0]
			  						 for(int i = casaY; i>=j; i--){
 800c8fc:	4b13      	ldr	r3, [pc, #76]	; (800c94c <main+0x4b0>)
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	613b      	str	r3, [r7, #16]
 800c902:	e04b      	b.n	800c99c <main+0x500>
 800c904:	200000a8 	.word	0x200000a8
 800c908:	0800f13c 	.word	0x0800f13c
 800c90c:	20000be0 	.word	0x20000be0
 800c910:	20000a50 	.word	0x20000a50
 800c914:	20000be4 	.word	0x20000be4
 800c918:	20000388 	.word	0x20000388
 800c91c:	20000060 	.word	0x20000060
 800c920:	200003b0 	.word	0x200003b0
 800c924:	200003b8 	.word	0x200003b8
 800c928:	0800f148 	.word	0x0800f148
 800c92c:	20000a54 	.word	0x20000a54
 800c930:	2000039c 	.word	0x2000039c
 800c934:	200003a4 	.word	0x200003a4
 800c938:	200003c0 	.word	0x200003c0
 800c93c:	20000410 	.word	0x20000410
 800c940:	20000ce4 	.word	0x20000ce4
 800c944:	88888889 	.word	0x88888889
 800c948:	200003a8 	.word	0x200003a8
 800c94c:	200003aa 	.word	0x200003aa
 800c950:	200003ac 	.word	0x200003ac
 800c954:	200003ae 	.word	0x200003ae
 800c958:	20000064 	.word	0x20000064
 800c95c:	200003bc 	.word	0x200003bc
			  						  board[i][casaX]= symbPlayer;
 800c960:	4b65      	ldr	r3, [pc, #404]	; (800caf8 <main+0x65c>)
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	4b65      	ldr	r3, [pc, #404]	; (800cafc <main+0x660>)
 800c968:	7819      	ldrb	r1, [r3, #0]
 800c96a:	4a65      	ldr	r2, [pc, #404]	; (800cb00 <main+0x664>)
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	00db      	lsls	r3, r3, #3
 800c970:	4413      	add	r3, r2
 800c972:	4403      	add	r3, r0
 800c974:	460a      	mov	r2, r1
 800c976:	701a      	strb	r2, [r3, #0]

			  						  BSP_LCD_FillCircle(jogadaX,  (i*60+30)  ,25);
 800c978:	4b62      	ldr	r3, [pc, #392]	; (800cb04 <main+0x668>)
 800c97a:	8818      	ldrh	r0, [r3, #0]
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	b29b      	uxth	r3, r3
 800c980:	461a      	mov	r2, r3
 800c982:	0112      	lsls	r2, r2, #4
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	b29b      	uxth	r3, r3
 800c98a:	331e      	adds	r3, #30
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	2219      	movs	r2, #25
 800c990:	4619      	mov	r1, r3
 800c992:	f7f5 f9b3 	bl	8001cfc <BSP_LCD_FillCircle>
			  						 for(int i = casaY; i>=j; i--){
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3b01      	subs	r3, #1
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	4b5a      	ldr	r3, [pc, #360]	; (800cb08 <main+0x66c>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	dadc      	bge.n	800c960 <main+0x4c4>
			  				for (int i = casaY ; i>0 ; i--){
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	617b      	str	r3, [r7, #20]
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	dc94      	bgt.n	800c8dc <main+0x440>

			  }

		  //verfica coluna-----------------------------------------------------------------------

			  if( board[casaY][casaX+1] == symbAdv ){
 800c9b2:	4b56      	ldr	r3, [pc, #344]	; (800cb0c <main+0x670>)
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4b4f      	ldr	r3, [pc, #316]	; (800caf8 <main+0x65c>)
 800c9ba:	881b      	ldrh	r3, [r3, #0]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	4950      	ldr	r1, [pc, #320]	; (800cb00 <main+0x664>)
 800c9c0:	00d2      	lsls	r2, r2, #3
 800c9c2:	440a      	add	r2, r1
 800c9c4:	4413      	add	r3, r2
 800c9c6:	781a      	ldrb	r2, [r3, #0]
 800c9c8:	4b51      	ldr	r3, [pc, #324]	; (800cb10 <main+0x674>)
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d156      	bne.n	800ca7e <main+0x5e2>

				  BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 800c9d0:	4b4c      	ldr	r3, [pc, #304]	; (800cb04 <main+0x668>)
 800c9d2:	8818      	ldrh	r0, [r3, #0]
 800c9d4:	4b4f      	ldr	r3, [pc, #316]	; (800cb14 <main+0x678>)
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	2219      	movs	r2, #25
 800c9da:	4619      	mov	r1, r3
 800c9dc:	f7f5 f98e 	bl	8001cfc <BSP_LCD_FillCircle>

				board[casaY][casaX]=symbPlayer;
 800c9e0:	4b4a      	ldr	r3, [pc, #296]	; (800cb0c <main+0x670>)
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	461c      	mov	r4, r3
 800c9e6:	4b44      	ldr	r3, [pc, #272]	; (800caf8 <main+0x65c>)
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	4b43      	ldr	r3, [pc, #268]	; (800cafc <main+0x660>)
 800c9ee:	7819      	ldrb	r1, [r3, #0]
 800c9f0:	4a43      	ldr	r2, [pc, #268]	; (800cb00 <main+0x664>)
 800c9f2:	00e3      	lsls	r3, r4, #3
 800c9f4:	4413      	add	r3, r2
 800c9f6:	4403      	add	r3, r0
 800c9f8:	460a      	mov	r2, r1
 800c9fa:	701a      	strb	r2, [r3, #0]

				  //troca as peças
				 for (int i = casaX ; i<8 ; i++){
 800c9fc:	4b3e      	ldr	r3, [pc, #248]	; (800caf8 <main+0x65c>)
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	e038      	b.n	800ca76 <main+0x5da>
					 if( board [casaY][i] == symbPlayer){
 800ca04:	4b41      	ldr	r3, [pc, #260]	; (800cb0c <main+0x670>)
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	4a3d      	ldr	r2, [pc, #244]	; (800cb00 <main+0x664>)
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	441a      	add	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	4413      	add	r3, r2
 800ca12:	781a      	ldrb	r2, [r3, #0]
 800ca14:	4b39      	ldr	r3, [pc, #228]	; (800cafc <main+0x660>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d129      	bne.n	800ca70 <main+0x5d4>
					  j=i;
 800ca1c:	4a3a      	ldr	r2, [pc, #232]	; (800cb08 <main+0x66c>)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6013      	str	r3, [r2, #0]
					  for(int i = casaX; i<=j; i++){
 800ca22:	4b35      	ldr	r3, [pc, #212]	; (800caf8 <main+0x65c>)
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	60bb      	str	r3, [r7, #8]
 800ca28:	e01d      	b.n	800ca66 <main+0x5ca>
						 board[casaY][i]= symbPlayer;
 800ca2a:	4b38      	ldr	r3, [pc, #224]	; (800cb0c <main+0x670>)
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	4b32      	ldr	r3, [pc, #200]	; (800cafc <main+0x660>)
 800ca32:	7819      	ldrb	r1, [r3, #0]
 800ca34:	4a32      	ldr	r2, [pc, #200]	; (800cb00 <main+0x664>)
 800ca36:	00c3      	lsls	r3, r0, #3
 800ca38:	441a      	add	r2, r3
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	460a      	mov	r2, r1
 800ca40:	701a      	strb	r2, [r3, #0]

						BSP_LCD_FillCircle((i*60+30),  jogadaY  ,25);
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	461a      	mov	r2, r3
 800ca48:	0112      	lsls	r2, r2, #4
 800ca4a:	1ad3      	subs	r3, r2, r3
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	331e      	adds	r3, #30
 800ca52:	b298      	uxth	r0, r3
 800ca54:	4b2f      	ldr	r3, [pc, #188]	; (800cb14 <main+0x678>)
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	2219      	movs	r2, #25
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	f7f5 f94e 	bl	8001cfc <BSP_LCD_FillCircle>
					  for(int i = casaX; i<=j; i++){
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	3301      	adds	r3, #1
 800ca64:	60bb      	str	r3, [r7, #8]
 800ca66:	4b28      	ldr	r3, [pc, #160]	; (800cb08 <main+0x66c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	dddc      	ble.n	800ca2a <main+0x58e>
				 for (int i = casaX ; i<8 ; i++){
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	3301      	adds	r3, #1
 800ca74:	60fb      	str	r3, [r7, #12]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2b07      	cmp	r3, #7
 800ca7a:	ddc3      	ble.n	800ca04 <main+0x568>
 800ca7c:	e075      	b.n	800cb6a <main+0x6ce>
		        }



			  }
			  else if(  board[casaY][casaX-1]==symbAdv ){
 800ca7e:	4b23      	ldr	r3, [pc, #140]	; (800cb0c <main+0x670>)
 800ca80:	881b      	ldrh	r3, [r3, #0]
 800ca82:	461a      	mov	r2, r3
 800ca84:	4b1c      	ldr	r3, [pc, #112]	; (800caf8 <main+0x65c>)
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	491d      	ldr	r1, [pc, #116]	; (800cb00 <main+0x664>)
 800ca8c:	00d2      	lsls	r2, r2, #3
 800ca8e:	440a      	add	r2, r1
 800ca90:	4413      	add	r3, r2
 800ca92:	781a      	ldrb	r2, [r3, #0]
 800ca94:	4b1e      	ldr	r3, [pc, #120]	; (800cb10 <main+0x674>)
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d166      	bne.n	800cb6a <main+0x6ce>

			  				 BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 800ca9c:	4b19      	ldr	r3, [pc, #100]	; (800cb04 <main+0x668>)
 800ca9e:	8818      	ldrh	r0, [r3, #0]
 800caa0:	4b1c      	ldr	r3, [pc, #112]	; (800cb14 <main+0x678>)
 800caa2:	881b      	ldrh	r3, [r3, #0]
 800caa4:	2219      	movs	r2, #25
 800caa6:	4619      	mov	r1, r3
 800caa8:	f7f5 f928 	bl	8001cfc <BSP_LCD_FillCircle>

			  				board[casaY][casaX]=symbPlayer;
 800caac:	4b17      	ldr	r3, [pc, #92]	; (800cb0c <main+0x670>)
 800caae:	881b      	ldrh	r3, [r3, #0]
 800cab0:	461c      	mov	r4, r3
 800cab2:	4b11      	ldr	r3, [pc, #68]	; (800caf8 <main+0x65c>)
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	4618      	mov	r0, r3
 800cab8:	4b10      	ldr	r3, [pc, #64]	; (800cafc <main+0x660>)
 800caba:	7819      	ldrb	r1, [r3, #0]
 800cabc:	4a10      	ldr	r2, [pc, #64]	; (800cb00 <main+0x664>)
 800cabe:	00e3      	lsls	r3, r4, #3
 800cac0:	4413      	add	r3, r2
 800cac2:	4403      	add	r3, r0
 800cac4:	460a      	mov	r2, r1
 800cac6:	701a      	strb	r2, [r3, #0]

			  				//troca as peças
			  				for (int i = casaX ; i>0 ; i--){
 800cac8:	4b0b      	ldr	r3, [pc, #44]	; (800caf8 <main+0x65c>)
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	607b      	str	r3, [r7, #4]
 800cace:	e049      	b.n	800cb64 <main+0x6c8>
			  				    if( board [casaY][i] == symbPlayer){
 800cad0:	4b0e      	ldr	r3, [pc, #56]	; (800cb0c <main+0x670>)
 800cad2:	881b      	ldrh	r3, [r3, #0]
 800cad4:	4a0a      	ldr	r2, [pc, #40]	; (800cb00 <main+0x664>)
 800cad6:	00db      	lsls	r3, r3, #3
 800cad8:	441a      	add	r2, r3
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4413      	add	r3, r2
 800cade:	781a      	ldrb	r2, [r3, #0]
 800cae0:	4b06      	ldr	r3, [pc, #24]	; (800cafc <main+0x660>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d13a      	bne.n	800cb5e <main+0x6c2>
			  					 j=i;
 800cae8:	4a07      	ldr	r2, [pc, #28]	; (800cb08 <main+0x66c>)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6013      	str	r3, [r2, #0]
			  					 for(int i = casaX; i>=j; i--){
 800caee:	4b02      	ldr	r3, [pc, #8]	; (800caf8 <main+0x65c>)
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	603b      	str	r3, [r7, #0]
 800caf4:	e02e      	b.n	800cb54 <main+0x6b8>
 800caf6:	bf00      	nop
 800caf8:	200003a8 	.word	0x200003a8
 800cafc:	20000be0 	.word	0x20000be0
 800cb00:	20000064 	.word	0x20000064
 800cb04:	200003ac 	.word	0x200003ac
 800cb08:	200003bc 	.word	0x200003bc
 800cb0c:	200003aa 	.word	0x200003aa
 800cb10:	20000a50 	.word	0x20000a50
 800cb14:	200003ae 	.word	0x200003ae
			  						 board[casaY][i]= symbPlayer;
 800cb18:	4b54      	ldr	r3, [pc, #336]	; (800cc6c <main+0x7d0>)
 800cb1a:	881b      	ldrh	r3, [r3, #0]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	4b54      	ldr	r3, [pc, #336]	; (800cc70 <main+0x7d4>)
 800cb20:	7819      	ldrb	r1, [r3, #0]
 800cb22:	4a54      	ldr	r2, [pc, #336]	; (800cc74 <main+0x7d8>)
 800cb24:	00c3      	lsls	r3, r0, #3
 800cb26:	441a      	add	r2, r3
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	460a      	mov	r2, r1
 800cb2e:	701a      	strb	r2, [r3, #0]

			  					      BSP_LCD_FillCircle((i*60+30),  jogadaY  ,25);
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	461a      	mov	r2, r3
 800cb36:	0112      	lsls	r2, r2, #4
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	331e      	adds	r3, #30
 800cb40:	b298      	uxth	r0, r3
 800cb42:	4b4d      	ldr	r3, [pc, #308]	; (800cc78 <main+0x7dc>)
 800cb44:	881b      	ldrh	r3, [r3, #0]
 800cb46:	2219      	movs	r2, #25
 800cb48:	4619      	mov	r1, r3
 800cb4a:	f7f5 f8d7 	bl	8001cfc <BSP_LCD_FillCircle>
			  					 for(int i = casaX; i>=j; i--){
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	603b      	str	r3, [r7, #0]
 800cb54:	4b49      	ldr	r3, [pc, #292]	; (800cc7c <main+0x7e0>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	683a      	ldr	r2, [r7, #0]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	dadc      	bge.n	800cb18 <main+0x67c>
			  				for (int i = casaX ; i>0 ; i--){
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3b01      	subs	r3, #1
 800cb62:	607b      	str	r3, [r7, #4]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	dcb2      	bgt.n	800cad0 <main+0x634>



	}

	  if(turnFlag==1){
 800cb6a:	4b45      	ldr	r3, [pc, #276]	; (800cc80 <main+0x7e4>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d107      	bne.n	800cb82 <main+0x6e6>
	  		turnFlag=0;
 800cb72:	4b43      	ldr	r3, [pc, #268]	; (800cc80 <main+0x7e4>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	601a      	str	r2, [r3, #0]
	  	   newPlayer++;
 800cb78:	4b42      	ldr	r3, [pc, #264]	; (800cc84 <main+0x7e8>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	4a41      	ldr	r2, [pc, #260]	; (800cc84 <main+0x7e8>)
 800cb80:	6013      	str	r3, [r2, #0]
	  	}

}

/* Play against ARM   */
if(startARMFlag==1){
 800cb82:	4b41      	ldr	r3, [pc, #260]	; (800cc88 <main+0x7ec>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d107      	bne.n	800cb9a <main+0x6fe>
	startARMFlag=0;
 800cb8a:	4b3f      	ldr	r3, [pc, #252]	; (800cc88 <main+0x7ec>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	601a      	str	r2, [r3, #0]

	 startGame();
 800cb90:	f000 fd96 	bl	800d6c0 <startGame>
	 gameARMon=1;
 800cb94:	4b3d      	ldr	r3, [pc, #244]	; (800cc8c <main+0x7f0>)
 800cb96:	2201      	movs	r2, #1
 800cb98:	601a      	str	r2, [r3, #0]

}

if(gameARMon ==1){
 800cb9a:	4b3c      	ldr	r3, [pc, #240]	; (800cc8c <main+0x7f0>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d101      	bne.n	800cba6 <main+0x70a>
	playARM();
 800cba2:	f000 ff41 	bl	800da28 <playARM>
}


/*Game over */

if(gameEnd==1){
 800cba6:	4b3a      	ldr	r3, [pc, #232]	; (800cc90 <main+0x7f4>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d104      	bne.n	800cbb8 <main+0x71c>
	gameEnd=0;
 800cbae:	4b38      	ldr	r3, [pc, #224]	; (800cc90 <main+0x7f4>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	601a      	str	r2, [r3, #0]

	gameOver();
 800cbb4:	f000 fe06 	bl	800d7c4 <gameOver>

}

/*   Clock     */
if(flagClock==1){
 800cbb8:	4b36      	ldr	r3, [pc, #216]	; (800cc94 <main+0x7f8>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	f47f aca2 	bne.w	800c506 <main+0x6a>
		  flagClock=0;
 800cbc2:	4b34      	ldr	r3, [pc, #208]	; (800cc94 <main+0x7f8>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]

		  sec++;
 800cbc8:	4b33      	ldr	r3, [pc, #204]	; (800cc98 <main+0x7fc>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	4a32      	ldr	r2, [pc, #200]	; (800cc98 <main+0x7fc>)
 800cbd0:	6013      	str	r3, [r2, #0]
		  if(sec==60){
 800cbd2:	4b31      	ldr	r3, [pc, #196]	; (800cc98 <main+0x7fc>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b3c      	cmp	r3, #60	; 0x3c
 800cbd8:	d107      	bne.n	800cbea <main+0x74e>
			  sec=0;
 800cbda:	4b2f      	ldr	r3, [pc, #188]	; (800cc98 <main+0x7fc>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	601a      	str	r2, [r3, #0]
			  min++;
 800cbe0:	4b2e      	ldr	r3, [pc, #184]	; (800cc9c <main+0x800>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	4a2d      	ldr	r2, [pc, #180]	; (800cc9c <main+0x800>)
 800cbe8:	6013      	str	r3, [r2, #0]
		  }

		  BSP_LCD_SetFont(&Font16);
 800cbea:	482d      	ldr	r0, [pc, #180]	; (800cca0 <main+0x804>)
 800cbec:	f7f4 fd40 	bl	8001670 <BSP_LCD_SetFont>
		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800cbf0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cbf4:	f7f4 fd0a 	bl	800160c <BSP_LCD_SetTextColor>
		  sprintf(clockTime, "Time: %2d:%2d", min,sec);
 800cbf8:	4b28      	ldr	r3, [pc, #160]	; (800cc9c <main+0x800>)
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	4b26      	ldr	r3, [pc, #152]	; (800cc98 <main+0x7fc>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4928      	ldr	r1, [pc, #160]	; (800cca4 <main+0x808>)
 800cc02:	4829      	ldr	r0, [pc, #164]	; (800cca8 <main+0x80c>)
 800cc04:	f001 fe16 	bl	800e834 <siprintf>
		  BSP_LCD_DisplayStringAt(650, 400, (uint8_t *)clockTime, LEFT_MODE);
 800cc08:	2303      	movs	r3, #3
 800cc0a:	4a27      	ldr	r2, [pc, #156]	; (800cca8 <main+0x80c>)
 800cc0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800cc10:	f240 208a 	movw	r0, #650	; 0x28a
 800cc14:	f7f4 fdb2 	bl	800177c <BSP_LCD_DisplayStringAt>

		  //Temporizador de 20 seg
		  if(gameON ==1 || gameARMon ==1){
 800cc18:	4b24      	ldr	r3, [pc, #144]	; (800ccac <main+0x810>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d004      	beq.n	800cc2a <main+0x78e>
 800cc20:	4b1a      	ldr	r3, [pc, #104]	; (800cc8c <main+0x7f0>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	f47f ac6e 	bne.w	800c506 <main+0x6a>
			  downTimer--;
 800cc2a:	4b21      	ldr	r3, [pc, #132]	; (800ccb0 <main+0x814>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	4a1f      	ldr	r2, [pc, #124]	; (800ccb0 <main+0x814>)
 800cc32:	6013      	str	r3, [r2, #0]
			  sprintf(timerString, "Time Left: %2d s", downTimer);
 800cc34:	4b1e      	ldr	r3, [pc, #120]	; (800ccb0 <main+0x814>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	491e      	ldr	r1, [pc, #120]	; (800ccb4 <main+0x818>)
 800cc3c:	481e      	ldr	r0, [pc, #120]	; (800ccb8 <main+0x81c>)
 800cc3e:	f001 fdf9 	bl	800e834 <siprintf>
			  BSP_LCD_DisplayStringAt(550, 300, (uint8_t *)timerString, LEFT_MODE);
 800cc42:	2303      	movs	r3, #3
 800cc44:	4a1c      	ldr	r2, [pc, #112]	; (800ccb8 <main+0x81c>)
 800cc46:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800cc4a:	f240 2026 	movw	r0, #550	; 0x226
 800cc4e:	f7f4 fd95 	bl	800177c <BSP_LCD_DisplayStringAt>

			  if (downTimer <= 0){
 800cc52:	4b17      	ldr	r3, [pc, #92]	; (800ccb0 <main+0x814>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f73f ac55 	bgt.w	800c506 <main+0x6a>
			  	turnFlag=1;
 800cc5c:	4b08      	ldr	r3, [pc, #32]	; (800cc80 <main+0x7e4>)
 800cc5e:	2201      	movs	r2, #1
 800cc60:	601a      	str	r2, [r3, #0]
			  	timOutFlag=1;
 800cc62:	4b16      	ldr	r3, [pc, #88]	; (800ccbc <main+0x820>)
 800cc64:	2201      	movs	r2, #1
 800cc66:	601a      	str	r2, [r3, #0]
	  if(BSP_PB_GetState(BUTTON_WAKEUP)==1){
 800cc68:	e44d      	b.n	800c506 <main+0x6a>
 800cc6a:	bf00      	nop
 800cc6c:	200003aa 	.word	0x200003aa
 800cc70:	20000be0 	.word	0x20000be0
 800cc74:	20000064 	.word	0x20000064
 800cc78:	200003ae 	.word	0x200003ae
 800cc7c:	200003bc 	.word	0x200003bc
 800cc80:	20000388 	.word	0x20000388
 800cc84:	20000398 	.word	0x20000398
 800cc88:	20000390 	.word	0x20000390
 800cc8c:	200003a0 	.word	0x200003a0
 800cc90:	200003a4 	.word	0x200003a4
 800cc94:	20000394 	.word	0x20000394
 800cc98:	20000380 	.word	0x20000380
 800cc9c:	20000384 	.word	0x20000384
 800cca0:	20000044 	.word	0x20000044
 800cca4:	0800f158 	.word	0x0800f158
 800cca8:	20000cf0 	.word	0x20000cf0
 800ccac:	2000039c 	.word	0x2000039c
 800ccb0:	20000060 	.word	0x20000060
 800ccb4:	0800f168 	.word	0x0800f168
 800ccb8:	20000d78 	.word	0x20000d78
 800ccbc:	200003b0 	.word	0x200003b0

0800ccc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b0b8      	sub	sp, #224	; 0xe0
 800ccc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ccc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ccca:	2234      	movs	r2, #52	; 0x34
 800cccc:	2100      	movs	r1, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f001 fd50 	bl	800e774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ccd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
 800ccdc:	605a      	str	r2, [r3, #4]
 800ccde:	609a      	str	r2, [r3, #8]
 800cce0:	60da      	str	r2, [r3, #12]
 800cce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cce4:	f107 0308 	add.w	r3, r7, #8
 800cce8:	2290      	movs	r2, #144	; 0x90
 800ccea:	2100      	movs	r1, #0
 800ccec:	4618      	mov	r0, r3
 800ccee:	f001 fd41 	bl	800e774 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ccf2:	4b41      	ldr	r3, [pc, #260]	; (800cdf8 <SystemClock_Config+0x138>)
 800ccf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf6:	4a40      	ldr	r2, [pc, #256]	; (800cdf8 <SystemClock_Config+0x138>)
 800ccf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccfc:	6413      	str	r3, [r2, #64]	; 0x40
 800ccfe:	4b3e      	ldr	r3, [pc, #248]	; (800cdf8 <SystemClock_Config+0x138>)
 800cd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd06:	607b      	str	r3, [r7, #4]
 800cd08:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cd0a:	4b3c      	ldr	r3, [pc, #240]	; (800cdfc <SystemClock_Config+0x13c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a3b      	ldr	r2, [pc, #236]	; (800cdfc <SystemClock_Config+0x13c>)
 800cd10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd14:	6013      	str	r3, [r2, #0]
 800cd16:	4b39      	ldr	r3, [pc, #228]	; (800cdfc <SystemClock_Config+0x13c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cd1e:	603b      	str	r3, [r7, #0]
 800cd20:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800cd22:	2301      	movs	r3, #1
 800cd24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cd28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cd2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cd30:	2302      	movs	r3, #2
 800cd32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cd36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cd3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800cd3e:	2319      	movs	r3, #25
 800cd40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800cd44:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cd48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800cd52:	2308      	movs	r3, #8
 800cd54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cd58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7f9 fcb7 	bl	80066d0 <HAL_RCC_OscConfig>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <SystemClock_Config+0xac>
  {
    Error_Handler();
 800cd68:	f001 f8b2 	bl	800ded0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800cd6c:	f7f9 fc60 	bl	8006630 <HAL_PWREx_EnableOverDrive>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <SystemClock_Config+0xba>
  {
    Error_Handler();
 800cd76:	f001 f8ab 	bl	800ded0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cd7a:	230f      	movs	r3, #15
 800cd7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cd80:	2302      	movs	r3, #2
 800cd82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cd86:	2300      	movs	r3, #0
 800cd88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cd8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800cd90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cd94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800cd9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800cda0:	2106      	movs	r1, #6
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7f9 ff06 	bl	8006bb4 <HAL_RCC_ClockConfig>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d001      	beq.n	800cdb2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800cdae:	f001 f88f 	bl	800ded0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC2
 800cdb2:	4b13      	ldr	r3, [pc, #76]	; (800ce00 <SystemClock_Config+0x140>)
 800cdb4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800cdb6:	23c0      	movs	r3, #192	; 0xc0
 800cdb8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800cdba:	2302      	movs	r3, #2
 800cdbc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800cdbe:	2303      	movs	r3, #3
 800cdc0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cdda:	f107 0308 	add.w	r3, r7, #8
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fa f882 	bl	8006ee8 <HAL_RCCEx_PeriphCLKConfig>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800cdea:	f001 f871 	bl	800ded0 <Error_Handler>
  }
}
 800cdee:	bf00      	nop
 800cdf0:	37e0      	adds	r7, #224	; 0xe0
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	40023800 	.word	0x40023800
 800cdfc:	40007000 	.word	0x40007000
 800ce00:	04200008 	.word	0x04200008

0800ce04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ce0a:	463b      	mov	r3, r7
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	605a      	str	r2, [r3, #4]
 800ce12:	609a      	str	r2, [r3, #8]
 800ce14:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800ce16:	4b21      	ldr	r3, [pc, #132]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce18:	4a21      	ldr	r2, [pc, #132]	; (800cea0 <MX_ADC1_Init+0x9c>)
 800ce1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800ce1c:	4b1f      	ldr	r3, [pc, #124]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ce22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ce24:	4b1d      	ldr	r3, [pc, #116]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800ce2a:	4b1c      	ldr	r3, [pc, #112]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ce30:	4b1a      	ldr	r3, [pc, #104]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce32:	2201      	movs	r2, #1
 800ce34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ce36:	4b19      	ldr	r3, [pc, #100]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ce3e:	4b17      	ldr	r3, [pc, #92]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ce44:	4b15      	ldr	r3, [pc, #84]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce46:	4a17      	ldr	r2, [pc, #92]	; (800cea4 <MX_ADC1_Init+0xa0>)
 800ce48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ce4a:	4b14      	ldr	r3, [pc, #80]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800ce50:	4b12      	ldr	r3, [pc, #72]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce52:	2201      	movs	r2, #1
 800ce54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800ce56:	4b11      	ldr	r3, [pc, #68]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800ce5e:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ce64:	480d      	ldr	r0, [pc, #52]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce66:	f7f5 fdaf 	bl	80029c8 <HAL_ADC_Init>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ce70:	f001 f82e 	bl	800ded0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800ce74:	4b0c      	ldr	r3, [pc, #48]	; (800cea8 <MX_ADC1_Init+0xa4>)
 800ce76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ce80:	463b      	mov	r3, r7
 800ce82:	4619      	mov	r1, r3
 800ce84:	4805      	ldr	r0, [pc, #20]	; (800ce9c <MX_ADC1_Init+0x98>)
 800ce86:	f7f6 f893 	bl	8002fb0 <HAL_ADC_ConfigChannel>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ce90:	f001 f81e 	bl	800ded0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ce94:	bf00      	nop
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	20000b94 	.word	0x20000b94
 800cea0:	40012000 	.word	0x40012000
 800cea4:	0f000001 	.word	0x0f000001
 800cea8:	10000012 	.word	0x10000012

0800ceac <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800ceb0:	4b18      	ldr	r3, [pc, #96]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800ceb2:	4a19      	ldr	r2, [pc, #100]	; (800cf18 <MX_DMA2D_Init+0x6c>)
 800ceb4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800ceb6:	4b17      	ldr	r3, [pc, #92]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800cebc:	4b15      	ldr	r3, [pc, #84]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800cebe:	2200      	movs	r2, #0
 800cec0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800cec2:	4b14      	ldr	r3, [pc, #80]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800cec4:	2200      	movs	r2, #0
 800cec6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800cec8:	4b12      	ldr	r3, [pc, #72]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800ceca:	2200      	movs	r2, #0
 800cecc:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800cece:	4b11      	ldr	r3, [pc, #68]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800ced0:	2200      	movs	r2, #0
 800ced2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800ced4:	4b0f      	ldr	r3, [pc, #60]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800ced6:	2200      	movs	r2, #0
 800ced8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800ceda:	4b0e      	ldr	r3, [pc, #56]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800cedc:	2200      	movs	r2, #0
 800cede:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800cee0:	4b0c      	ldr	r3, [pc, #48]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800cee6:	4b0b      	ldr	r3, [pc, #44]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ceec:	4809      	ldr	r0, [pc, #36]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800ceee:	f7f6 fd65 	bl	80039bc <HAL_DMA2D_Init>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800cef8:	f000 ffea 	bl	800ded0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800cefc:	2101      	movs	r1, #1
 800cefe:	4805      	ldr	r0, [pc, #20]	; (800cf14 <MX_DMA2D_Init+0x68>)
 800cf00:	f7f6 feca 	bl	8003c98 <HAL_DMA2D_ConfigLayer>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800cf0a:	f000 ffe1 	bl	800ded0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800cf0e:	bf00      	nop
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	20000c8c 	.word	0x20000c8c
 800cf18:	4002b000 	.word	0x4002b000

0800cf1c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b0aa      	sub	sp, #168	; 0xa8
 800cf20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800cf22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cf26:	2200      	movs	r2, #0
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	605a      	str	r2, [r3, #4]
 800cf2c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800cf2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800cf32:	2224      	movs	r2, #36	; 0x24
 800cf34:	2100      	movs	r1, #0
 800cf36:	4618      	mov	r0, r3
 800cf38:	f001 fc1c 	bl	800e774 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800cf3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cf40:	2200      	movs	r2, #0
 800cf42:	601a      	str	r2, [r3, #0]
 800cf44:	605a      	str	r2, [r3, #4]
 800cf46:	609a      	str	r2, [r3, #8]
 800cf48:	60da      	str	r2, [r3, #12]
 800cf4a:	611a      	str	r2, [r3, #16]
 800cf4c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800cf4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cf52:	2234      	movs	r2, #52	; 0x34
 800cf54:	2100      	movs	r1, #0
 800cf56:	4618      	mov	r0, r3
 800cf58:	f001 fc0c 	bl	800e774 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800cf5c:	463b      	mov	r3, r7
 800cf5e:	222c      	movs	r2, #44	; 0x2c
 800cf60:	2100      	movs	r1, #0
 800cf62:	4618      	mov	r0, r3
 800cf64:	f001 fc06 	bl	800e774 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800cf68:	4b64      	ldr	r3, [pc, #400]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800cf6a:	4a65      	ldr	r2, [pc, #404]	; (800d100 <MX_DSIHOST_DSI_Init+0x1e4>)
 800cf6c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800cf6e:	4b63      	ldr	r3, [pc, #396]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800cf74:	4b61      	ldr	r3, [pc, #388]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800cf76:	2204      	movs	r2, #4
 800cf78:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800cf7a:	4b60      	ldr	r3, [pc, #384]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800cf80:	2314      	movs	r3, #20
 800cf82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800cf86:	2301      	movs	r3, #1
 800cf88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800cf92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cf96:	4619      	mov	r1, r3
 800cf98:	4858      	ldr	r0, [pc, #352]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800cf9a:	f7f6 ffff 	bl	8003f9c <HAL_DSI_Init>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d001      	beq.n	800cfa8 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800cfa4:	f000 ff94 	bl	800ded0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800cfac:	2300      	movs	r3, #0
 800cfae:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800cfda:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4846      	ldr	r0, [pc, #280]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800cfe2:	f7f7 fe17 	bl	8004c14 <HAL_DSI_ConfigHostTimeouts>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d001      	beq.n	800cff0 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800cfec:	f000 ff70 	bl	800ded0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800cff0:	231c      	movs	r3, #28
 800cff2:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800cff4:	2321      	movs	r3, #33	; 0x21
 800cff6:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800cff8:	230f      	movs	r3, #15
 800cffa:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800cffc:	2319      	movs	r3, #25
 800cffe:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800d008:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d00c:	4619      	mov	r1, r3
 800d00e:	483b      	ldr	r0, [pc, #236]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800d010:	f7f7 fd96 	bl	8004b40 <HAL_DSI_ConfigPhyTimer>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800d01a:	f000 ff59 	bl	800ded0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800d01e:	2104      	movs	r1, #4
 800d020:	4836      	ldr	r0, [pc, #216]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800d022:	f7f7 fd65 	bl	8004af0 <HAL_DSI_ConfigFlowControl>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800d02c:	f000 ff50 	bl	800ded0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800d030:	f242 7110 	movw	r1, #10000	; 0x2710
 800d034:	4831      	ldr	r0, [pc, #196]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800d036:	f7f7 ffab 	bl	8004f90 <HAL_DSI_SetLowPowerRXFilter>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800d040:	f000 ff46 	bl	800ded0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800d044:	2100      	movs	r1, #0
 800d046:	482d      	ldr	r0, [pc, #180]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800d048:	f7f7 f936 	bl	80042b8 <HAL_DSI_ConfigErrorMonitor>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800d052:	f000 ff3d 	bl	800ded0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800d056:	2300      	movs	r3, #0
 800d058:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800d05a:	2300      	movs	r3, #0
 800d05c:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800d05e:	2300      	movs	r3, #0
 800d060:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800d062:	2300      	movs	r3, #0
 800d064:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800d066:	2300      	movs	r3, #0
 800d068:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800d06a:	2300      	movs	r3, #0
 800d06c:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800d06e:	2300      	movs	r3, #0
 800d070:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800d072:	2300      	movs	r3, #0
 800d074:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800d076:	2300      	movs	r3, #0
 800d078:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800d07a:	2300      	movs	r3, #0
 800d07c:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800d07e:	2300      	movs	r3, #0
 800d080:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800d082:	2300      	movs	r3, #0
 800d084:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800d086:	2300      	movs	r3, #0
 800d088:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800d08a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d08e:	4619      	mov	r1, r3
 800d090:	481a      	ldr	r0, [pc, #104]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800d092:	f7f7 fccf 	bl	8004a34 <HAL_DSI_ConfigCommand>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800d09c:	f000 ff18 	bl	800ded0 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800d0a4:	2305      	movs	r3, #5
 800d0a6:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800d0a8:	f44f 7320 	mov.w	r3, #640	; 0x280
 800d0ac:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800d0ae:	2310      	movs	r3, #16
 800d0b0:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800d0b6:	2304      	movs	r3, #4
 800d0b8:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800d0ba:	2302      	movs	r3, #2
 800d0bc:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800d0c6:	2340      	movs	r3, #64	; 0x40
 800d0c8:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800d0ce:	463b      	mov	r3, r7
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	480a      	ldr	r0, [pc, #40]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800d0d4:	f7f7 fbd4 	bl	8004880 <HAL_DSI_ConfigAdaptedCommandMode>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d001      	beq.n	800d0e2 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800d0de:	f000 fef7 	bl	800ded0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	4805      	ldr	r0, [pc, #20]	; (800d0fc <MX_DSIHOST_DSI_Init+0x1e0>)
 800d0e6:	f7f7 f9a3 	bl	8004430 <HAL_DSI_SetGenericVCID>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 800d0f0:	f000 feee 	bl	800ded0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800d0f4:	bf00      	nop
 800d0f6:	37a8      	adds	r7, #168	; 0xa8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	20000a34 	.word	0x20000a34
 800d100:	40016c00 	.word	0x40016c00

0800d104 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b09a      	sub	sp, #104	; 0x68
 800d108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800d10a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d10e:	2234      	movs	r2, #52	; 0x34
 800d110:	2100      	movs	r1, #0
 800d112:	4618      	mov	r0, r3
 800d114:	f001 fb2e 	bl	800e774 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800d118:	463b      	mov	r3, r7
 800d11a:	2234      	movs	r2, #52	; 0x34
 800d11c:	2100      	movs	r1, #0
 800d11e:	4618      	mov	r0, r3
 800d120:	f001 fb28 	bl	800e774 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800d124:	4b4e      	ldr	r3, [pc, #312]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d126:	4a4f      	ldr	r2, [pc, #316]	; (800d264 <MX_LTDC_Init+0x160>)
 800d128:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800d12a:	4b4d      	ldr	r3, [pc, #308]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d12c:	2200      	movs	r2, #0
 800d12e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800d130:	4b4b      	ldr	r3, [pc, #300]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d132:	2200      	movs	r2, #0
 800d134:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800d136:	4b4a      	ldr	r3, [pc, #296]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d138:	2200      	movs	r2, #0
 800d13a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800d13c:	4b48      	ldr	r3, [pc, #288]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d13e:	2200      	movs	r2, #0
 800d140:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800d142:	4b47      	ldr	r3, [pc, #284]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d144:	2207      	movs	r2, #7
 800d146:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800d148:	4b45      	ldr	r3, [pc, #276]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d14a:	2203      	movs	r2, #3
 800d14c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800d14e:	4b44      	ldr	r3, [pc, #272]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d150:	220e      	movs	r2, #14
 800d152:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800d154:	4b42      	ldr	r3, [pc, #264]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d156:	2205      	movs	r2, #5
 800d158:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800d15a:	4b41      	ldr	r3, [pc, #260]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d15c:	f240 228e 	movw	r2, #654	; 0x28e
 800d160:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800d162:	4b3f      	ldr	r3, [pc, #252]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d164:	f240 12e5 	movw	r2, #485	; 0x1e5
 800d168:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800d16a:	4b3d      	ldr	r3, [pc, #244]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d16c:	f44f 7225 	mov.w	r2, #660	; 0x294
 800d170:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800d172:	4b3b      	ldr	r3, [pc, #236]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d174:	f240 12e7 	movw	r2, #487	; 0x1e7
 800d178:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800d17a:	4b39      	ldr	r3, [pc, #228]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800d182:	4b37      	ldr	r3, [pc, #220]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800d18a:	4b35      	ldr	r3, [pc, #212]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800d192:	4833      	ldr	r0, [pc, #204]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d194:	f7f8 ff54 	bl	8006040 <HAL_LTDC_Init>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800d19e:	f000 fe97 	bl	800ded0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800d1be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1c2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800d1c4:	2305      	movs	r3, #5
 800d1c6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800d1e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	481c      	ldr	r0, [pc, #112]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d1f0:	f7f8 fff6 	bl	80061e0 <HAL_LTDC_ConfigLayer>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800d1fa:	f000 fe69 	bl	800ded0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800d20e:	2300      	movs	r3, #0
 800d210:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800d212:	2300      	movs	r3, #0
 800d214:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800d216:	2300      	movs	r3, #0
 800d218:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800d21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d21e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800d220:	2305      	movs	r3, #5
 800d222:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800d224:	2300      	movs	r3, #0
 800d226:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800d230:	2300      	movs	r3, #0
 800d232:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800d242:	463b      	mov	r3, r7
 800d244:	2201      	movs	r2, #1
 800d246:	4619      	mov	r1, r3
 800d248:	4805      	ldr	r0, [pc, #20]	; (800d260 <MX_LTDC_Init+0x15c>)
 800d24a:	f7f8 ffc9 	bl	80061e0 <HAL_LTDC_ConfigLayer>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d001      	beq.n	800d258 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800d254:	f000 fe3c 	bl	800ded0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800d258:	bf00      	nop
 800d25a:	3768      	adds	r7, #104	; 0x68
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	20000aec 	.word	0x20000aec
 800d264:	40016800 	.word	0x40016800

0800d268 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800d268:	b480      	push	{r7}
 800d26a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800d26c:	4b0c      	ldr	r3, [pc, #48]	; (800d2a0 <MX_SDMMC2_SD_Init+0x38>)
 800d26e:	4a0d      	ldr	r2, [pc, #52]	; (800d2a4 <MX_SDMMC2_SD_Init+0x3c>)
 800d270:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800d272:	4b0b      	ldr	r3, [pc, #44]	; (800d2a0 <MX_SDMMC2_SD_Init+0x38>)
 800d274:	2200      	movs	r2, #0
 800d276:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800d278:	4b09      	ldr	r3, [pc, #36]	; (800d2a0 <MX_SDMMC2_SD_Init+0x38>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d27e:	4b08      	ldr	r3, [pc, #32]	; (800d2a0 <MX_SDMMC2_SD_Init+0x38>)
 800d280:	2200      	movs	r2, #0
 800d282:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800d284:	4b06      	ldr	r3, [pc, #24]	; (800d2a0 <MX_SDMMC2_SD_Init+0x38>)
 800d286:	2200      	movs	r2, #0
 800d288:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d28a:	4b05      	ldr	r3, [pc, #20]	; (800d2a0 <MX_SDMMC2_SD_Init+0x38>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800d290:	4b03      	ldr	r3, [pc, #12]	; (800d2a0 <MX_SDMMC2_SD_Init+0x38>)
 800d292:	2200      	movs	r2, #0
 800d294:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800d296:	bf00      	nop
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr
 800d2a0:	20000a68 	.word	0x20000a68
 800d2a4:	40011c00 	.word	0x40011c00

0800d2a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d2ae:	1d3b      	adds	r3, r7, #4
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	601a      	str	r2, [r3, #0]
 800d2b4:	605a      	str	r2, [r3, #4]
 800d2b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d2b8:	4b15      	ldr	r3, [pc, #84]	; (800d310 <MX_TIM6_Init+0x68>)
 800d2ba:	4a16      	ldr	r2, [pc, #88]	; (800d314 <MX_TIM6_Init+0x6c>)
 800d2bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 14141;
 800d2be:	4b14      	ldr	r3, [pc, #80]	; (800d310 <MX_TIM6_Init+0x68>)
 800d2c0:	f243 723d 	movw	r2, #14141	; 0x373d
 800d2c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2c6:	4b12      	ldr	r3, [pc, #72]	; (800d310 <MX_TIM6_Init+0x68>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 14141;
 800d2cc:	4b10      	ldr	r3, [pc, #64]	; (800d310 <MX_TIM6_Init+0x68>)
 800d2ce:	f243 723d 	movw	r2, #14141	; 0x373d
 800d2d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d2d4:	4b0e      	ldr	r3, [pc, #56]	; (800d310 <MX_TIM6_Init+0x68>)
 800d2d6:	2280      	movs	r2, #128	; 0x80
 800d2d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d2da:	480d      	ldr	r0, [pc, #52]	; (800d310 <MX_TIM6_Init+0x68>)
 800d2dc:	f7fb fc28 	bl	8008b30 <HAL_TIM_Base_Init>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d2e6:	f000 fdf3 	bl	800ded0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d2f2:	1d3b      	adds	r3, r7, #4
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4806      	ldr	r0, [pc, #24]	; (800d310 <MX_TIM6_Init+0x68>)
 800d2f8:	f7fb fe58 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d001      	beq.n	800d306 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800d302:	f000 fde5 	bl	800ded0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d306:	bf00      	nop
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	20000be8 	.word	0x20000be8
 800d314:	40001000 	.word	0x40001000

0800d318 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d31e:	1d3b      	adds	r3, r7, #4
 800d320:	2200      	movs	r2, #0
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	605a      	str	r2, [r3, #4]
 800d326:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800d328:	4b15      	ldr	r3, [pc, #84]	; (800d380 <MX_TIM7_Init+0x68>)
 800d32a:	4a16      	ldr	r2, [pc, #88]	; (800d384 <MX_TIM7_Init+0x6c>)
 800d32c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800d32e:	4b14      	ldr	r3, [pc, #80]	; (800d380 <MX_TIM7_Init+0x68>)
 800d330:	f242 720f 	movw	r2, #9999	; 0x270f
 800d334:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d336:	4b12      	ldr	r3, [pc, #72]	; (800d380 <MX_TIM7_Init+0x68>)
 800d338:	2200      	movs	r2, #0
 800d33a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800d33c:	4b10      	ldr	r3, [pc, #64]	; (800d380 <MX_TIM7_Init+0x68>)
 800d33e:	f242 720f 	movw	r2, #9999	; 0x270f
 800d342:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d344:	4b0e      	ldr	r3, [pc, #56]	; (800d380 <MX_TIM7_Init+0x68>)
 800d346:	2280      	movs	r2, #128	; 0x80
 800d348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800d34a:	480d      	ldr	r0, [pc, #52]	; (800d380 <MX_TIM7_Init+0x68>)
 800d34c:	f7fb fbf0 	bl	8008b30 <HAL_TIM_Base_Init>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d001      	beq.n	800d35a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800d356:	f000 fdbb 	bl	800ded0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d35a:	2300      	movs	r3, #0
 800d35c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d35e:	2300      	movs	r3, #0
 800d360:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800d362:	1d3b      	adds	r3, r7, #4
 800d364:	4619      	mov	r1, r3
 800d366:	4806      	ldr	r0, [pc, #24]	; (800d380 <MX_TIM7_Init+0x68>)
 800d368:	f7fb fe20 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800d372:	f000 fdad 	bl	800ded0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800d376:	bf00      	nop
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	20000d38 	.word	0x20000d38
 800d384:	40001400 	.word	0x40001400

0800d388 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b088      	sub	sp, #32
 800d38c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800d38e:	1d3b      	adds	r3, r7, #4
 800d390:	2200      	movs	r2, #0
 800d392:	601a      	str	r2, [r3, #0]
 800d394:	605a      	str	r2, [r3, #4]
 800d396:	609a      	str	r2, [r3, #8]
 800d398:	60da      	str	r2, [r3, #12]
 800d39a:	611a      	str	r2, [r3, #16]
 800d39c:	615a      	str	r2, [r3, #20]
 800d39e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800d3a0:	4b1e      	ldr	r3, [pc, #120]	; (800d41c <MX_FMC_Init+0x94>)
 800d3a2:	4a1f      	ldr	r2, [pc, #124]	; (800d420 <MX_FMC_Init+0x98>)
 800d3a4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800d3a6:	4b1d      	ldr	r3, [pc, #116]	; (800d41c <MX_FMC_Init+0x94>)
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800d3ac:	4b1b      	ldr	r3, [pc, #108]	; (800d41c <MX_FMC_Init+0x94>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800d3b2:	4b1a      	ldr	r3, [pc, #104]	; (800d41c <MX_FMC_Init+0x94>)
 800d3b4:	2208      	movs	r2, #8
 800d3b6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800d3b8:	4b18      	ldr	r3, [pc, #96]	; (800d41c <MX_FMC_Init+0x94>)
 800d3ba:	2220      	movs	r2, #32
 800d3bc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800d3be:	4b17      	ldr	r3, [pc, #92]	; (800d41c <MX_FMC_Init+0x94>)
 800d3c0:	2240      	movs	r2, #64	; 0x40
 800d3c2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800d3c4:	4b15      	ldr	r3, [pc, #84]	; (800d41c <MX_FMC_Init+0x94>)
 800d3c6:	2280      	movs	r2, #128	; 0x80
 800d3c8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800d3ca:	4b14      	ldr	r3, [pc, #80]	; (800d41c <MX_FMC_Init+0x94>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800d3d0:	4b12      	ldr	r3, [pc, #72]	; (800d41c <MX_FMC_Init+0x94>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800d3d6:	4b11      	ldr	r3, [pc, #68]	; (800d41c <MX_FMC_Init+0x94>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800d3dc:	4b0f      	ldr	r3, [pc, #60]	; (800d41c <MX_FMC_Init+0x94>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800d3e2:	2310      	movs	r3, #16
 800d3e4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800d3e6:	2310      	movs	r3, #16
 800d3e8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800d3ea:	2310      	movs	r3, #16
 800d3ec:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800d3ee:	2310      	movs	r3, #16
 800d3f0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800d3f2:	2310      	movs	r3, #16
 800d3f4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800d3f6:	2310      	movs	r3, #16
 800d3f8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800d3fa:	2310      	movs	r3, #16
 800d3fc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800d3fe:	1d3b      	adds	r3, r7, #4
 800d400:	4619      	mov	r1, r3
 800d402:	4806      	ldr	r0, [pc, #24]	; (800d41c <MX_FMC_Init+0x94>)
 800d404:	f7fb fb15 	bl	8008a32 <HAL_SDRAM_Init>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d001      	beq.n	800d412 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800d40e:	f000 fd5f 	bl	800ded0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800d412:	bf00      	nop
 800d414:	3720      	adds	r7, #32
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20000d04 	.word	0x20000d04
 800d420:	a0000140 	.word	0xa0000140

0800d424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b08e      	sub	sp, #56	; 0x38
 800d428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d42e:	2200      	movs	r2, #0
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	605a      	str	r2, [r3, #4]
 800d434:	609a      	str	r2, [r3, #8]
 800d436:	60da      	str	r2, [r3, #12]
 800d438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d43a:	4b43      	ldr	r3, [pc, #268]	; (800d548 <MX_GPIO_Init+0x124>)
 800d43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d43e:	4a42      	ldr	r2, [pc, #264]	; (800d548 <MX_GPIO_Init+0x124>)
 800d440:	f043 0310 	orr.w	r3, r3, #16
 800d444:	6313      	str	r3, [r2, #48]	; 0x30
 800d446:	4b40      	ldr	r3, [pc, #256]	; (800d548 <MX_GPIO_Init+0x124>)
 800d448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44a:	f003 0310 	and.w	r3, r3, #16
 800d44e:	623b      	str	r3, [r7, #32]
 800d450:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d452:	4b3d      	ldr	r3, [pc, #244]	; (800d548 <MX_GPIO_Init+0x124>)
 800d454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d456:	4a3c      	ldr	r2, [pc, #240]	; (800d548 <MX_GPIO_Init+0x124>)
 800d458:	f043 0302 	orr.w	r3, r3, #2
 800d45c:	6313      	str	r3, [r2, #48]	; 0x30
 800d45e:	4b3a      	ldr	r3, [pc, #232]	; (800d548 <MX_GPIO_Init+0x124>)
 800d460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d462:	f003 0302 	and.w	r3, r3, #2
 800d466:	61fb      	str	r3, [r7, #28]
 800d468:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d46a:	4b37      	ldr	r3, [pc, #220]	; (800d548 <MX_GPIO_Init+0x124>)
 800d46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46e:	4a36      	ldr	r2, [pc, #216]	; (800d548 <MX_GPIO_Init+0x124>)
 800d470:	f043 0308 	orr.w	r3, r3, #8
 800d474:	6313      	str	r3, [r2, #48]	; 0x30
 800d476:	4b34      	ldr	r3, [pc, #208]	; (800d548 <MX_GPIO_Init+0x124>)
 800d478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47a:	f003 0308 	and.w	r3, r3, #8
 800d47e:	61bb      	str	r3, [r7, #24]
 800d480:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d482:	4b31      	ldr	r3, [pc, #196]	; (800d548 <MX_GPIO_Init+0x124>)
 800d484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d486:	4a30      	ldr	r2, [pc, #192]	; (800d548 <MX_GPIO_Init+0x124>)
 800d488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d48c:	6313      	str	r3, [r2, #48]	; 0x30
 800d48e:	4b2e      	ldr	r3, [pc, #184]	; (800d548 <MX_GPIO_Init+0x124>)
 800d490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d496:	617b      	str	r3, [r7, #20]
 800d498:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800d49a:	4b2b      	ldr	r3, [pc, #172]	; (800d548 <MX_GPIO_Init+0x124>)
 800d49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49e:	4a2a      	ldr	r2, [pc, #168]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4a4:	6313      	str	r3, [r2, #48]	; 0x30
 800d4a6:	4b28      	ldr	r3, [pc, #160]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ae:	613b      	str	r3, [r7, #16]
 800d4b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d4b2:	4b25      	ldr	r3, [pc, #148]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b6:	4a24      	ldr	r2, [pc, #144]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4b8:	f043 0320 	orr.w	r3, r3, #32
 800d4bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d4be:	4b22      	ldr	r3, [pc, #136]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c2:	f003 0320 	and.w	r3, r3, #32
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d4ca:	4b1f      	ldr	r3, [pc, #124]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ce:	4a1e      	ldr	r2, [pc, #120]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d4:	6313      	str	r3, [r2, #48]	; 0x30
 800d4d6:	4b1c      	ldr	r3, [pc, #112]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4de:	60bb      	str	r3, [r7, #8]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d4e2:	4b19      	ldr	r3, [pc, #100]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e6:	4a18      	ldr	r2, [pc, #96]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d4ec:	6313      	str	r3, [r2, #48]	; 0x30
 800d4ee:	4b16      	ldr	r3, [pc, #88]	; (800d548 <MX_GPIO_Init+0x124>)
 800d4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4f6:	607b      	str	r3, [r7, #4]
 800d4f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d4fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d500:	4b12      	ldr	r3, [pc, #72]	; (800d54c <MX_GPIO_Init+0x128>)
 800d502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d504:	2300      	movs	r3, #0
 800d506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d50c:	4619      	mov	r1, r3
 800d50e:	4810      	ldr	r0, [pc, #64]	; (800d550 <MX_GPIO_Init+0x12c>)
 800d510:	f7f7 fd6c 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d51a:	2300      	movs	r3, #0
 800d51c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d51e:	2300      	movs	r3, #0
 800d520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d526:	4619      	mov	r1, r3
 800d528:	4809      	ldr	r0, [pc, #36]	; (800d550 <MX_GPIO_Init+0x12c>)
 800d52a:	f7f7 fd5f 	bl	8004fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d52e:	2200      	movs	r2, #0
 800d530:	2100      	movs	r1, #0
 800d532:	2028      	movs	r0, #40	; 0x28
 800d534:	f7f6 f84f 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d538:	2028      	movs	r0, #40	; 0x28
 800d53a:	f7f6 f868 	bl	800360e <HAL_NVIC_EnableIRQ>

}
 800d53e:	bf00      	nop
 800d540:	3738      	adds	r7, #56	; 0x38
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	40023800 	.word	0x40023800
 800d54c:	10110000 	.word	0x10110000
 800d550:	40022000 	.word	0x40022000

0800d554 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af00      	add	r7, sp, #0
 int Xpos=0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	60bb      	str	r3, [r7, #8]
 int Space=60;
 800d55e:	233c      	movs	r3, #60	; 0x3c
 800d560:	607b      	str	r3, [r7, #4]
 int j=0;
 800d562:	2300      	movs	r3, #0
 800d564:	617b      	str	r3, [r7, #20]

  uint32_t  lcd_status = LCD_OK;
 800d566:	2300      	movs	r3, #0
 800d568:	603b      	str	r3, [r7, #0]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 800d56a:	f7f3 fe52 	bl	8001212 <BSP_LCD_Init>
 800d56e:	4603      	mov	r3, r0
 800d570:	603b      	str	r3, [r7, #0]
  while(lcd_status != LCD_OK);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1fc      	bne.n	800d572 <LCD_Config+0x1e>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800d578:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800d57c:	2000      	movs	r0, #0
 800d57e:	f7f3 ffe5 	bl	800154c <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800d582:	f04f 30ff 	mov.w	r0, #4294967295
 800d586:	f7f4 f88d 	bl	80016a4 <BSP_LCD_Clear>

  /* Set the Board  */
   //Draw vertical lines
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800d58a:	4847      	ldr	r0, [pc, #284]	; (800d6a8 <LCD_Config+0x154>)
 800d58c:	f7f4 f83e 	bl	800160c <BSP_LCD_SetTextColor>

  j=0;
 800d590:	2300      	movs	r3, #0
 800d592:	617b      	str	r3, [r7, #20]
  for(int i=0; i<9; i++){
 800d594:	2300      	movs	r3, #0
 800d596:	613b      	str	r3, [r7, #16]
 800d598:	e012      	b.n	800d5c0 <LCD_Config+0x6c>

	  	  BSP_LCD_DrawVLine(Xpos+j, 0, 480 );
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	4413      	add	r3, r2
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7f4 f9e7 	bl	8001980 <BSP_LCD_DrawVLine>
	  	  j=j+Space;
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4413      	add	r3, r2
 800d5b8:	617b      	str	r3, [r7, #20]
  for(int i=0; i<9; i++){
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	613b      	str	r3, [r7, #16]
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	2b08      	cmp	r3, #8
 800d5c4:	dde9      	ble.n	800d59a <LCD_Config+0x46>
  }
  //Draw horizontal lines
    BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800d5c6:	4838      	ldr	r0, [pc, #224]	; (800d6a8 <LCD_Config+0x154>)
 800d5c8:	f7f4 f820 	bl	800160c <BSP_LCD_SetTextColor>

    j=0;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	617b      	str	r3, [r7, #20]
    for(int i=0; i<9; i++){
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	e00e      	b.n	800d5f4 <LCD_Config+0xa0>

  	  	  BSP_LCD_DrawHLine(0, j, 480 );
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d5de:	4619      	mov	r1, r3
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	f7f4 f98f 	bl	8001904 <BSP_LCD_DrawHLine>
  	  	  j=j+Space;
 800d5e6:	697a      	ldr	r2, [r7, #20]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	617b      	str	r3, [r7, #20]
    for(int i=0; i<9; i++){
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	60fb      	str	r3, [r7, #12]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2b08      	cmp	r3, #8
 800d5f8:	dded      	ble.n	800d5d6 <LCD_Config+0x82>
    }

    /*Game menu*/
    BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 800d5fa:	482c      	ldr	r0, [pc, #176]	; (800d6ac <LCD_Config+0x158>)
 800d5fc:	f7f4 f81e 	bl	800163c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 800d600:	482a      	ldr	r0, [pc, #168]	; (800d6ac <LCD_Config+0x158>)
 800d602:	f7f4 f803 	bl	800160c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(490, 0, 300, 60);
 800d606:	233c      	movs	r3, #60	; 0x3c
 800d608:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d60c:	2100      	movs	r1, #0
 800d60e:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 800d612:	f7f4 fb19 	bl	8001c48 <BSP_LCD_FillRect>
    BSP_LCD_DrawRect(490, 0, 300, 470);
 800d616:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800d61a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d61e:	2100      	movs	r1, #0
 800d620:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 800d624:	f7f4 f9ee 	bl	8001a04 <BSP_LCD_DrawRect>


    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d628:	f04f 30ff 	mov.w	r0, #4294967295
 800d62c:	f7f3 ffee 	bl	800160c <BSP_LCD_SetTextColor>
      BSP_LCD_SetFont(&Font24);
 800d630:	481f      	ldr	r0, [pc, #124]	; (800d6b0 <LCD_Config+0x15c>)
 800d632:	f7f4 f81d 	bl	8001670 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(580, 15, (uint8_t *)"REVERSI", LEFT_MODE);
 800d636:	2303      	movs	r3, #3
 800d638:	4a1e      	ldr	r2, [pc, #120]	; (800d6b4 <LCD_Config+0x160>)
 800d63a:	210f      	movs	r1, #15
 800d63c:	f44f 7011 	mov.w	r0, #580	; 0x244
 800d640:	f7f4 f89c 	bl	800177c <BSP_LCD_DisplayStringAt>


      /*Start button*/

      BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 800d644:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800d648:	f7f3 fff8 	bl	800163c <BSP_LCD_SetBackColor>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800d64c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800d650:	f7f3 ffdc 	bl	800160c <BSP_LCD_SetTextColor>
      BSP_LCD_FillRect(500, 100, 280, 50);
 800d654:	2332      	movs	r3, #50	; 0x32
 800d656:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d65a:	2164      	movs	r1, #100	; 0x64
 800d65c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d660:	f7f4 faf2 	bl	8001c48 <BSP_LCD_FillRect>
      BSP_LCD_FillRect(500, 180, 280, 50);
 800d664:	2332      	movs	r3, #50	; 0x32
 800d666:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d66a:	21b4      	movs	r1, #180	; 0xb4
 800d66c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d670:	f7f4 faea 	bl	8001c48 <BSP_LCD_FillRect>

      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d674:	f04f 30ff 	mov.w	r0, #4294967295
 800d678:	f7f3 ffc8 	bl	800160c <BSP_LCD_SetTextColor>
       BSP_LCD_SetFont(&Font24);
 800d67c:	480c      	ldr	r0, [pc, #48]	; (800d6b0 <LCD_Config+0x15c>)
 800d67e:	f7f3 fff7 	bl	8001670 <BSP_LCD_SetFont>
       BSP_LCD_DisplayStringAt(595, 115, (uint8_t *)"Play ARM", LEFT_MODE);
 800d682:	2303      	movs	r3, #3
 800d684:	4a0c      	ldr	r2, [pc, #48]	; (800d6b8 <LCD_Config+0x164>)
 800d686:	2173      	movs	r1, #115	; 0x73
 800d688:	f240 2053 	movw	r0, #595	; 0x253
 800d68c:	f7f4 f876 	bl	800177c <BSP_LCD_DisplayStringAt>
       BSP_LCD_DisplayStringAt(595, 195, (uint8_t *)"Play Human", LEFT_MODE);
 800d690:	2303      	movs	r3, #3
 800d692:	4a0a      	ldr	r2, [pc, #40]	; (800d6bc <LCD_Config+0x168>)
 800d694:	21c3      	movs	r1, #195	; 0xc3
 800d696:	f240 2053 	movw	r0, #595	; 0x253
 800d69a:	f7f4 f86f 	bl	800177c <BSP_LCD_DisplayStringAt>


}
 800d69e:	bf00      	nop
 800d6a0:	3718      	adds	r7, #24
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	ff000080 	.word	0xff000080
 800d6ac:	ff8080ff 	.word	0xff8080ff
 800d6b0:	2000003c 	.word	0x2000003c
 800d6b4:	0800f17c 	.word	0x0800f17c
 800d6b8:	0800f184 	.word	0x0800f184
 800d6bc:	0800f190 	.word	0x0800f190

0800d6c0 <startGame>:

static void startGame(){
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
    int Xpos=0;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60bb      	str	r3, [r7, #8]
    int Space=60;
 800d6ca:	233c      	movs	r3, #60	; 0x3c
 800d6cc:	607b      	str	r3, [r7, #4]
	int j=0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d6d2:	4839      	ldr	r0, [pc, #228]	; (800d7b8 <startGame+0xf8>)
 800d6d4:	f7f3 ff9a 	bl	800160c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, 480, 480);
 800d6d8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800d6dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	f7f4 fab0 	bl	8001c48 <BSP_LCD_FillRect>

	/* Set the Board  */
	   //Draw vertical lines
	  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800d6e8:	4834      	ldr	r0, [pc, #208]	; (800d7bc <startGame+0xfc>)
 800d6ea:	f7f3 ff8f 	bl	800160c <BSP_LCD_SetTextColor>

	  j=0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	617b      	str	r3, [r7, #20]
	  for(int i=0; i<9; i++){
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	613b      	str	r3, [r7, #16]
 800d6f6:	e012      	b.n	800d71e <startGame+0x5e>

		  	  BSP_LCD_DrawVLine(Xpos+j, 0, 480 );
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	4413      	add	r3, r2
 800d702:	b29b      	uxth	r3, r3
 800d704:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d708:	2100      	movs	r1, #0
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7f4 f938 	bl	8001980 <BSP_LCD_DrawVLine>
		  	  j=j+Space;
 800d710:	697a      	ldr	r2, [r7, #20]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4413      	add	r3, r2
 800d716:	617b      	str	r3, [r7, #20]
	  for(int i=0; i<9; i++){
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	3301      	adds	r3, #1
 800d71c:	613b      	str	r3, [r7, #16]
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	2b08      	cmp	r3, #8
 800d722:	dde9      	ble.n	800d6f8 <startGame+0x38>
	  }
	  //Draw horizontal lines
	    BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800d724:	4825      	ldr	r0, [pc, #148]	; (800d7bc <startGame+0xfc>)
 800d726:	f7f3 ff71 	bl	800160c <BSP_LCD_SetTextColor>

	    j=0;
 800d72a:	2300      	movs	r3, #0
 800d72c:	617b      	str	r3, [r7, #20]
	    for(int i=0; i<9; i++){
 800d72e:	2300      	movs	r3, #0
 800d730:	60fb      	str	r3, [r7, #12]
 800d732:	e00e      	b.n	800d752 <startGame+0x92>

	  	  	  BSP_LCD_DrawHLine(0, j, 480 );
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	b29b      	uxth	r3, r3
 800d738:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d73c:	4619      	mov	r1, r3
 800d73e:	2000      	movs	r0, #0
 800d740:	f7f4 f8e0 	bl	8001904 <BSP_LCD_DrawHLine>
	  	  	  j=j+Space;
 800d744:	697a      	ldr	r2, [r7, #20]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	4413      	add	r3, r2
 800d74a:	617b      	str	r3, [r7, #20]
	    for(int i=0; i<9; i++){
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	3301      	adds	r3, #1
 800d750:	60fb      	str	r3, [r7, #12]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2b08      	cmp	r3, #8
 800d756:	dded      	ble.n	800d734 <startGame+0x74>
	    }

	/*Draw initial symbols*/

		 BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 800d758:	4819      	ldr	r0, [pc, #100]	; (800d7c0 <startGame+0x100>)
 800d75a:	f7f3 ff57 	bl	800160c <BSP_LCD_SetTextColor>
		 BSP_LCD_FillCircle(210,270,25);
 800d75e:	2219      	movs	r2, #25
 800d760:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800d764:	20d2      	movs	r0, #210	; 0xd2
 800d766:	f7f4 fac9 	bl	8001cfc <BSP_LCD_FillCircle>
		 BSP_LCD_FillCircle(270,210,25);
 800d76a:	2219      	movs	r2, #25
 800d76c:	21d2      	movs	r1, #210	; 0xd2
 800d76e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800d772:	f7f4 fac3 	bl	8001cfc <BSP_LCD_FillCircle>

		  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
 800d776:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 800d77a:	f7f3 ff47 	bl	800160c <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(210,210,25);
 800d77e:	2219      	movs	r2, #25
 800d780:	21d2      	movs	r1, #210	; 0xd2
 800d782:	20d2      	movs	r0, #210	; 0xd2
 800d784:	f7f4 faba 	bl	8001cfc <BSP_LCD_FillCircle>
		  BSP_LCD_FillCircle(270,270,25);
 800d788:	2219      	movs	r2, #25
 800d78a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800d78e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800d792:	f7f4 fab3 	bl	8001cfc <BSP_LCD_FillCircle>

    /*Draw window for communication */
		  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d796:	4808      	ldr	r0, [pc, #32]	; (800d7b8 <startGame+0xf8>)
 800d798:	f7f3 ff38 	bl	800160c <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect(500, 280, 281, 180);
 800d79c:	23b4      	movs	r3, #180	; 0xb4
 800d79e:	f240 1219 	movw	r2, #281	; 0x119
 800d7a2:	f44f 718c 	mov.w	r1, #280	; 0x118
 800d7a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d7aa:	f7f4 fa4d 	bl	8001c48 <BSP_LCD_FillRect>


}
 800d7ae:	bf00      	nop
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	ffd3d3d3 	.word	0xffd3d3d3
 800d7bc:	ff000080 	.word	0xff000080
 800d7c0:	ffff8080 	.word	0xffff8080

0800d7c4 <gameOver>:

void gameOver(){
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b092      	sub	sp, #72	; 0x48
 800d7c8:	af00      	add	r7, sp, #0
unsigned int nBytes;

int cnt_x =0;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	647b      	str	r3, [r7, #68]	; 0x44
int cnt_o=0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	643b      	str	r3, [r7, #64]	; 0x40

char score_x[20];
char score_o[20];

//conta o numero de peças dos jogadores
 for (int i=0; i<8; i++){
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7d6:	e023      	b.n	800d820 <gameOver+0x5c>
    for (int j=0; j<8; j++){
 800d7d8:	2300      	movs	r3, #0
 800d7da:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7dc:	e01a      	b.n	800d814 <gameOver+0x50>
         if (board[i][j]=='x'){
 800d7de:	4a84      	ldr	r2, [pc, #528]	; (800d9f0 <gameOver+0x22c>)
 800d7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e2:	00db      	lsls	r3, r3, #3
 800d7e4:	441a      	add	r2, r3
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e8:	4413      	add	r3, r2
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	2b78      	cmp	r3, #120	; 0x78
 800d7ee:	d102      	bne.n	800d7f6 <gameOver+0x32>
             cnt_x++;
 800d7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	647b      	str	r3, [r7, #68]	; 0x44
        	  }
         if (board[i][j]=='o'){
 800d7f6:	4a7e      	ldr	r2, [pc, #504]	; (800d9f0 <gameOver+0x22c>)
 800d7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	441a      	add	r2, r3
 800d7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d800:	4413      	add	r3, r2
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	2b6f      	cmp	r3, #111	; 0x6f
 800d806:	d102      	bne.n	800d80e <gameOver+0x4a>
        	  cnt_o++;
 800d808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d80a:	3301      	adds	r3, #1
 800d80c:	643b      	str	r3, [r7, #64]	; 0x40
    for (int j=0; j<8; j++){
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	3301      	adds	r3, #1
 800d812:	63bb      	str	r3, [r7, #56]	; 0x38
 800d814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d816:	2b07      	cmp	r3, #7
 800d818:	dde1      	ble.n	800d7de <gameOver+0x1a>
 for (int i=0; i<8; i++){
 800d81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d81c:	3301      	adds	r3, #1
 800d81e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d822:	2b07      	cmp	r3, #7
 800d824:	ddd8      	ble.n	800d7d8 <gameOver+0x14>
        	  }
   }
 }

 if(cnt_x > cnt_o){
 800d826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d82a:	429a      	cmp	r2, r3
 800d82c:	dd0e      	ble.n	800d84c <gameOver+0x88>
	 BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d82e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d832:	f7f3 feeb 	bl	800160c <BSP_LCD_SetTextColor>
	 BSP_LCD_SetFont(&Font24);
 800d836:	486f      	ldr	r0, [pc, #444]	; (800d9f4 <gameOver+0x230>)
 800d838:	f7f3 ff1a 	bl	8001670 <BSP_LCD_SetFont>
	 BSP_LCD_DisplayStringAt(520, 115, (uint8_t *)"PLAYER 1 WINS" , LEFT_MODE);
 800d83c:	2303      	movs	r3, #3
 800d83e:	4a6e      	ldr	r2, [pc, #440]	; (800d9f8 <gameOver+0x234>)
 800d840:	2173      	movs	r1, #115	; 0x73
 800d842:	f44f 7002 	mov.w	r0, #520	; 0x208
 800d846:	f7f3 ff99 	bl	800177c <BSP_LCD_DisplayStringAt>
 800d84a:	e011      	b.n	800d870 <gameOver+0xac>
 }

 else if(cnt_x < cnt_o){
 800d84c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d850:	429a      	cmp	r2, r3
 800d852:	da0d      	bge.n	800d870 <gameOver+0xac>
	 BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d854:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d858:	f7f3 fed8 	bl	800160c <BSP_LCD_SetTextColor>
	 BSP_LCD_SetFont(&Font24);
 800d85c:	4865      	ldr	r0, [pc, #404]	; (800d9f4 <gameOver+0x230>)
 800d85e:	f7f3 ff07 	bl	8001670 <BSP_LCD_SetFont>
	 BSP_LCD_DisplayStringAt(520, 115, (uint8_t *)"PLAYER 2 WINS" , LEFT_MODE);
 800d862:	2303      	movs	r3, #3
 800d864:	4a65      	ldr	r2, [pc, #404]	; (800d9fc <gameOver+0x238>)
 800d866:	2173      	movs	r1, #115	; 0x73
 800d868:	f44f 7002 	mov.w	r0, #520	; 0x208
 800d86c:	f7f3 ff86 	bl	800177c <BSP_LCD_DisplayStringAt>
 }

 if(cnt_x == cnt_o){
 800d870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d874:	429a      	cmp	r2, r3
 800d876:	d10d      	bne.n	800d894 <gameOver+0xd0>
	 BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d878:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d87c:	f7f3 fec6 	bl	800160c <BSP_LCD_SetTextColor>
	 BSP_LCD_SetFont(&Font24);
 800d880:	485c      	ldr	r0, [pc, #368]	; (800d9f4 <gameOver+0x230>)
 800d882:	f7f3 fef5 	bl	8001670 <BSP_LCD_SetFont>
	 BSP_LCD_DisplayStringAt(520, 115, (uint8_t *)"IT'S A TIE" , LEFT_MODE);
 800d886:	2303      	movs	r3, #3
 800d888:	4a5d      	ldr	r2, [pc, #372]	; (800da00 <gameOver+0x23c>)
 800d88a:	2173      	movs	r1, #115	; 0x73
 800d88c:	f44f 7002 	mov.w	r0, #520	; 0x208
 800d890:	f7f3 ff74 	bl	800177c <BSP_LCD_DisplayStringAt>
 }


//desenha os menus
     BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800d894:	485b      	ldr	r0, [pc, #364]	; (800da04 <gameOver+0x240>)
 800d896:	f7f3 feb9 	bl	800160c <BSP_LCD_SetTextColor>
     BSP_LCD_FillRect(0, 0, 800, 60);
 800d89a:	233c      	movs	r3, #60	; 0x3c
 800d89c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	f7f4 f9d0 	bl	8001c48 <BSP_LCD_FillRect>
     BSP_LCD_FillRect(0, 180, 800, 120);
 800d8a8:	2378      	movs	r3, #120	; 0x78
 800d8aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d8ae:	21b4      	movs	r1, #180	; 0xb4
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	f7f4 f9c9 	bl	8001c48 <BSP_LCD_FillRect>

     BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 800d8b6:	4853      	ldr	r0, [pc, #332]	; (800da04 <gameOver+0x240>)
 800d8b8:	f7f3 fec0 	bl	800163c <BSP_LCD_SetBackColor>
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c0:	f7f3 fea4 	bl	800160c <BSP_LCD_SetTextColor>
     BSP_LCD_SetFont(&Font24);
 800d8c4:	484b      	ldr	r0, [pc, #300]	; (800d9f4 <gameOver+0x230>)
 800d8c6:	f7f3 fed3 	bl	8001670 <BSP_LCD_SetFont>
     BSP_LCD_DisplayStringAt(0, 15, (uint8_t *)"GAME OVER", CENTER_MODE);
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	4a4e      	ldr	r2, [pc, #312]	; (800da08 <gameOver+0x244>)
 800d8ce:	210f      	movs	r1, #15
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	f7f3 ff53 	bl	800177c <BSP_LCD_DisplayStringAt>

     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8da:	f7f3 fe97 	bl	800160c <BSP_LCD_SetTextColor>
      BSP_LCD_SetFont(&Font24);
 800d8de:	4845      	ldr	r0, [pc, #276]	; (800d9f4 <gameOver+0x230>)
 800d8e0:	f7f3 fec6 	bl	8001670 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(0, 185, (uint8_t *)"SCORE", CENTER_MODE);
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	4a49      	ldr	r2, [pc, #292]	; (800da0c <gameOver+0x248>)
 800d8e8:	21b9      	movs	r1, #185	; 0xb9
 800d8ea:	2000      	movs	r0, #0
 800d8ec:	f7f3 ff46 	bl	800177c <BSP_LCD_DisplayStringAt>

      sprintf(score_x, "Player 1: %d", cnt_x);
 800d8f0:	f107 0318 	add.w	r3, r7, #24
 800d8f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8f6:	4946      	ldr	r1, [pc, #280]	; (800da10 <gameOver+0x24c>)
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 ff9b 	bl	800e834 <siprintf>
      BSP_LCD_DisplayStringAt(0, 215, (uint8_t *)score_x, CENTER_MODE);
 800d8fe:	f107 0218 	add.w	r2, r7, #24
 800d902:	2301      	movs	r3, #1
 800d904:	21d7      	movs	r1, #215	; 0xd7
 800d906:	2000      	movs	r0, #0
 800d908:	f7f3 ff38 	bl	800177c <BSP_LCD_DisplayStringAt>
      sprintf(score_o, "Player 2: %d", cnt_o);
 800d90c:	1d3b      	adds	r3, r7, #4
 800d90e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d910:	4940      	ldr	r1, [pc, #256]	; (800da14 <gameOver+0x250>)
 800d912:	4618      	mov	r0, r3
 800d914:	f000 ff8e 	bl	800e834 <siprintf>
      BSP_LCD_DisplayStringAt(0, 235, (uint8_t *)score_o, CENTER_MODE);
 800d918:	1d3a      	adds	r2, r7, #4
 800d91a:	2301      	movs	r3, #1
 800d91c:	21eb      	movs	r1, #235	; 0xeb
 800d91e:	2000      	movs	r0, #0
 800d920:	f7f3 ff2c 	bl	800177c <BSP_LCD_DisplayStringAt>


//volta a escrever a matriz
      for (int i=0;i<8;i++){
 800d924:	2300      	movs	r3, #0
 800d926:	637b      	str	r3, [r7, #52]	; 0x34
 800d928:	e013      	b.n	800d952 <gameOver+0x18e>
                  for (int j=0;j<8;j++){
 800d92a:	2300      	movs	r3, #0
 800d92c:	633b      	str	r3, [r7, #48]	; 0x30
 800d92e:	e00a      	b.n	800d946 <gameOver+0x182>
                 board[i][j]='.';
 800d930:	4a2f      	ldr	r2, [pc, #188]	; (800d9f0 <gameOver+0x22c>)
 800d932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d934:	00db      	lsls	r3, r3, #3
 800d936:	441a      	add	r2, r3
 800d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93a:	4413      	add	r3, r2
 800d93c:	222e      	movs	r2, #46	; 0x2e
 800d93e:	701a      	strb	r2, [r3, #0]
                  for (int j=0;j<8;j++){
 800d940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d942:	3301      	adds	r3, #1
 800d944:	633b      	str	r3, [r7, #48]	; 0x30
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	2b07      	cmp	r3, #7
 800d94a:	ddf1      	ble.n	800d930 <gameOver+0x16c>
      for (int i=0;i<8;i++){
 800d94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94e:	3301      	adds	r3, #1
 800d950:	637b      	str	r3, [r7, #52]	; 0x34
 800d952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d954:	2b07      	cmp	r3, #7
 800d956:	dde8      	ble.n	800d92a <gameOver+0x166>
                }
              }
              board[3][3]='x';
 800d958:	4b25      	ldr	r3, [pc, #148]	; (800d9f0 <gameOver+0x22c>)
 800d95a:	2278      	movs	r2, #120	; 0x78
 800d95c:	76da      	strb	r2, [r3, #27]
              board[3][4]='o';
 800d95e:	4b24      	ldr	r3, [pc, #144]	; (800d9f0 <gameOver+0x22c>)
 800d960:	226f      	movs	r2, #111	; 0x6f
 800d962:	771a      	strb	r2, [r3, #28]
              board[4][3]='o';
 800d964:	4b22      	ldr	r3, [pc, #136]	; (800d9f0 <gameOver+0x22c>)
 800d966:	226f      	movs	r2, #111	; 0x6f
 800d968:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
              board[4][4]='x';
 800d96c:	4b20      	ldr	r3, [pc, #128]	; (800d9f0 <gameOver+0x22c>)
 800d96e:	2278      	movs	r2, #120	; 0x78
 800d970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

//Escreve p cartao SD

if(f_mount(&SDFatFS,SDPath,0)!=FR_OK)
 800d974:	2200      	movs	r2, #0
 800d976:	4928      	ldr	r1, [pc, #160]	; (800da18 <gameOver+0x254>)
 800d978:	4828      	ldr	r0, [pc, #160]	; (800da1c <gameOver+0x258>)
 800d97a:	f7fd ff4f 	bl	800b81c <f_mount>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d001      	beq.n	800d988 <gameOver+0x1c4>
       Error_Handler();
 800d984:	f000 faa4 	bl	800ded0 <Error_Handler>

if(f_open(&SDFile,"score.txt",FA_WRITE | FA_CREATE_ALWAYS)!=FR_OK)
 800d988:	220a      	movs	r2, #10
 800d98a:	4925      	ldr	r1, [pc, #148]	; (800da20 <gameOver+0x25c>)
 800d98c:	4825      	ldr	r0, [pc, #148]	; (800da24 <gameOver+0x260>)
 800d98e:	f7fd ff8b 	bl	800b8a8 <f_open>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d001      	beq.n	800d99c <gameOver+0x1d8>
       Error_Handler();
 800d998:	f000 fa9a 	bl	800ded0 <Error_Handler>

 if(f_write(&SDFile, score_x, strlen(score_x), &nBytes)!=FR_OK)
 800d99c:	f107 0318 	add.w	r3, r7, #24
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7f2 fc4d 	bl	8000240 <strlen>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9ac:	f107 0118 	add.w	r1, r7, #24
 800d9b0:	481c      	ldr	r0, [pc, #112]	; (800da24 <gameOver+0x260>)
 800d9b2:	f7fe f937 	bl	800bc24 <f_write>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d001      	beq.n	800d9c0 <gameOver+0x1fc>
    	Error_Handler();
 800d9bc:	f000 fa88 	bl	800ded0 <Error_Handler>

 if(f_write(&SDFile, score_o, strlen(score_o), &nBytes)!=FR_OK)
 800d9c0:	1d3b      	adds	r3, r7, #4
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7f2 fc3c 	bl	8000240 <strlen>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9ce:	1d39      	adds	r1, r7, #4
 800d9d0:	4814      	ldr	r0, [pc, #80]	; (800da24 <gameOver+0x260>)
 800d9d2:	f7fe f927 	bl	800bc24 <f_write>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d001      	beq.n	800d9e0 <gameOver+0x21c>
    	Error_Handler();
 800d9dc:	f000 fa78 	bl	800ded0 <Error_Handler>

 f_close (&SDFile);
 800d9e0:	4810      	ldr	r0, [pc, #64]	; (800da24 <gameOver+0x260>)
 800d9e2:	f7fe fb12 	bl	800c00a <f_close>

}
 800d9e6:	bf00      	nop
 800d9e8:	3748      	adds	r7, #72	; 0x48
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	20000064 	.word	0x20000064
 800d9f4:	2000003c 	.word	0x2000003c
 800d9f8:	0800f19c 	.word	0x0800f19c
 800d9fc:	0800f1ac 	.word	0x0800f1ac
 800da00:	0800f1bc 	.word	0x0800f1bc
 800da04:	ff000080 	.word	0xff000080
 800da08:	0800f1c8 	.word	0x0800f1c8
 800da0c:	0800f1d4 	.word	0x0800f1d4
 800da10:	0800f1dc 	.word	0x0800f1dc
 800da14:	0800f1ec 	.word	0x0800f1ec
 800da18:	200005cc 	.word	0x200005cc
 800da1c:	20000800 	.word	0x20000800
 800da20:	0800f1fc 	.word	0x0800f1fc
 800da24:	200005d0 	.word	0x200005d0

0800da28 <playARM>:

void playARM(){
 800da28:	b590      	push	{r4, r7, lr}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0

//Player1

		  if(newPlayer%2 == 0){
 800da2e:	4b98      	ldr	r3, [pc, #608]	; (800dc90 <playARM+0x268>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f003 0301 	and.w	r3, r3, #1
 800da36:	2b00      	cmp	r3, #0
 800da38:	d17d      	bne.n	800db36 <playARM+0x10e>


		  	 BSP_LCD_SetTextColor(colorP1);
 800da3a:	4b96      	ldr	r3, [pc, #600]	; (800dc94 <playARM+0x26c>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4618      	mov	r0, r3
 800da40:	f7f3 fde4 	bl	800160c <BSP_LCD_SetTextColor>
		  	 BSP_LCD_DisplayStringAt(590, 250, (uint8_t *)"PLAYER 1", LEFT_MODE);
 800da44:	2303      	movs	r3, #3
 800da46:	4a94      	ldr	r2, [pc, #592]	; (800dc98 <playARM+0x270>)
 800da48:	21fa      	movs	r1, #250	; 0xfa
 800da4a:	f240 204e 	movw	r0, #590	; 0x24e
 800da4e:	f7f3 fe95 	bl	800177c <BSP_LCD_DisplayStringAt>

		  	 symbPlayer='x';
 800da52:	4b92      	ldr	r3, [pc, #584]	; (800dc9c <playARM+0x274>)
 800da54:	2278      	movs	r2, #120	; 0x78
 800da56:	701a      	strb	r2, [r3, #0]
		  	 symbAdv='o';
 800da58:	4b91      	ldr	r3, [pc, #580]	; (800dca0 <playARM+0x278>)
 800da5a:	226f      	movs	r2, #111	; 0x6f
 800da5c:	701a      	strb	r2, [r3, #0]
		  	 colorPlayer=colorP1;
 800da5e:	4b8d      	ldr	r3, [pc, #564]	; (800dc94 <playARM+0x26c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a90      	ldr	r2, [pc, #576]	; (800dca4 <playARM+0x27c>)
 800da64:	6013      	str	r3, [r2, #0]
		  	 //colorAdv=colorP2;

		  	if(turnFlag==1){
 800da66:	4b90      	ldr	r3, [pc, #576]	; (800dca8 <playARM+0x280>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d102      	bne.n	800da74 <playARM+0x4c>
		  		downTimer=20;
 800da6e:	4b8f      	ldr	r3, [pc, #572]	; (800dcac <playARM+0x284>)
 800da70:	2214      	movs	r2, #20
 800da72:	601a      	str	r2, [r3, #0]
		    }

		  	 if(timOutFlag == 1){
 800da74:	4b8e      	ldr	r3, [pc, #568]	; (800dcb0 <playARM+0x288>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d107      	bne.n	800da8c <playARM+0x64>
		  		timOutFlag=0;
 800da7c:	4b8c      	ldr	r3, [pc, #560]	; (800dcb0 <playARM+0x288>)
 800da7e:	2200      	movs	r2, #0
 800da80:	601a      	str	r2, [r3, #0]
		  		timOutP1++;
 800da82:	4b8c      	ldr	r3, [pc, #560]	; (800dcb4 <playARM+0x28c>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	3301      	adds	r3, #1
 800da88:	4a8a      	ldr	r2, [pc, #552]	; (800dcb4 <playARM+0x28c>)
 800da8a:	6013      	str	r3, [r2, #0]
		  	 }

		  	 if(timOutP1 == 3){
 800da8c:	4b89      	ldr	r3, [pc, #548]	; (800dcb4 <playARM+0x28c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b03      	cmp	r3, #3
 800da92:	d10c      	bne.n	800daae <playARM+0x86>
		  		BSP_LCD_DisplayStringAt(570, 118, (uint8_t *)"PLAYER 1 LOOSES" , LEFT_MODE);
 800da94:	2303      	movs	r3, #3
 800da96:	4a88      	ldr	r2, [pc, #544]	; (800dcb8 <playARM+0x290>)
 800da98:	2176      	movs	r1, #118	; 0x76
 800da9a:	f240 203a 	movw	r0, #570	; 0x23a
 800da9e:	f7f3 fe6d 	bl	800177c <BSP_LCD_DisplayStringAt>
		  		gameARMon = 0;
 800daa2:	4b86      	ldr	r3, [pc, #536]	; (800dcbc <playARM+0x294>)
 800daa4:	2200      	movs	r2, #0
 800daa6:	601a      	str	r2, [r3, #0]
		  		gameEnd=1;
 800daa8:	4b85      	ldr	r3, [pc, #532]	; (800dcc0 <playARM+0x298>)
 800daaa:	2201      	movs	r2, #1
 800daac:	601a      	str	r2, [r3, #0]
		  	 }

		  	 //--Jogada do Player-----------------------------------------------------------

		  	 casaX = (int)TS_State.touchX[0]/60;
 800daae:	4b85      	ldr	r3, [pc, #532]	; (800dcc4 <playARM+0x29c>)
 800dab0:	885b      	ldrh	r3, [r3, #2]
 800dab2:	4a85      	ldr	r2, [pc, #532]	; (800dcc8 <playARM+0x2a0>)
 800dab4:	fba2 2303 	umull	r2, r3, r2, r3
 800dab8:	095b      	lsrs	r3, r3, #5
 800daba:	b29a      	uxth	r2, r3
 800dabc:	4b83      	ldr	r3, [pc, #524]	; (800dccc <playARM+0x2a4>)
 800dabe:	801a      	strh	r2, [r3, #0]
		  	 casaY = (int)TS_State.touchY[0]/60;
 800dac0:	4b80      	ldr	r3, [pc, #512]	; (800dcc4 <playARM+0x29c>)
 800dac2:	88db      	ldrh	r3, [r3, #6]
 800dac4:	4a80      	ldr	r2, [pc, #512]	; (800dcc8 <playARM+0x2a0>)
 800dac6:	fba2 2303 	umull	r2, r3, r2, r3
 800daca:	095b      	lsrs	r3, r3, #5
 800dacc:	b29a      	uxth	r2, r3
 800dace:	4b80      	ldr	r3, [pc, #512]	; (800dcd0 <playARM+0x2a8>)
 800dad0:	801a      	strh	r2, [r3, #0]

		  	BSP_LCD_SetTextColor(colorPlayer);
 800dad2:	4b74      	ldr	r3, [pc, #464]	; (800dca4 <playARM+0x27c>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7f3 fd98 	bl	800160c <BSP_LCD_SetTextColor>

		  	jogadaX = casaX*60+30;
 800dadc:	4b7b      	ldr	r3, [pc, #492]	; (800dccc <playARM+0x2a4>)
 800dade:	881b      	ldrh	r3, [r3, #0]
 800dae0:	461a      	mov	r2, r3
 800dae2:	0112      	lsls	r2, r2, #4
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	b29b      	uxth	r3, r3
 800daea:	331e      	adds	r3, #30
 800daec:	b29a      	uxth	r2, r3
 800daee:	4b79      	ldr	r3, [pc, #484]	; (800dcd4 <playARM+0x2ac>)
 800daf0:	801a      	strh	r2, [r3, #0]
		  	jogadaY = casaY*60+30;
 800daf2:	4b77      	ldr	r3, [pc, #476]	; (800dcd0 <playARM+0x2a8>)
 800daf4:	881b      	ldrh	r3, [r3, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	0112      	lsls	r2, r2, #4
 800dafa:	1ad3      	subs	r3, r2, r3
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	b29b      	uxth	r3, r3
 800db00:	331e      	adds	r3, #30
 800db02:	b29a      	uxth	r2, r3
 800db04:	4b74      	ldr	r3, [pc, #464]	; (800dcd8 <playARM+0x2b0>)
 800db06:	801a      	strh	r2, [r3, #0]

		  BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 800db08:	4b72      	ldr	r3, [pc, #456]	; (800dcd4 <playARM+0x2ac>)
 800db0a:	8818      	ldrh	r0, [r3, #0]
 800db0c:	4b72      	ldr	r3, [pc, #456]	; (800dcd8 <playARM+0x2b0>)
 800db0e:	881b      	ldrh	r3, [r3, #0]
 800db10:	2219      	movs	r2, #25
 800db12:	4619      	mov	r1, r3
 800db14:	f7f4 f8f2 	bl	8001cfc <BSP_LCD_FillCircle>

		 board[casaY][casaX]=symbPlayer;
 800db18:	4b6d      	ldr	r3, [pc, #436]	; (800dcd0 <playARM+0x2a8>)
 800db1a:	881b      	ldrh	r3, [r3, #0]
 800db1c:	461c      	mov	r4, r3
 800db1e:	4b6b      	ldr	r3, [pc, #428]	; (800dccc <playARM+0x2a4>)
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	4618      	mov	r0, r3
 800db24:	4b5d      	ldr	r3, [pc, #372]	; (800dc9c <playARM+0x274>)
 800db26:	7819      	ldrb	r1, [r3, #0]
 800db28:	4a6c      	ldr	r2, [pc, #432]	; (800dcdc <playARM+0x2b4>)
 800db2a:	00e3      	lsls	r3, r4, #3
 800db2c:	4413      	add	r3, r2
 800db2e:	4403      	add	r3, r0
 800db30:	460a      	mov	r2, r1
 800db32:	701a      	strb	r2, [r3, #0]
 800db34:	e09c      	b.n	800dc70 <playARM+0x248>

//Player2

		 else{

			newPlayer++;         //qd e o ARM a jogar tenho q incrementar a variavel
 800db36:	4b56      	ldr	r3, [pc, #344]	; (800dc90 <playARM+0x268>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	3301      	adds	r3, #1
 800db3c:	4a54      	ldr	r2, [pc, #336]	; (800dc90 <playARM+0x268>)
 800db3e:	6013      	str	r3, [r2, #0]

		  	BSP_LCD_SetTextColor(colorP2);
 800db40:	4b67      	ldr	r3, [pc, #412]	; (800dce0 <playARM+0x2b8>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4618      	mov	r0, r3
 800db46:	f7f3 fd61 	bl	800160c <BSP_LCD_SetTextColor>
		  	 BSP_LCD_DisplayStringAt(590, 250, (uint8_t *)"   ARM   ", LEFT_MODE);
 800db4a:	2303      	movs	r3, #3
 800db4c:	4a65      	ldr	r2, [pc, #404]	; (800dce4 <playARM+0x2bc>)
 800db4e:	21fa      	movs	r1, #250	; 0xfa
 800db50:	f240 204e 	movw	r0, #590	; 0x24e
 800db54:	f7f3 fe12 	bl	800177c <BSP_LCD_DisplayStringAt>

		  	symbPlayer='o';
 800db58:	4b50      	ldr	r3, [pc, #320]	; (800dc9c <playARM+0x274>)
 800db5a:	226f      	movs	r2, #111	; 0x6f
 800db5c:	701a      	strb	r2, [r3, #0]
		    symbAdv='x';
 800db5e:	4b50      	ldr	r3, [pc, #320]	; (800dca0 <playARM+0x278>)
 800db60:	2278      	movs	r2, #120	; 0x78
 800db62:	701a      	strb	r2, [r3, #0]
		    colorPlayer=colorP2;
 800db64:	4b5e      	ldr	r3, [pc, #376]	; (800dce0 <playARM+0x2b8>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a4e      	ldr	r2, [pc, #312]	; (800dca4 <playARM+0x27c>)
 800db6a:	6013      	str	r3, [r2, #0]
		    //colorAdv=colorP1;

		    if(turnFlag==1){
 800db6c:	4b4e      	ldr	r3, [pc, #312]	; (800dca8 <playARM+0x280>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d102      	bne.n	800db7a <playARM+0x152>
		    	downTimer=20;
 800db74:	4b4d      	ldr	r3, [pc, #308]	; (800dcac <playARM+0x284>)
 800db76:	2214      	movs	r2, #20
 800db78:	601a      	str	r2, [r3, #0]
		    }

		    if(timOutFlag == 1){
 800db7a:	4b4d      	ldr	r3, [pc, #308]	; (800dcb0 <playARM+0x288>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d107      	bne.n	800db92 <playARM+0x16a>
		       timOutFlag=0;
 800db82:	4b4b      	ldr	r3, [pc, #300]	; (800dcb0 <playARM+0x288>)
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]
	    		timOutP2++;
 800db88:	4b57      	ldr	r3, [pc, #348]	; (800dce8 <playARM+0x2c0>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	3301      	adds	r3, #1
 800db8e:	4a56      	ldr	r2, [pc, #344]	; (800dce8 <playARM+0x2c0>)
 800db90:	6013      	str	r3, [r2, #0]
		    }

		    if(timOutP2 == 3){
 800db92:	4b55      	ldr	r3, [pc, #340]	; (800dce8 <playARM+0x2c0>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b03      	cmp	r3, #3
 800db98:	d10c      	bne.n	800dbb4 <playARM+0x18c>
		  		BSP_LCD_DisplayStringAt(570, 118, (uint8_t *)"ARM LOOSES" , LEFT_MODE);
 800db9a:	2303      	movs	r3, #3
 800db9c:	4a53      	ldr	r2, [pc, #332]	; (800dcec <playARM+0x2c4>)
 800db9e:	2176      	movs	r1, #118	; 0x76
 800dba0:	f240 203a 	movw	r0, #570	; 0x23a
 800dba4:	f7f3 fdea 	bl	800177c <BSP_LCD_DisplayStringAt>
		  		gameARMon = 0;
 800dba8:	4b44      	ldr	r3, [pc, #272]	; (800dcbc <playARM+0x294>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	601a      	str	r2, [r3, #0]
		  		gameEnd=1;
 800dbae:	4b44      	ldr	r3, [pc, #272]	; (800dcc0 <playARM+0x298>)
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	601a      	str	r2, [r3, #0]
		    }

		    //--Jogada do ARM---------------------------

		    jogadasPossiveis(symbPlayer, symbAdv);
 800dbb4:	4b39      	ldr	r3, [pc, #228]	; (800dc9c <playARM+0x274>)
 800dbb6:	781a      	ldrb	r2, [r3, #0]
 800dbb8:	4b39      	ldr	r3, [pc, #228]	; (800dca0 <playARM+0x278>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	f000 f89c 	bl	800dcfc <jogadasPossiveis>

		    srand(time(NULL));
 800dbc4:	2000      	movs	r0, #0
 800dbc6:	f000 fe55 	bl	800e874 <time>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	460c      	mov	r4, r1
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f000 fdd8 	bl	800e784 <srand>

		    int random_number = rand() %20;
 800dbd4:	f000 fdfa 	bl	800e7cc <rand>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	4b45      	ldr	r3, [pc, #276]	; (800dcf0 <playARM+0x2c8>)
 800dbdc:	fb83 1302 	smull	r1, r3, r3, r2
 800dbe0:	10d9      	asrs	r1, r3, #3
 800dbe2:	17d3      	asrs	r3, r2, #31
 800dbe4:	1ac9      	subs	r1, r1, r3
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	440b      	add	r3, r1
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	1ad3      	subs	r3, r2, r3
 800dbf0:	607b      	str	r3, [r7, #4]

		    casaX = jogPossiveisX[random_number];
 800dbf2:	4a40      	ldr	r2, [pc, #256]	; (800dcf4 <playARM+0x2cc>)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	4b33      	ldr	r3, [pc, #204]	; (800dccc <playARM+0x2a4>)
 800dbfe:	801a      	strh	r2, [r3, #0]
		    casaY = jogPossiveisY[random_number];
 800dc00:	4a3d      	ldr	r2, [pc, #244]	; (800dcf8 <playARM+0x2d0>)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	4b31      	ldr	r3, [pc, #196]	; (800dcd0 <playARM+0x2a8>)
 800dc0c:	801a      	strh	r2, [r3, #0]

		    //----colocar as peças-------------------------------------------------------------------------------------

		    		 BSP_LCD_SetTextColor(colorPlayer);
 800dc0e:	4b25      	ldr	r3, [pc, #148]	; (800dca4 <playARM+0x27c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7f3 fcfa 	bl	800160c <BSP_LCD_SetTextColor>

		    		 jogadaX = casaX*60+30;
 800dc18:	4b2c      	ldr	r3, [pc, #176]	; (800dccc <playARM+0x2a4>)
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	0112      	lsls	r2, r2, #4
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	331e      	adds	r3, #30
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	4b2a      	ldr	r3, [pc, #168]	; (800dcd4 <playARM+0x2ac>)
 800dc2c:	801a      	strh	r2, [r3, #0]
		    		 jogadaY = casaY*60+30;
 800dc2e:	4b28      	ldr	r3, [pc, #160]	; (800dcd0 <playARM+0x2a8>)
 800dc30:	881b      	ldrh	r3, [r3, #0]
 800dc32:	461a      	mov	r2, r3
 800dc34:	0112      	lsls	r2, r2, #4
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	331e      	adds	r3, #30
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	4b25      	ldr	r3, [pc, #148]	; (800dcd8 <playARM+0x2b0>)
 800dc42:	801a      	strh	r2, [r3, #0]

		    		 BSP_LCD_FillCircle(jogadaX,jogadaY,25);
 800dc44:	4b23      	ldr	r3, [pc, #140]	; (800dcd4 <playARM+0x2ac>)
 800dc46:	8818      	ldrh	r0, [r3, #0]
 800dc48:	4b23      	ldr	r3, [pc, #140]	; (800dcd8 <playARM+0x2b0>)
 800dc4a:	881b      	ldrh	r3, [r3, #0]
 800dc4c:	2219      	movs	r2, #25
 800dc4e:	4619      	mov	r1, r3
 800dc50:	f7f4 f854 	bl	8001cfc <BSP_LCD_FillCircle>

		    		board[casaY][casaX]=symbPlayer;
 800dc54:	4b1e      	ldr	r3, [pc, #120]	; (800dcd0 <playARM+0x2a8>)
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	461c      	mov	r4, r3
 800dc5a:	4b1c      	ldr	r3, [pc, #112]	; (800dccc <playARM+0x2a4>)
 800dc5c:	881b      	ldrh	r3, [r3, #0]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	4b0e      	ldr	r3, [pc, #56]	; (800dc9c <playARM+0x274>)
 800dc62:	7819      	ldrb	r1, [r3, #0]
 800dc64:	4a1d      	ldr	r2, [pc, #116]	; (800dcdc <playARM+0x2b4>)
 800dc66:	00e3      	lsls	r3, r4, #3
 800dc68:	4413      	add	r3, r2
 800dc6a:	4403      	add	r3, r0
 800dc6c:	460a      	mov	r2, r1
 800dc6e:	701a      	strb	r2, [r3, #0]





   if(turnFlag==1){
 800dc70:	4b0d      	ldr	r3, [pc, #52]	; (800dca8 <playARM+0x280>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d107      	bne.n	800dc88 <playARM+0x260>
		 turnFlag=0;
 800dc78:	4b0b      	ldr	r3, [pc, #44]	; (800dca8 <playARM+0x280>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	601a      	str	r2, [r3, #0]
		   newPlayer++;
 800dc7e:	4b04      	ldr	r3, [pc, #16]	; (800dc90 <playARM+0x268>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	3301      	adds	r3, #1
 800dc84:	4a02      	ldr	r2, [pc, #8]	; (800dc90 <playARM+0x268>)
 800dc86:	6013      	str	r3, [r2, #0]
       }

}
 800dc88:	bf00      	nop
 800dc8a:	370c      	adds	r7, #12
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd90      	pop	{r4, r7, pc}
 800dc90:	20000398 	.word	0x20000398
 800dc94:	200000a4 	.word	0x200000a4
 800dc98:	0800f120 	.word	0x0800f120
 800dc9c:	20000be0 	.word	0x20000be0
 800dca0:	20000a50 	.word	0x20000a50
 800dca4:	20000be4 	.word	0x20000be4
 800dca8:	20000388 	.word	0x20000388
 800dcac:	20000060 	.word	0x20000060
 800dcb0:	200003b0 	.word	0x200003b0
 800dcb4:	200003b4 	.word	0x200003b4
 800dcb8:	0800f208 	.word	0x0800f208
 800dcbc:	200003a0 	.word	0x200003a0
 800dcc0:	200003a4 	.word	0x200003a4
 800dcc4:	20000ce4 	.word	0x20000ce4
 800dcc8:	88888889 	.word	0x88888889
 800dccc:	200003a8 	.word	0x200003a8
 800dcd0:	200003aa 	.word	0x200003aa
 800dcd4:	200003ac 	.word	0x200003ac
 800dcd8:	200003ae 	.word	0x200003ae
 800dcdc:	20000064 	.word	0x20000064
 800dce0:	200000a8 	.word	0x200000a8
 800dce4:	0800f218 	.word	0x0800f218
 800dce8:	200003b8 	.word	0x200003b8
 800dcec:	0800f224 	.word	0x0800f224
 800dcf0:	66666667 	.word	0x66666667
 800dcf4:	200003c0 	.word	0x200003c0
 800dcf8:	20000410 	.word	0x20000410

0800dcfc <jogadasPossiveis>:

void jogadasPossiveis(char symbPlayer, char symbAdv){
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	4603      	mov	r3, r0
 800dd04:	460a      	mov	r2, r1
 800dd06:	71fb      	strb	r3, [r7, #7]
 800dd08:	4613      	mov	r3, r2
 800dd0a:	71bb      	strb	r3, [r7, #6]


	//reinicia as matrizes de jogadas possiveis
	for(int i=0; i<=20; i++){
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	60fb      	str	r3, [r7, #12]
 800dd10:	e00f      	b.n	800dd32 <jogadasPossiveis+0x36>
		jogPossiveisX[i]=0;
 800dd12:	4a69      	ldr	r2, [pc, #420]	; (800deb8 <jogadasPossiveis+0x1bc>)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2100      	movs	r1, #0
 800dd18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		jogPossiveisX[i]=jogPossiveisY[i];
 800dd1c:	4a67      	ldr	r2, [pc, #412]	; (800debc <jogadasPossiveis+0x1c0>)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dd24:	4964      	ldr	r1, [pc, #400]	; (800deb8 <jogadasPossiveis+0x1bc>)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<=20; i++){
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	60fb      	str	r3, [r7, #12]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2b14      	cmp	r3, #20
 800dd36:	ddec      	ble.n	800dd12 <jogadasPossiveis+0x16>
	}

	for(casaX=0; casaX<=7; casaX++){
 800dd38:	4b61      	ldr	r3, [pc, #388]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	801a      	strh	r2, [r3, #0]
 800dd3e:	e0b0      	b.n	800dea2 <jogadasPossiveis+0x1a6>

			for(casaY=0; casaY<=7; casaY++){
 800dd40:	4b60      	ldr	r3, [pc, #384]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	801a      	strh	r2, [r3, #0]
 800dd46:	e0a1      	b.n	800de8c <jogadasPossiveis+0x190>

				//verificar q a casa está vazia
				if(board[casaY][casaX] == '.'  ){
 800dd48:	4b5e      	ldr	r3, [pc, #376]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800dd4a:	881b      	ldrh	r3, [r3, #0]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	4b5c      	ldr	r3, [pc, #368]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	4619      	mov	r1, r3
 800dd54:	4a5c      	ldr	r2, [pc, #368]	; (800dec8 <jogadasPossiveis+0x1cc>)
 800dd56:	00c3      	lsls	r3, r0, #3
 800dd58:	4413      	add	r3, r2
 800dd5a:	440b      	add	r3, r1
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b2e      	cmp	r3, #46	; 0x2e
 800dd60:	f040 808e 	bne.w	800de80 <jogadasPossiveis+0x184>

						//verificar se existe peça adversaria na casa adjacente
						//verifica linha-----------------------------------------------------------------------------

						 if( board[casaY+1][casaX]==symbAdv ){
 800dd64:	4b57      	ldr	r3, [pc, #348]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800dd66:	881b      	ldrh	r3, [r3, #0]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	4a55      	ldr	r2, [pc, #340]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800dd6c:	8812      	ldrh	r2, [r2, #0]
 800dd6e:	4611      	mov	r1, r2
 800dd70:	4a55      	ldr	r2, [pc, #340]	; (800dec8 <jogadasPossiveis+0x1cc>)
 800dd72:	00db      	lsls	r3, r3, #3
 800dd74:	4413      	add	r3, r2
 800dd76:	440b      	add	r3, r1
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	79ba      	ldrb	r2, [r7, #6]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d115      	bne.n	800ddac <jogadasPossiveis+0xb0>
							 jogPossiveisX[indx]=casaX;
 800dd80:	4b4f      	ldr	r3, [pc, #316]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800dd82:	881a      	ldrh	r2, [r3, #0]
 800dd84:	4b51      	ldr	r3, [pc, #324]	; (800decc <jogadasPossiveis+0x1d0>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4611      	mov	r1, r2
 800dd8a:	4a4b      	ldr	r2, [pc, #300]	; (800deb8 <jogadasPossiveis+0x1bc>)
 800dd8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							 jogPossiveisY[indx]=casaY;
 800dd90:	4b4c      	ldr	r3, [pc, #304]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800dd92:	881a      	ldrh	r2, [r3, #0]
 800dd94:	4b4d      	ldr	r3, [pc, #308]	; (800decc <jogadasPossiveis+0x1d0>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4611      	mov	r1, r2
 800dd9a:	4a48      	ldr	r2, [pc, #288]	; (800debc <jogadasPossiveis+0x1c0>)
 800dd9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							 indx++;
 800dda0:	4b4a      	ldr	r3, [pc, #296]	; (800decc <jogadasPossiveis+0x1d0>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	3301      	adds	r3, #1
 800dda6:	4a49      	ldr	r2, [pc, #292]	; (800decc <jogadasPossiveis+0x1d0>)
 800dda8:	6013      	str	r3, [r2, #0]
 800ddaa:	e022      	b.n	800ddf2 <jogadasPossiveis+0xf6>
						}
						else if(board[casaY-1][casaX]==symbAdv ){
 800ddac:	4b45      	ldr	r3, [pc, #276]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	4a43      	ldr	r2, [pc, #268]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800ddb4:	8812      	ldrh	r2, [r2, #0]
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	4a43      	ldr	r2, [pc, #268]	; (800dec8 <jogadasPossiveis+0x1cc>)
 800ddba:	00db      	lsls	r3, r3, #3
 800ddbc:	4413      	add	r3, r2
 800ddbe:	440b      	add	r3, r1
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	79ba      	ldrb	r2, [r7, #6]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d114      	bne.n	800ddf2 <jogadasPossiveis+0xf6>

							  jogPossiveisX[indx]=casaX;
 800ddc8:	4b3d      	ldr	r3, [pc, #244]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800ddca:	881a      	ldrh	r2, [r3, #0]
 800ddcc:	4b3f      	ldr	r3, [pc, #252]	; (800decc <jogadasPossiveis+0x1d0>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	4a39      	ldr	r2, [pc, #228]	; (800deb8 <jogadasPossiveis+0x1bc>)
 800ddd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							  jogPossiveisY[indx]=casaY;
 800ddd8:	4b3a      	ldr	r3, [pc, #232]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800ddda:	881a      	ldrh	r2, [r3, #0]
 800dddc:	4b3b      	ldr	r3, [pc, #236]	; (800decc <jogadasPossiveis+0x1d0>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4611      	mov	r1, r2
 800dde2:	4a36      	ldr	r2, [pc, #216]	; (800debc <jogadasPossiveis+0x1c0>)
 800dde4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							  indx++;
 800dde8:	4b38      	ldr	r3, [pc, #224]	; (800decc <jogadasPossiveis+0x1d0>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3301      	adds	r3, #1
 800ddee:	4a37      	ldr	r2, [pc, #220]	; (800decc <jogadasPossiveis+0x1d0>)
 800ddf0:	6013      	str	r3, [r2, #0]
						}

					//verfica coluna-----------------------------------------------------------------------

						if( board[casaY][casaX+1] == symbAdv ){
 800ddf2:	4b34      	ldr	r3, [pc, #208]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	4b31      	ldr	r3, [pc, #196]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800ddfa:	881b      	ldrh	r3, [r3, #0]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	4932      	ldr	r1, [pc, #200]	; (800dec8 <jogadasPossiveis+0x1cc>)
 800de00:	00d2      	lsls	r2, r2, #3
 800de02:	440a      	add	r2, r1
 800de04:	4413      	add	r3, r2
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	79ba      	ldrb	r2, [r7, #6]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d115      	bne.n	800de3a <jogadasPossiveis+0x13e>
							  jogPossiveisX[indx]=casaX;
 800de0e:	4b2c      	ldr	r3, [pc, #176]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800de10:	881a      	ldrh	r2, [r3, #0]
 800de12:	4b2e      	ldr	r3, [pc, #184]	; (800decc <jogadasPossiveis+0x1d0>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4611      	mov	r1, r2
 800de18:	4a27      	ldr	r2, [pc, #156]	; (800deb8 <jogadasPossiveis+0x1bc>)
 800de1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							  jogPossiveisY[indx]=casaY;
 800de1e:	4b29      	ldr	r3, [pc, #164]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800de20:	881a      	ldrh	r2, [r3, #0]
 800de22:	4b2a      	ldr	r3, [pc, #168]	; (800decc <jogadasPossiveis+0x1d0>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4611      	mov	r1, r2
 800de28:	4a24      	ldr	r2, [pc, #144]	; (800debc <jogadasPossiveis+0x1c0>)
 800de2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								 indx++;
 800de2e:	4b27      	ldr	r3, [pc, #156]	; (800decc <jogadasPossiveis+0x1d0>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	3301      	adds	r3, #1
 800de34:	4a25      	ldr	r2, [pc, #148]	; (800decc <jogadasPossiveis+0x1d0>)
 800de36:	6013      	str	r3, [r2, #0]
 800de38:	e022      	b.n	800de80 <jogadasPossiveis+0x184>
						 }
						else if(  board[casaY][casaX-1]==symbAdv ){
 800de3a:	4b22      	ldr	r3, [pc, #136]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	461a      	mov	r2, r3
 800de40:	4b1f      	ldr	r3, [pc, #124]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	3b01      	subs	r3, #1
 800de46:	4920      	ldr	r1, [pc, #128]	; (800dec8 <jogadasPossiveis+0x1cc>)
 800de48:	00d2      	lsls	r2, r2, #3
 800de4a:	440a      	add	r2, r1
 800de4c:	4413      	add	r3, r2
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	79ba      	ldrb	r2, [r7, #6]
 800de52:	429a      	cmp	r2, r3
 800de54:	d114      	bne.n	800de80 <jogadasPossiveis+0x184>
							jogPossiveisX[indx]=casaX;
 800de56:	4b1a      	ldr	r3, [pc, #104]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800de58:	881a      	ldrh	r2, [r3, #0]
 800de5a:	4b1c      	ldr	r3, [pc, #112]	; (800decc <jogadasPossiveis+0x1d0>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4611      	mov	r1, r2
 800de60:	4a15      	ldr	r2, [pc, #84]	; (800deb8 <jogadasPossiveis+0x1bc>)
 800de62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							jogPossiveisY[indx]=casaY;
 800de66:	4b17      	ldr	r3, [pc, #92]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800de68:	881a      	ldrh	r2, [r3, #0]
 800de6a:	4b18      	ldr	r3, [pc, #96]	; (800decc <jogadasPossiveis+0x1d0>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4611      	mov	r1, r2
 800de70:	4a12      	ldr	r2, [pc, #72]	; (800debc <jogadasPossiveis+0x1c0>)
 800de72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							indx++;
 800de76:	4b15      	ldr	r3, [pc, #84]	; (800decc <jogadasPossiveis+0x1d0>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	3301      	adds	r3, #1
 800de7c:	4a13      	ldr	r2, [pc, #76]	; (800decc <jogadasPossiveis+0x1d0>)
 800de7e:	6013      	str	r3, [r2, #0]
			for(casaY=0; casaY<=7; casaY++){
 800de80:	4b10      	ldr	r3, [pc, #64]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800de82:	881b      	ldrh	r3, [r3, #0]
 800de84:	3301      	adds	r3, #1
 800de86:	b29a      	uxth	r2, r3
 800de88:	4b0e      	ldr	r3, [pc, #56]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800de8a:	801a      	strh	r2, [r3, #0]
 800de8c:	4b0d      	ldr	r3, [pc, #52]	; (800dec4 <jogadasPossiveis+0x1c8>)
 800de8e:	881b      	ldrh	r3, [r3, #0]
 800de90:	2b07      	cmp	r3, #7
 800de92:	f67f af59 	bls.w	800dd48 <jogadasPossiveis+0x4c>
	for(casaX=0; casaX<=7; casaX++){
 800de96:	4b0a      	ldr	r3, [pc, #40]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800de98:	881b      	ldrh	r3, [r3, #0]
 800de9a:	3301      	adds	r3, #1
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	4b08      	ldr	r3, [pc, #32]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800dea0:	801a      	strh	r2, [r3, #0]
 800dea2:	4b07      	ldr	r3, [pc, #28]	; (800dec0 <jogadasPossiveis+0x1c4>)
 800dea4:	881b      	ldrh	r3, [r3, #0]
 800dea6:	2b07      	cmp	r3, #7
 800dea8:	f67f af4a 	bls.w	800dd40 <jogadasPossiveis+0x44>

			}
		}
	   }

}
 800deac:	bf00      	nop
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr
 800deb8:	200003c0 	.word	0x200003c0
 800debc:	20000410 	.word	0x20000410
 800dec0:	200003a8 	.word	0x200003a8
 800dec4:	200003aa 	.word	0x200003aa
 800dec8:	20000064 	.word	0x20000064
 800decc:	20000460 	.word	0x20000460

0800ded0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

 BSP_LED_On(LED_RED);
 800ded4:	2000      	movs	r0, #0
 800ded6:	f7f2 ff49 	bl	8000d6c <BSP_LED_On>

  /* USER CODE END Error_Handler_Debug */
}
 800deda:	bf00      	nop
 800dedc:	bd80      	pop	{r7, pc}
	...

0800dee0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	4603      	mov	r3, r0
 800dee8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800deea:	4b0b      	ldr	r3, [pc, #44]	; (800df18 <SD_CheckStatus+0x38>)
 800deec:	2201      	movs	r2, #1
 800deee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800def0:	f7fe f974 	bl	800c1dc <BSP_SD_GetCardState>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d107      	bne.n	800df0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800defa:	4b07      	ldr	r3, [pc, #28]	; (800df18 <SD_CheckStatus+0x38>)
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	b2db      	uxtb	r3, r3
 800df00:	f023 0301 	bic.w	r3, r3, #1
 800df04:	b2da      	uxtb	r2, r3
 800df06:	4b04      	ldr	r3, [pc, #16]	; (800df18 <SD_CheckStatus+0x38>)
 800df08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800df0a:	4b03      	ldr	r3, [pc, #12]	; (800df18 <SD_CheckStatus+0x38>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	b2db      	uxtb	r3, r3
}
 800df10:	4618      	mov	r0, r3
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	200000ac 	.word	0x200000ac

0800df1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	4603      	mov	r3, r0
 800df24:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800df26:	4b0b      	ldr	r3, [pc, #44]	; (800df54 <SD_initialize+0x38>)
 800df28:	2201      	movs	r2, #1
 800df2a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800df2c:	f7fe f8f4 	bl	800c118 <BSP_SD_Init>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d107      	bne.n	800df46 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800df36:	79fb      	ldrb	r3, [r7, #7]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff ffd1 	bl	800dee0 <SD_CheckStatus>
 800df3e:	4603      	mov	r3, r0
 800df40:	461a      	mov	r2, r3
 800df42:	4b04      	ldr	r3, [pc, #16]	; (800df54 <SD_initialize+0x38>)
 800df44:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800df46:	4b03      	ldr	r3, [pc, #12]	; (800df54 <SD_initialize+0x38>)
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	b2db      	uxtb	r3, r3
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	200000ac 	.word	0x200000ac

0800df58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	4603      	mov	r3, r0
 800df60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800df62:	79fb      	ldrb	r3, [r7, #7]
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff ffbb 	bl	800dee0 <SD_CheckStatus>
 800df6a:	4603      	mov	r3, r0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60b9      	str	r1, [r7, #8]
 800df7c:	607a      	str	r2, [r7, #4]
 800df7e:	603b      	str	r3, [r7, #0]
 800df80:	4603      	mov	r3, r0
 800df82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800df84:	2301      	movs	r3, #1
 800df86:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800df88:	f04f 33ff 	mov.w	r3, #4294967295
 800df8c:	683a      	ldr	r2, [r7, #0]
 800df8e:	6879      	ldr	r1, [r7, #4]
 800df90:	68b8      	ldr	r0, [r7, #8]
 800df92:	f7fe f8e7 	bl	800c164 <BSP_SD_ReadBlocks>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d107      	bne.n	800dfac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800df9c:	bf00      	nop
 800df9e:	f7fe f91d 	bl	800c1dc <BSP_SD_GetCardState>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1fa      	bne.n	800df9e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3718      	adds	r7, #24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b086      	sub	sp, #24
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	607a      	str	r2, [r7, #4]
 800dfc0:	603b      	str	r3, [r7, #0]
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800dfca:	f04f 33ff 	mov.w	r3, #4294967295
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	6879      	ldr	r1, [r7, #4]
 800dfd2:	68b8      	ldr	r0, [r7, #8]
 800dfd4:	f7fe f8e4 	bl	800c1a0 <BSP_SD_WriteBlocks>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d107      	bne.n	800dfee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dfde:	bf00      	nop
 800dfe0:	f7fe f8fc 	bl	800c1dc <BSP_SD_GetCardState>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1fa      	bne.n	800dfe0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dfee:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b08c      	sub	sp, #48	; 0x30
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	4603      	mov	r3, r0
 800e000:	603a      	str	r2, [r7, #0]
 800e002:	71fb      	strb	r3, [r7, #7]
 800e004:	460b      	mov	r3, r1
 800e006:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e00e:	4b25      	ldr	r3, [pc, #148]	; (800e0a4 <SD_ioctl+0xac>)
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	b2db      	uxtb	r3, r3
 800e014:	f003 0301 	and.w	r3, r3, #1
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <SD_ioctl+0x28>
 800e01c:	2303      	movs	r3, #3
 800e01e:	e03c      	b.n	800e09a <SD_ioctl+0xa2>

  switch (cmd)
 800e020:	79bb      	ldrb	r3, [r7, #6]
 800e022:	2b03      	cmp	r3, #3
 800e024:	d834      	bhi.n	800e090 <SD_ioctl+0x98>
 800e026:	a201      	add	r2, pc, #4	; (adr r2, 800e02c <SD_ioctl+0x34>)
 800e028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02c:	0800e03d 	.word	0x0800e03d
 800e030:	0800e045 	.word	0x0800e045
 800e034:	0800e05d 	.word	0x0800e05d
 800e038:	0800e077 	.word	0x0800e077
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e03c:	2300      	movs	r3, #0
 800e03e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e042:	e028      	b.n	800e096 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e044:	f107 030c 	add.w	r3, r7, #12
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fe f8d7 	bl	800c1fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e05a:	e01c      	b.n	800e096 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e05c:	f107 030c 	add.w	r3, r7, #12
 800e060:	4618      	mov	r0, r3
 800e062:	f7fe f8cb 	bl	800c1fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e068:	b29a      	uxth	r2, r3
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e06e:	2300      	movs	r3, #0
 800e070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e074:	e00f      	b.n	800e096 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e076:	f107 030c 	add.w	r3, r7, #12
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe f8be 	bl	800c1fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e082:	0a5a      	lsrs	r2, r3, #9
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e08e:	e002      	b.n	800e096 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e090:	2304      	movs	r3, #4
 800e092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3730      	adds	r7, #48	; 0x30
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	200000ac 	.word	0x200000ac

0800e0a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e0ae:	4b0f      	ldr	r3, [pc, #60]	; (800e0ec <HAL_MspInit+0x44>)
 800e0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b2:	4a0e      	ldr	r2, [pc, #56]	; (800e0ec <HAL_MspInit+0x44>)
 800e0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0b8:	6413      	str	r3, [r2, #64]	; 0x40
 800e0ba:	4b0c      	ldr	r3, [pc, #48]	; (800e0ec <HAL_MspInit+0x44>)
 800e0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0c2:	607b      	str	r3, [r7, #4]
 800e0c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e0c6:	4b09      	ldr	r3, [pc, #36]	; (800e0ec <HAL_MspInit+0x44>)
 800e0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ca:	4a08      	ldr	r2, [pc, #32]	; (800e0ec <HAL_MspInit+0x44>)
 800e0cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e0d0:	6453      	str	r3, [r2, #68]	; 0x44
 800e0d2:	4b06      	ldr	r3, [pc, #24]	; (800e0ec <HAL_MspInit+0x44>)
 800e0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e0de:	bf00      	nop
 800e0e0:	370c      	adds	r7, #12
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	40023800 	.word	0x40023800

0800e0f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a0d      	ldr	r2, [pc, #52]	; (800e134 <HAL_ADC_MspInit+0x44>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d113      	bne.n	800e12a <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e102:	4b0d      	ldr	r3, [pc, #52]	; (800e138 <HAL_ADC_MspInit+0x48>)
 800e104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e106:	4a0c      	ldr	r2, [pc, #48]	; (800e138 <HAL_ADC_MspInit+0x48>)
 800e108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e10c:	6453      	str	r3, [r2, #68]	; 0x44
 800e10e:	4b0a      	ldr	r3, [pc, #40]	; (800e138 <HAL_ADC_MspInit+0x48>)
 800e110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e116:	60fb      	str	r3, [r7, #12]
 800e118:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800e11a:	2200      	movs	r2, #0
 800e11c:	2100      	movs	r1, #0
 800e11e:	2012      	movs	r0, #18
 800e120:	f7f5 fa59 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e124:	2012      	movs	r0, #18
 800e126:	f7f5 fa72 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e12a:	bf00      	nop
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	40012000 	.word	0x40012000
 800e138:	40023800 	.word	0x40023800

0800e13c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a0a      	ldr	r2, [pc, #40]	; (800e174 <HAL_DMA2D_MspInit+0x38>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d10b      	bne.n	800e166 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e14e:	4b0a      	ldr	r3, [pc, #40]	; (800e178 <HAL_DMA2D_MspInit+0x3c>)
 800e150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e152:	4a09      	ldr	r2, [pc, #36]	; (800e178 <HAL_DMA2D_MspInit+0x3c>)
 800e154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e158:	6313      	str	r3, [r2, #48]	; 0x30
 800e15a:	4b07      	ldr	r3, [pc, #28]	; (800e178 <HAL_DMA2D_MspInit+0x3c>)
 800e15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e15e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e162:	60fb      	str	r3, [r7, #12]
 800e164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800e166:	bf00      	nop
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
 800e174:	4002b000 	.word	0x4002b000
 800e178:	40023800 	.word	0x40023800

0800e17c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b08a      	sub	sp, #40	; 0x28
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e184:	f107 0314 	add.w	r3, r7, #20
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	605a      	str	r2, [r3, #4]
 800e18e:	609a      	str	r2, [r3, #8]
 800e190:	60da      	str	r2, [r3, #12]
 800e192:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a17      	ldr	r2, [pc, #92]	; (800e1f8 <HAL_DSI_MspInit+0x7c>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d127      	bne.n	800e1ee <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800e19e:	4b17      	ldr	r3, [pc, #92]	; (800e1fc <HAL_DSI_MspInit+0x80>)
 800e1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1a2:	4a16      	ldr	r2, [pc, #88]	; (800e1fc <HAL_DSI_MspInit+0x80>)
 800e1a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e1a8:	6453      	str	r3, [r2, #68]	; 0x44
 800e1aa:	4b14      	ldr	r3, [pc, #80]	; (800e1fc <HAL_DSI_MspInit+0x80>)
 800e1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1b2:	613b      	str	r3, [r7, #16]
 800e1b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e1b6:	4b11      	ldr	r3, [pc, #68]	; (800e1fc <HAL_DSI_MspInit+0x80>)
 800e1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ba:	4a10      	ldr	r2, [pc, #64]	; (800e1fc <HAL_DSI_MspInit+0x80>)
 800e1bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e1c2:	4b0e      	ldr	r3, [pc, #56]	; (800e1fc <HAL_DSI_MspInit+0x80>)
 800e1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1ca:	60fb      	str	r3, [r7, #12]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e1ce:	2304      	movs	r3, #4
 800e1d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1d2:	2302      	movs	r3, #2
 800e1d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800e1de:	230d      	movs	r3, #13
 800e1e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800e1e2:	f107 0314 	add.w	r3, r7, #20
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	4805      	ldr	r0, [pc, #20]	; (800e200 <HAL_DSI_MspInit+0x84>)
 800e1ea:	f7f6 feff 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800e1ee:	bf00      	nop
 800e1f0:	3728      	adds	r7, #40	; 0x28
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	40016c00 	.word	0x40016c00
 800e1fc:	40023800 	.word	0x40023800
 800e200:	40022400 	.word	0x40022400

0800e204 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a08      	ldr	r2, [pc, #32]	; (800e234 <HAL_DSI_MspDeInit+0x30>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d109      	bne.n	800e22a <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800e216:	4b08      	ldr	r3, [pc, #32]	; (800e238 <HAL_DSI_MspDeInit+0x34>)
 800e218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e21a:	4a07      	ldr	r2, [pc, #28]	; (800e238 <HAL_DSI_MspDeInit+0x34>)
 800e21c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800e220:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800e222:	2104      	movs	r1, #4
 800e224:	4805      	ldr	r0, [pc, #20]	; (800e23c <HAL_DSI_MspDeInit+0x38>)
 800e226:	f7f7 f88b 	bl	8005340 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800e22a:	bf00      	nop
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	40016c00 	.word	0x40016c00
 800e238:	40023800 	.word	0x40023800
 800e23c:	40022400 	.word	0x40022400

0800e240 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a0a      	ldr	r2, [pc, #40]	; (800e278 <HAL_LTDC_MspInit+0x38>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d10b      	bne.n	800e26a <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e252:	4b0a      	ldr	r3, [pc, #40]	; (800e27c <HAL_LTDC_MspInit+0x3c>)
 800e254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e256:	4a09      	ldr	r2, [pc, #36]	; (800e27c <HAL_LTDC_MspInit+0x3c>)
 800e258:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e25c:	6453      	str	r3, [r2, #68]	; 0x44
 800e25e:	4b07      	ldr	r3, [pc, #28]	; (800e27c <HAL_LTDC_MspInit+0x3c>)
 800e260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e262:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800e26a:	bf00      	nop
 800e26c:	3714      	adds	r7, #20
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop
 800e278:	40016800 	.word	0x40016800
 800e27c:	40023800 	.word	0x40023800

0800e280 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b08c      	sub	sp, #48	; 0x30
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e288:	f107 031c 	add.w	r3, r7, #28
 800e28c:	2200      	movs	r2, #0
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	605a      	str	r2, [r3, #4]
 800e292:	609a      	str	r2, [r3, #8]
 800e294:	60da      	str	r2, [r3, #12]
 800e296:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a33      	ldr	r2, [pc, #204]	; (800e36c <HAL_SD_MspInit+0xec>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d160      	bne.n	800e364 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800e2a2:	4b33      	ldr	r3, [pc, #204]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2a6:	4a32      	ldr	r2, [pc, #200]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ac:	6453      	str	r3, [r2, #68]	; 0x44
 800e2ae:	4b30      	ldr	r3, [pc, #192]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2b6:	61bb      	str	r3, [r7, #24]
 800e2b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e2ba:	4b2d      	ldr	r3, [pc, #180]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2be:	4a2c      	ldr	r2, [pc, #176]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2c0:	f043 0302 	orr.w	r3, r3, #2
 800e2c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e2c6:	4b2a      	ldr	r3, [pc, #168]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ca:	f003 0302 	and.w	r3, r3, #2
 800e2ce:	617b      	str	r3, [r7, #20]
 800e2d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e2d2:	4b27      	ldr	r3, [pc, #156]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2d6:	4a26      	ldr	r2, [pc, #152]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2d8:	f043 0308 	orr.w	r3, r3, #8
 800e2dc:	6313      	str	r3, [r2, #48]	; 0x30
 800e2de:	4b24      	ldr	r3, [pc, #144]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e2:	f003 0308 	and.w	r3, r3, #8
 800e2e6:	613b      	str	r3, [r7, #16]
 800e2e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e2ea:	4b21      	ldr	r3, [pc, #132]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ee:	4a20      	ldr	r2, [pc, #128]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2f4:	6313      	str	r3, [r2, #48]	; 0x30
 800e2f6:	4b1e      	ldr	r3, [pc, #120]	; (800e370 <HAL_SD_MspInit+0xf0>)
 800e2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2fe:	60fb      	str	r3, [r7, #12]
 800e300:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800e302:	2318      	movs	r3, #24
 800e304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e306:	2302      	movs	r3, #2
 800e308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e30a:	2300      	movs	r3, #0
 800e30c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e30e:	2303      	movs	r3, #3
 800e310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800e312:	230a      	movs	r3, #10
 800e314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e316:	f107 031c 	add.w	r3, r7, #28
 800e31a:	4619      	mov	r1, r3
 800e31c:	4815      	ldr	r0, [pc, #84]	; (800e374 <HAL_SD_MspInit+0xf4>)
 800e31e:	f7f6 fe65 	bl	8004fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800e322:	23c0      	movs	r3, #192	; 0xc0
 800e324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e326:	2302      	movs	r3, #2
 800e328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e32e:	2303      	movs	r3, #3
 800e330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800e332:	230b      	movs	r3, #11
 800e334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e336:	f107 031c 	add.w	r3, r7, #28
 800e33a:	4619      	mov	r1, r3
 800e33c:	480e      	ldr	r0, [pc, #56]	; (800e378 <HAL_SD_MspInit+0xf8>)
 800e33e:	f7f6 fe55 	bl	8004fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800e342:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e348:	2302      	movs	r3, #2
 800e34a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e34c:	2300      	movs	r3, #0
 800e34e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e350:	2303      	movs	r3, #3
 800e352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800e354:	230b      	movs	r3, #11
 800e356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e358:	f107 031c 	add.w	r3, r7, #28
 800e35c:	4619      	mov	r1, r3
 800e35e:	4807      	ldr	r0, [pc, #28]	; (800e37c <HAL_SD_MspInit+0xfc>)
 800e360:	f7f6 fe44 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800e364:	bf00      	nop
 800e366:	3730      	adds	r7, #48	; 0x30
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	40011c00 	.word	0x40011c00
 800e370:	40023800 	.word	0x40023800
 800e374:	40020400 	.word	0x40020400
 800e378:	40020c00 	.word	0x40020c00
 800e37c:	40021800 	.word	0x40021800

0800e380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a1a      	ldr	r2, [pc, #104]	; (800e3f8 <HAL_TIM_Base_MspInit+0x78>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d114      	bne.n	800e3bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e392:	4b1a      	ldr	r3, [pc, #104]	; (800e3fc <HAL_TIM_Base_MspInit+0x7c>)
 800e394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e396:	4a19      	ldr	r2, [pc, #100]	; (800e3fc <HAL_TIM_Base_MspInit+0x7c>)
 800e398:	f043 0310 	orr.w	r3, r3, #16
 800e39c:	6413      	str	r3, [r2, #64]	; 0x40
 800e39e:	4b17      	ldr	r3, [pc, #92]	; (800e3fc <HAL_TIM_Base_MspInit+0x7c>)
 800e3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3a2:	f003 0310 	and.w	r3, r3, #16
 800e3a6:	60fb      	str	r3, [r7, #12]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	2036      	movs	r0, #54	; 0x36
 800e3b0:	f7f5 f911 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e3b4:	2036      	movs	r0, #54	; 0x36
 800e3b6:	f7f5 f92a 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800e3ba:	e018      	b.n	800e3ee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a0f      	ldr	r2, [pc, #60]	; (800e400 <HAL_TIM_Base_MspInit+0x80>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d113      	bne.n	800e3ee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800e3c6:	4b0d      	ldr	r3, [pc, #52]	; (800e3fc <HAL_TIM_Base_MspInit+0x7c>)
 800e3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ca:	4a0c      	ldr	r2, [pc, #48]	; (800e3fc <HAL_TIM_Base_MspInit+0x7c>)
 800e3cc:	f043 0320 	orr.w	r3, r3, #32
 800e3d0:	6413      	str	r3, [r2, #64]	; 0x40
 800e3d2:	4b0a      	ldr	r3, [pc, #40]	; (800e3fc <HAL_TIM_Base_MspInit+0x7c>)
 800e3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3d6:	f003 0320 	and.w	r3, r3, #32
 800e3da:	60bb      	str	r3, [r7, #8]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800e3de:	2200      	movs	r2, #0
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	2037      	movs	r0, #55	; 0x37
 800e3e4:	f7f5 f8f7 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800e3e8:	2037      	movs	r0, #55	; 0x37
 800e3ea:	f7f5 f910 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 800e3ee:	bf00      	nop
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	40001000 	.word	0x40001000
 800e3fc:	40023800 	.word	0x40023800
 800e400:	40001400 	.word	0x40001400

0800e404 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800e40a:	1d3b      	adds	r3, r7, #4
 800e40c:	2200      	movs	r2, #0
 800e40e:	601a      	str	r2, [r3, #0]
 800e410:	605a      	str	r2, [r3, #4]
 800e412:	609a      	str	r2, [r3, #8]
 800e414:	60da      	str	r2, [r3, #12]
 800e416:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800e418:	4b43      	ldr	r3, [pc, #268]	; (800e528 <HAL_FMC_MspInit+0x124>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d17e      	bne.n	800e51e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800e420:	4b41      	ldr	r3, [pc, #260]	; (800e528 <HAL_FMC_MspInit+0x124>)
 800e422:	2201      	movs	r2, #1
 800e424:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e426:	4b41      	ldr	r3, [pc, #260]	; (800e52c <HAL_FMC_MspInit+0x128>)
 800e428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42a:	4a40      	ldr	r2, [pc, #256]	; (800e52c <HAL_FMC_MspInit+0x128>)
 800e42c:	f043 0301 	orr.w	r3, r3, #1
 800e430:	6393      	str	r3, [r2, #56]	; 0x38
 800e432:	4b3e      	ldr	r3, [pc, #248]	; (800e52c <HAL_FMC_MspInit+0x128>)
 800e434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e436:	f003 0301 	and.w	r3, r3, #1
 800e43a:	603b      	str	r3, [r7, #0]
 800e43c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 800e43e:	f64f 7383 	movw	r3, #65411	; 0xff83
 800e442:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e444:	2302      	movs	r3, #2
 800e446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e448:	2300      	movs	r3, #0
 800e44a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e44c:	2303      	movs	r3, #3
 800e44e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e450:	230c      	movs	r3, #12
 800e452:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e454:	1d3b      	adds	r3, r7, #4
 800e456:	4619      	mov	r1, r3
 800e458:	4835      	ldr	r0, [pc, #212]	; (800e530 <HAL_FMC_MspInit+0x12c>)
 800e45a:	f7f6 fdc7 	bl	8004fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800e45e:	2360      	movs	r3, #96	; 0x60
 800e460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e462:	2302      	movs	r3, #2
 800e464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e466:	2300      	movs	r3, #0
 800e468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e46a:	2303      	movs	r3, #3
 800e46c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e46e:	230c      	movs	r3, #12
 800e470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e472:	1d3b      	adds	r3, r7, #4
 800e474:	4619      	mov	r1, r3
 800e476:	482f      	ldr	r0, [pc, #188]	; (800e534 <HAL_FMC_MspInit+0x130>)
 800e478:	f7f6 fdb8 	bl	8004fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800e47c:	f248 1337 	movw	r3, #33079	; 0x8137
 800e480:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e482:	2302      	movs	r3, #2
 800e484:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e486:	2300      	movs	r3, #0
 800e488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e48a:	2303      	movs	r3, #3
 800e48c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e48e:	230c      	movs	r3, #12
 800e490:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e492:	1d3b      	adds	r3, r7, #4
 800e494:	4619      	mov	r1, r3
 800e496:	4828      	ldr	r0, [pc, #160]	; (800e538 <HAL_FMC_MspInit+0x134>)
 800e498:	f7f6 fda8 	bl	8004fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800e49c:	f24c 7303 	movw	r3, #50947	; 0xc703
 800e4a0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4a2:	2302      	movs	r3, #2
 800e4a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e4ae:	230c      	movs	r3, #12
 800e4b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e4b2:	1d3b      	adds	r3, r7, #4
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	4821      	ldr	r0, [pc, #132]	; (800e53c <HAL_FMC_MspInit+0x138>)
 800e4b8:	f7f6 fd98 	bl	8004fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 800e4bc:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800e4c0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4ca:	2303      	movs	r3, #3
 800e4cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e4ce:	230c      	movs	r3, #12
 800e4d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e4d2:	1d3b      	adds	r3, r7, #4
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	481a      	ldr	r0, [pc, #104]	; (800e540 <HAL_FMC_MspInit+0x13c>)
 800e4d8:	f7f6 fd88 	bl	8004fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800e4dc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800e4e0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4e2:	2302      	movs	r3, #2
 800e4e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e4ee:	230c      	movs	r3, #12
 800e4f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e4f2:	1d3b      	adds	r3, r7, #4
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4813      	ldr	r0, [pc, #76]	; (800e544 <HAL_FMC_MspInit+0x140>)
 800e4f8:	f7f6 fd78 	bl	8004fec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800e4fc:	f64f 7320 	movw	r3, #65312	; 0xff20
 800e500:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e502:	2302      	movs	r3, #2
 800e504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e506:	2300      	movs	r3, #0
 800e508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e50a:	2303      	movs	r3, #3
 800e50c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e50e:	230c      	movs	r3, #12
 800e510:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e512:	1d3b      	adds	r3, r7, #4
 800e514:	4619      	mov	r1, r3
 800e516:	480c      	ldr	r0, [pc, #48]	; (800e548 <HAL_FMC_MspInit+0x144>)
 800e518:	f7f6 fd68 	bl	8004fec <HAL_GPIO_Init>
 800e51c:	e000      	b.n	800e520 <HAL_FMC_MspInit+0x11c>
    return;
 800e51e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20000464 	.word	0x20000464
 800e52c:	40023800 	.word	0x40023800
 800e530:	40021000 	.word	0x40021000
 800e534:	40020400 	.word	0x40020400
 800e538:	40021800 	.word	0x40021800
 800e53c:	40020c00 	.word	0x40020c00
 800e540:	40022000 	.word	0x40022000
 800e544:	40021400 	.word	0x40021400
 800e548:	40021c00 	.word	0x40021c00

0800e54c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800e554:	f7ff ff56 	bl	800e404 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800e558:	bf00      	nop
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e560:	b480      	push	{r7}
 800e562:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e564:	bf00      	nop
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr

0800e56e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e56e:	b480      	push	{r7}
 800e570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e572:	e7fe      	b.n	800e572 <HardFault_Handler+0x4>

0800e574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e574:	b480      	push	{r7}
 800e576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e578:	e7fe      	b.n	800e578 <MemManage_Handler+0x4>

0800e57a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e57a:	b480      	push	{r7}
 800e57c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e57e:	e7fe      	b.n	800e57e <BusFault_Handler+0x4>

0800e580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e580:	b480      	push	{r7}
 800e582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e584:	e7fe      	b.n	800e584 <UsageFault_Handler+0x4>

0800e586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e586:	b480      	push	{r7}
 800e588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e58a:	bf00      	nop
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e594:	b480      	push	{r7}
 800e596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e598:	bf00      	nop
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr

0800e5a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e5a2:	b480      	push	{r7}
 800e5a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e5a6:	bf00      	nop
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e5b4:	f7f4 f9c6 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e5b8:	bf00      	nop
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800e5c0:	4802      	ldr	r0, [pc, #8]	; (800e5cc <ADC_IRQHandler+0x10>)
 800e5c2:	f7f4 fb89 	bl	8002cd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800e5c6:	bf00      	nop
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	20000b94 	.word	0x20000b94

0800e5d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800e5d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e5d8:	f7f6 ffee 	bl	80055b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e5dc:	bf00      	nop
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800e5e4:	4802      	ldr	r0, [pc, #8]	; (800e5f0 <TIM6_DAC_IRQHandler+0x10>)
 800e5e6:	f7fa faf9 	bl	8008bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800e5ea:	bf00      	nop
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	20000be8 	.word	0x20000be8

0800e5f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800e5f8:	4802      	ldr	r0, [pc, #8]	; (800e604 <TIM7_IRQHandler+0x10>)
 800e5fa:	f7fa faef 	bl	8008bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800e5fe:	bf00      	nop
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	20000d38 	.word	0x20000d38

0800e608 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e610:	4b11      	ldr	r3, [pc, #68]	; (800e658 <_sbrk+0x50>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d102      	bne.n	800e61e <_sbrk+0x16>
		heap_end = &end;
 800e618:	4b0f      	ldr	r3, [pc, #60]	; (800e658 <_sbrk+0x50>)
 800e61a:	4a10      	ldr	r2, [pc, #64]	; (800e65c <_sbrk+0x54>)
 800e61c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e61e:	4b0e      	ldr	r3, [pc, #56]	; (800e658 <_sbrk+0x50>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e624:	4b0c      	ldr	r3, [pc, #48]	; (800e658 <_sbrk+0x50>)
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4413      	add	r3, r2
 800e62c:	466a      	mov	r2, sp
 800e62e:	4293      	cmp	r3, r2
 800e630:	d907      	bls.n	800e642 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e632:	f000 f875 	bl	800e720 <__errno>
 800e636:	4602      	mov	r2, r0
 800e638:	230c      	movs	r3, #12
 800e63a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e63c:	f04f 33ff 	mov.w	r3, #4294967295
 800e640:	e006      	b.n	800e650 <_sbrk+0x48>
	}

	heap_end += incr;
 800e642:	4b05      	ldr	r3, [pc, #20]	; (800e658 <_sbrk+0x50>)
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4413      	add	r3, r2
 800e64a:	4a03      	ldr	r2, [pc, #12]	; (800e658 <_sbrk+0x50>)
 800e64c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e64e:	68fb      	ldr	r3, [r7, #12]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	20000468 	.word	0x20000468
 800e65c:	20000d90 	.word	0x20000d90

0800e660 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e660:	b480      	push	{r7}
 800e662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e664:	4b15      	ldr	r3, [pc, #84]	; (800e6bc <SystemInit+0x5c>)
 800e666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e66a:	4a14      	ldr	r2, [pc, #80]	; (800e6bc <SystemInit+0x5c>)
 800e66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e674:	4b12      	ldr	r3, [pc, #72]	; (800e6c0 <SystemInit+0x60>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a11      	ldr	r2, [pc, #68]	; (800e6c0 <SystemInit+0x60>)
 800e67a:	f043 0301 	orr.w	r3, r3, #1
 800e67e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e680:	4b0f      	ldr	r3, [pc, #60]	; (800e6c0 <SystemInit+0x60>)
 800e682:	2200      	movs	r2, #0
 800e684:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e686:	4b0e      	ldr	r3, [pc, #56]	; (800e6c0 <SystemInit+0x60>)
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	490d      	ldr	r1, [pc, #52]	; (800e6c0 <SystemInit+0x60>)
 800e68c:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <SystemInit+0x64>)
 800e68e:	4013      	ands	r3, r2
 800e690:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800e692:	4b0b      	ldr	r3, [pc, #44]	; (800e6c0 <SystemInit+0x60>)
 800e694:	4a0c      	ldr	r2, [pc, #48]	; (800e6c8 <SystemInit+0x68>)
 800e696:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e698:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <SystemInit+0x60>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a08      	ldr	r2, [pc, #32]	; (800e6c0 <SystemInit+0x60>)
 800e69e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e6a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e6a4:	4b06      	ldr	r3, [pc, #24]	; (800e6c0 <SystemInit+0x60>)
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e6aa:	4b04      	ldr	r3, [pc, #16]	; (800e6bc <SystemInit+0x5c>)
 800e6ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e6b0:	609a      	str	r2, [r3, #8]
#endif
}
 800e6b2:	bf00      	nop
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	e000ed00 	.word	0xe000ed00
 800e6c0:	40023800 	.word	0x40023800
 800e6c4:	fef6ffff 	.word	0xfef6ffff
 800e6c8:	24003010 	.word	0x24003010

0800e6cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e6cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e704 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e6d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e6d2:	e003      	b.n	800e6dc <LoopCopyDataInit>

0800e6d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e6d4:	4b0c      	ldr	r3, [pc, #48]	; (800e708 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e6d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e6d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e6da:	3104      	adds	r1, #4

0800e6dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e6dc:	480b      	ldr	r0, [pc, #44]	; (800e70c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e6de:	4b0c      	ldr	r3, [pc, #48]	; (800e710 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e6e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e6e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e6e4:	d3f6      	bcc.n	800e6d4 <CopyDataInit>
  ldr  r2, =_sbss
 800e6e6:	4a0b      	ldr	r2, [pc, #44]	; (800e714 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e6e8:	e002      	b.n	800e6f0 <LoopFillZerobss>

0800e6ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e6ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e6ec:	f842 3b04 	str.w	r3, [r2], #4

0800e6f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e6f0:	4b09      	ldr	r3, [pc, #36]	; (800e718 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e6f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e6f4:	d3f9      	bcc.n	800e6ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e6f6:	f7ff ffb3 	bl	800e660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e6fa:	f000 f817 	bl	800e72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e6fe:	f7fd fecd 	bl	800c49c <main>
  bx  lr    
 800e702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e704:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800e708:	08011bcc 	.word	0x08011bcc
  ldr  r0, =_sdata
 800e70c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e710:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 800e714:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 800e718:	20000d90 	.word	0x20000d90

0800e71c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e71c:	e7fe      	b.n	800e71c <CAN1_RX0_IRQHandler>
	...

0800e720 <__errno>:
 800e720:	4b01      	ldr	r3, [pc, #4]	; (800e728 <__errno+0x8>)
 800e722:	6818      	ldr	r0, [r3, #0]
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	200000b4 	.word	0x200000b4

0800e72c <__libc_init_array>:
 800e72c:	b570      	push	{r4, r5, r6, lr}
 800e72e:	4e0d      	ldr	r6, [pc, #52]	; (800e764 <__libc_init_array+0x38>)
 800e730:	4c0d      	ldr	r4, [pc, #52]	; (800e768 <__libc_init_array+0x3c>)
 800e732:	1ba4      	subs	r4, r4, r6
 800e734:	10a4      	asrs	r4, r4, #2
 800e736:	2500      	movs	r5, #0
 800e738:	42a5      	cmp	r5, r4
 800e73a:	d109      	bne.n	800e750 <__libc_init_array+0x24>
 800e73c:	4e0b      	ldr	r6, [pc, #44]	; (800e76c <__libc_init_array+0x40>)
 800e73e:	4c0c      	ldr	r4, [pc, #48]	; (800e770 <__libc_init_array+0x44>)
 800e740:	f000 fcba 	bl	800f0b8 <_init>
 800e744:	1ba4      	subs	r4, r4, r6
 800e746:	10a4      	asrs	r4, r4, #2
 800e748:	2500      	movs	r5, #0
 800e74a:	42a5      	cmp	r5, r4
 800e74c:	d105      	bne.n	800e75a <__libc_init_array+0x2e>
 800e74e:	bd70      	pop	{r4, r5, r6, pc}
 800e750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e754:	4798      	blx	r3
 800e756:	3501      	adds	r5, #1
 800e758:	e7ee      	b.n	800e738 <__libc_init_array+0xc>
 800e75a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e75e:	4798      	blx	r3
 800e760:	3501      	adds	r5, #1
 800e762:	e7f2      	b.n	800e74a <__libc_init_array+0x1e>
 800e764:	08011bc4 	.word	0x08011bc4
 800e768:	08011bc4 	.word	0x08011bc4
 800e76c:	08011bc4 	.word	0x08011bc4
 800e770:	08011bc8 	.word	0x08011bc8

0800e774 <memset>:
 800e774:	4402      	add	r2, r0
 800e776:	4603      	mov	r3, r0
 800e778:	4293      	cmp	r3, r2
 800e77a:	d100      	bne.n	800e77e <memset+0xa>
 800e77c:	4770      	bx	lr
 800e77e:	f803 1b01 	strb.w	r1, [r3], #1
 800e782:	e7f9      	b.n	800e778 <memset+0x4>

0800e784 <srand>:
 800e784:	b538      	push	{r3, r4, r5, lr}
 800e786:	4b0d      	ldr	r3, [pc, #52]	; (800e7bc <srand+0x38>)
 800e788:	681c      	ldr	r4, [r3, #0]
 800e78a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e78c:	4605      	mov	r5, r0
 800e78e:	b97b      	cbnz	r3, 800e7b0 <srand+0x2c>
 800e790:	2018      	movs	r0, #24
 800e792:	f000 f89b 	bl	800e8cc <malloc>
 800e796:	4a0a      	ldr	r2, [pc, #40]	; (800e7c0 <srand+0x3c>)
 800e798:	4b0a      	ldr	r3, [pc, #40]	; (800e7c4 <srand+0x40>)
 800e79a:	63a0      	str	r0, [r4, #56]	; 0x38
 800e79c:	e9c0 2300 	strd	r2, r3, [r0]
 800e7a0:	4b09      	ldr	r3, [pc, #36]	; (800e7c8 <srand+0x44>)
 800e7a2:	6083      	str	r3, [r0, #8]
 800e7a4:	230b      	movs	r3, #11
 800e7a6:	8183      	strh	r3, [r0, #12]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e7b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	611d      	str	r5, [r3, #16]
 800e7b6:	615a      	str	r2, [r3, #20]
 800e7b8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ba:	bf00      	nop
 800e7bc:	200000b4 	.word	0x200000b4
 800e7c0:	abcd330e 	.word	0xabcd330e
 800e7c4:	e66d1234 	.word	0xe66d1234
 800e7c8:	0005deec 	.word	0x0005deec

0800e7cc <rand>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4b13      	ldr	r3, [pc, #76]	; (800e81c <rand+0x50>)
 800e7d0:	681c      	ldr	r4, [r3, #0]
 800e7d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7d4:	b97b      	cbnz	r3, 800e7f6 <rand+0x2a>
 800e7d6:	2018      	movs	r0, #24
 800e7d8:	f000 f878 	bl	800e8cc <malloc>
 800e7dc:	4a10      	ldr	r2, [pc, #64]	; (800e820 <rand+0x54>)
 800e7de:	4b11      	ldr	r3, [pc, #68]	; (800e824 <rand+0x58>)
 800e7e0:	63a0      	str	r0, [r4, #56]	; 0x38
 800e7e2:	e9c0 2300 	strd	r2, r3, [r0]
 800e7e6:	4b10      	ldr	r3, [pc, #64]	; (800e828 <rand+0x5c>)
 800e7e8:	6083      	str	r3, [r0, #8]
 800e7ea:	230b      	movs	r3, #11
 800e7ec:	8183      	strh	r3, [r0, #12]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e7f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e7f8:	480c      	ldr	r0, [pc, #48]	; (800e82c <rand+0x60>)
 800e7fa:	690a      	ldr	r2, [r1, #16]
 800e7fc:	694b      	ldr	r3, [r1, #20]
 800e7fe:	4c0c      	ldr	r4, [pc, #48]	; (800e830 <rand+0x64>)
 800e800:	4350      	muls	r0, r2
 800e802:	fb04 0003 	mla	r0, r4, r3, r0
 800e806:	fba2 2304 	umull	r2, r3, r2, r4
 800e80a:	4403      	add	r3, r0
 800e80c:	1c54      	adds	r4, r2, #1
 800e80e:	f143 0500 	adc.w	r5, r3, #0
 800e812:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800e816:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e81a:	bd38      	pop	{r3, r4, r5, pc}
 800e81c:	200000b4 	.word	0x200000b4
 800e820:	abcd330e 	.word	0xabcd330e
 800e824:	e66d1234 	.word	0xe66d1234
 800e828:	0005deec 	.word	0x0005deec
 800e82c:	5851f42d 	.word	0x5851f42d
 800e830:	4c957f2d 	.word	0x4c957f2d

0800e834 <siprintf>:
 800e834:	b40e      	push	{r1, r2, r3}
 800e836:	b500      	push	{lr}
 800e838:	b09c      	sub	sp, #112	; 0x70
 800e83a:	ab1d      	add	r3, sp, #116	; 0x74
 800e83c:	9002      	str	r0, [sp, #8]
 800e83e:	9006      	str	r0, [sp, #24]
 800e840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e844:	4809      	ldr	r0, [pc, #36]	; (800e86c <siprintf+0x38>)
 800e846:	9107      	str	r1, [sp, #28]
 800e848:	9104      	str	r1, [sp, #16]
 800e84a:	4909      	ldr	r1, [pc, #36]	; (800e870 <siprintf+0x3c>)
 800e84c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e850:	9105      	str	r1, [sp, #20]
 800e852:	6800      	ldr	r0, [r0, #0]
 800e854:	9301      	str	r3, [sp, #4]
 800e856:	a902      	add	r1, sp, #8
 800e858:	f000 f942 	bl	800eae0 <_svfiprintf_r>
 800e85c:	9b02      	ldr	r3, [sp, #8]
 800e85e:	2200      	movs	r2, #0
 800e860:	701a      	strb	r2, [r3, #0]
 800e862:	b01c      	add	sp, #112	; 0x70
 800e864:	f85d eb04 	ldr.w	lr, [sp], #4
 800e868:	b003      	add	sp, #12
 800e86a:	4770      	bx	lr
 800e86c:	200000b4 	.word	0x200000b4
 800e870:	ffff0208 	.word	0xffff0208

0800e874 <time>:
 800e874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e876:	4b0b      	ldr	r3, [pc, #44]	; (800e8a4 <time+0x30>)
 800e878:	4604      	mov	r4, r0
 800e87a:	2200      	movs	r2, #0
 800e87c:	4669      	mov	r1, sp
 800e87e:	6818      	ldr	r0, [r3, #0]
 800e880:	f000 f812 	bl	800e8a8 <_gettimeofday_r>
 800e884:	2800      	cmp	r0, #0
 800e886:	da05      	bge.n	800e894 <time+0x20>
 800e888:	f04f 32ff 	mov.w	r2, #4294967295
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295
 800e890:	e9cd 2300 	strd	r2, r3, [sp]
 800e894:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e898:	b10c      	cbz	r4, 800e89e <time+0x2a>
 800e89a:	e9c4 0100 	strd	r0, r1, [r4]
 800e89e:	b004      	add	sp, #16
 800e8a0:	bd10      	pop	{r4, pc}
 800e8a2:	bf00      	nop
 800e8a4:	200000b4 	.word	0x200000b4

0800e8a8 <_gettimeofday_r>:
 800e8a8:	b538      	push	{r3, r4, r5, lr}
 800e8aa:	4c07      	ldr	r4, [pc, #28]	; (800e8c8 <_gettimeofday_r+0x20>)
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	4605      	mov	r5, r0
 800e8b0:	4608      	mov	r0, r1
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	f000 fbf7 	bl	800f0a8 <_gettimeofday>
 800e8ba:	1c43      	adds	r3, r0, #1
 800e8bc:	d102      	bne.n	800e8c4 <_gettimeofday_r+0x1c>
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	b103      	cbz	r3, 800e8c4 <_gettimeofday_r+0x1c>
 800e8c2:	602b      	str	r3, [r5, #0]
 800e8c4:	bd38      	pop	{r3, r4, r5, pc}
 800e8c6:	bf00      	nop
 800e8c8:	20000d8c 	.word	0x20000d8c

0800e8cc <malloc>:
 800e8cc:	4b02      	ldr	r3, [pc, #8]	; (800e8d8 <malloc+0xc>)
 800e8ce:	4601      	mov	r1, r0
 800e8d0:	6818      	ldr	r0, [r3, #0]
 800e8d2:	f000 b851 	b.w	800e978 <_malloc_r>
 800e8d6:	bf00      	nop
 800e8d8:	200000b4 	.word	0x200000b4

0800e8dc <_free_r>:
 800e8dc:	b538      	push	{r3, r4, r5, lr}
 800e8de:	4605      	mov	r5, r0
 800e8e0:	2900      	cmp	r1, #0
 800e8e2:	d045      	beq.n	800e970 <_free_r+0x94>
 800e8e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8e8:	1f0c      	subs	r4, r1, #4
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	bfb8      	it	lt
 800e8ee:	18e4      	addlt	r4, r4, r3
 800e8f0:	f000 fbaa 	bl	800f048 <__malloc_lock>
 800e8f4:	4a1f      	ldr	r2, [pc, #124]	; (800e974 <_free_r+0x98>)
 800e8f6:	6813      	ldr	r3, [r2, #0]
 800e8f8:	4610      	mov	r0, r2
 800e8fa:	b933      	cbnz	r3, 800e90a <_free_r+0x2e>
 800e8fc:	6063      	str	r3, [r4, #4]
 800e8fe:	6014      	str	r4, [r2, #0]
 800e900:	4628      	mov	r0, r5
 800e902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e906:	f000 bba0 	b.w	800f04a <__malloc_unlock>
 800e90a:	42a3      	cmp	r3, r4
 800e90c:	d90c      	bls.n	800e928 <_free_r+0x4c>
 800e90e:	6821      	ldr	r1, [r4, #0]
 800e910:	1862      	adds	r2, r4, r1
 800e912:	4293      	cmp	r3, r2
 800e914:	bf04      	itt	eq
 800e916:	681a      	ldreq	r2, [r3, #0]
 800e918:	685b      	ldreq	r3, [r3, #4]
 800e91a:	6063      	str	r3, [r4, #4]
 800e91c:	bf04      	itt	eq
 800e91e:	1852      	addeq	r2, r2, r1
 800e920:	6022      	streq	r2, [r4, #0]
 800e922:	6004      	str	r4, [r0, #0]
 800e924:	e7ec      	b.n	800e900 <_free_r+0x24>
 800e926:	4613      	mov	r3, r2
 800e928:	685a      	ldr	r2, [r3, #4]
 800e92a:	b10a      	cbz	r2, 800e930 <_free_r+0x54>
 800e92c:	42a2      	cmp	r2, r4
 800e92e:	d9fa      	bls.n	800e926 <_free_r+0x4a>
 800e930:	6819      	ldr	r1, [r3, #0]
 800e932:	1858      	adds	r0, r3, r1
 800e934:	42a0      	cmp	r0, r4
 800e936:	d10b      	bne.n	800e950 <_free_r+0x74>
 800e938:	6820      	ldr	r0, [r4, #0]
 800e93a:	4401      	add	r1, r0
 800e93c:	1858      	adds	r0, r3, r1
 800e93e:	4282      	cmp	r2, r0
 800e940:	6019      	str	r1, [r3, #0]
 800e942:	d1dd      	bne.n	800e900 <_free_r+0x24>
 800e944:	6810      	ldr	r0, [r2, #0]
 800e946:	6852      	ldr	r2, [r2, #4]
 800e948:	605a      	str	r2, [r3, #4]
 800e94a:	4401      	add	r1, r0
 800e94c:	6019      	str	r1, [r3, #0]
 800e94e:	e7d7      	b.n	800e900 <_free_r+0x24>
 800e950:	d902      	bls.n	800e958 <_free_r+0x7c>
 800e952:	230c      	movs	r3, #12
 800e954:	602b      	str	r3, [r5, #0]
 800e956:	e7d3      	b.n	800e900 <_free_r+0x24>
 800e958:	6820      	ldr	r0, [r4, #0]
 800e95a:	1821      	adds	r1, r4, r0
 800e95c:	428a      	cmp	r2, r1
 800e95e:	bf04      	itt	eq
 800e960:	6811      	ldreq	r1, [r2, #0]
 800e962:	6852      	ldreq	r2, [r2, #4]
 800e964:	6062      	str	r2, [r4, #4]
 800e966:	bf04      	itt	eq
 800e968:	1809      	addeq	r1, r1, r0
 800e96a:	6021      	streq	r1, [r4, #0]
 800e96c:	605c      	str	r4, [r3, #4]
 800e96e:	e7c7      	b.n	800e900 <_free_r+0x24>
 800e970:	bd38      	pop	{r3, r4, r5, pc}
 800e972:	bf00      	nop
 800e974:	2000046c 	.word	0x2000046c

0800e978 <_malloc_r>:
 800e978:	b570      	push	{r4, r5, r6, lr}
 800e97a:	1ccd      	adds	r5, r1, #3
 800e97c:	f025 0503 	bic.w	r5, r5, #3
 800e980:	3508      	adds	r5, #8
 800e982:	2d0c      	cmp	r5, #12
 800e984:	bf38      	it	cc
 800e986:	250c      	movcc	r5, #12
 800e988:	2d00      	cmp	r5, #0
 800e98a:	4606      	mov	r6, r0
 800e98c:	db01      	blt.n	800e992 <_malloc_r+0x1a>
 800e98e:	42a9      	cmp	r1, r5
 800e990:	d903      	bls.n	800e99a <_malloc_r+0x22>
 800e992:	230c      	movs	r3, #12
 800e994:	6033      	str	r3, [r6, #0]
 800e996:	2000      	movs	r0, #0
 800e998:	bd70      	pop	{r4, r5, r6, pc}
 800e99a:	f000 fb55 	bl	800f048 <__malloc_lock>
 800e99e:	4a21      	ldr	r2, [pc, #132]	; (800ea24 <_malloc_r+0xac>)
 800e9a0:	6814      	ldr	r4, [r2, #0]
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	b991      	cbnz	r1, 800e9cc <_malloc_r+0x54>
 800e9a6:	4c20      	ldr	r4, [pc, #128]	; (800ea28 <_malloc_r+0xb0>)
 800e9a8:	6823      	ldr	r3, [r4, #0]
 800e9aa:	b91b      	cbnz	r3, 800e9b4 <_malloc_r+0x3c>
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	f000 fb17 	bl	800efe0 <_sbrk_r>
 800e9b2:	6020      	str	r0, [r4, #0]
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f000 fb12 	bl	800efe0 <_sbrk_r>
 800e9bc:	1c43      	adds	r3, r0, #1
 800e9be:	d124      	bne.n	800ea0a <_malloc_r+0x92>
 800e9c0:	230c      	movs	r3, #12
 800e9c2:	6033      	str	r3, [r6, #0]
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f000 fb40 	bl	800f04a <__malloc_unlock>
 800e9ca:	e7e4      	b.n	800e996 <_malloc_r+0x1e>
 800e9cc:	680b      	ldr	r3, [r1, #0]
 800e9ce:	1b5b      	subs	r3, r3, r5
 800e9d0:	d418      	bmi.n	800ea04 <_malloc_r+0x8c>
 800e9d2:	2b0b      	cmp	r3, #11
 800e9d4:	d90f      	bls.n	800e9f6 <_malloc_r+0x7e>
 800e9d6:	600b      	str	r3, [r1, #0]
 800e9d8:	50cd      	str	r5, [r1, r3]
 800e9da:	18cc      	adds	r4, r1, r3
 800e9dc:	4630      	mov	r0, r6
 800e9de:	f000 fb34 	bl	800f04a <__malloc_unlock>
 800e9e2:	f104 000b 	add.w	r0, r4, #11
 800e9e6:	1d23      	adds	r3, r4, #4
 800e9e8:	f020 0007 	bic.w	r0, r0, #7
 800e9ec:	1ac3      	subs	r3, r0, r3
 800e9ee:	d0d3      	beq.n	800e998 <_malloc_r+0x20>
 800e9f0:	425a      	negs	r2, r3
 800e9f2:	50e2      	str	r2, [r4, r3]
 800e9f4:	e7d0      	b.n	800e998 <_malloc_r+0x20>
 800e9f6:	428c      	cmp	r4, r1
 800e9f8:	684b      	ldr	r3, [r1, #4]
 800e9fa:	bf16      	itet	ne
 800e9fc:	6063      	strne	r3, [r4, #4]
 800e9fe:	6013      	streq	r3, [r2, #0]
 800ea00:	460c      	movne	r4, r1
 800ea02:	e7eb      	b.n	800e9dc <_malloc_r+0x64>
 800ea04:	460c      	mov	r4, r1
 800ea06:	6849      	ldr	r1, [r1, #4]
 800ea08:	e7cc      	b.n	800e9a4 <_malloc_r+0x2c>
 800ea0a:	1cc4      	adds	r4, r0, #3
 800ea0c:	f024 0403 	bic.w	r4, r4, #3
 800ea10:	42a0      	cmp	r0, r4
 800ea12:	d005      	beq.n	800ea20 <_malloc_r+0xa8>
 800ea14:	1a21      	subs	r1, r4, r0
 800ea16:	4630      	mov	r0, r6
 800ea18:	f000 fae2 	bl	800efe0 <_sbrk_r>
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	d0cf      	beq.n	800e9c0 <_malloc_r+0x48>
 800ea20:	6025      	str	r5, [r4, #0]
 800ea22:	e7db      	b.n	800e9dc <_malloc_r+0x64>
 800ea24:	2000046c 	.word	0x2000046c
 800ea28:	20000470 	.word	0x20000470

0800ea2c <__ssputs_r>:
 800ea2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea30:	688e      	ldr	r6, [r1, #8]
 800ea32:	429e      	cmp	r6, r3
 800ea34:	4682      	mov	sl, r0
 800ea36:	460c      	mov	r4, r1
 800ea38:	4690      	mov	r8, r2
 800ea3a:	4699      	mov	r9, r3
 800ea3c:	d837      	bhi.n	800eaae <__ssputs_r+0x82>
 800ea3e:	898a      	ldrh	r2, [r1, #12]
 800ea40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea44:	d031      	beq.n	800eaaa <__ssputs_r+0x7e>
 800ea46:	6825      	ldr	r5, [r4, #0]
 800ea48:	6909      	ldr	r1, [r1, #16]
 800ea4a:	1a6f      	subs	r7, r5, r1
 800ea4c:	6965      	ldr	r5, [r4, #20]
 800ea4e:	2302      	movs	r3, #2
 800ea50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea54:	fb95 f5f3 	sdiv	r5, r5, r3
 800ea58:	f109 0301 	add.w	r3, r9, #1
 800ea5c:	443b      	add	r3, r7
 800ea5e:	429d      	cmp	r5, r3
 800ea60:	bf38      	it	cc
 800ea62:	461d      	movcc	r5, r3
 800ea64:	0553      	lsls	r3, r2, #21
 800ea66:	d530      	bpl.n	800eaca <__ssputs_r+0x9e>
 800ea68:	4629      	mov	r1, r5
 800ea6a:	f7ff ff85 	bl	800e978 <_malloc_r>
 800ea6e:	4606      	mov	r6, r0
 800ea70:	b950      	cbnz	r0, 800ea88 <__ssputs_r+0x5c>
 800ea72:	230c      	movs	r3, #12
 800ea74:	f8ca 3000 	str.w	r3, [sl]
 800ea78:	89a3      	ldrh	r3, [r4, #12]
 800ea7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea7e:	81a3      	strh	r3, [r4, #12]
 800ea80:	f04f 30ff 	mov.w	r0, #4294967295
 800ea84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea88:	463a      	mov	r2, r7
 800ea8a:	6921      	ldr	r1, [r4, #16]
 800ea8c:	f000 fab8 	bl	800f000 <memcpy>
 800ea90:	89a3      	ldrh	r3, [r4, #12]
 800ea92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea9a:	81a3      	strh	r3, [r4, #12]
 800ea9c:	6126      	str	r6, [r4, #16]
 800ea9e:	6165      	str	r5, [r4, #20]
 800eaa0:	443e      	add	r6, r7
 800eaa2:	1bed      	subs	r5, r5, r7
 800eaa4:	6026      	str	r6, [r4, #0]
 800eaa6:	60a5      	str	r5, [r4, #8]
 800eaa8:	464e      	mov	r6, r9
 800eaaa:	454e      	cmp	r6, r9
 800eaac:	d900      	bls.n	800eab0 <__ssputs_r+0x84>
 800eaae:	464e      	mov	r6, r9
 800eab0:	4632      	mov	r2, r6
 800eab2:	4641      	mov	r1, r8
 800eab4:	6820      	ldr	r0, [r4, #0]
 800eab6:	f000 faae 	bl	800f016 <memmove>
 800eaba:	68a3      	ldr	r3, [r4, #8]
 800eabc:	1b9b      	subs	r3, r3, r6
 800eabe:	60a3      	str	r3, [r4, #8]
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	441e      	add	r6, r3
 800eac4:	6026      	str	r6, [r4, #0]
 800eac6:	2000      	movs	r0, #0
 800eac8:	e7dc      	b.n	800ea84 <__ssputs_r+0x58>
 800eaca:	462a      	mov	r2, r5
 800eacc:	f000 fabe 	bl	800f04c <_realloc_r>
 800ead0:	4606      	mov	r6, r0
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d1e2      	bne.n	800ea9c <__ssputs_r+0x70>
 800ead6:	6921      	ldr	r1, [r4, #16]
 800ead8:	4650      	mov	r0, sl
 800eada:	f7ff feff 	bl	800e8dc <_free_r>
 800eade:	e7c8      	b.n	800ea72 <__ssputs_r+0x46>

0800eae0 <_svfiprintf_r>:
 800eae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae4:	461d      	mov	r5, r3
 800eae6:	898b      	ldrh	r3, [r1, #12]
 800eae8:	061f      	lsls	r7, r3, #24
 800eaea:	b09d      	sub	sp, #116	; 0x74
 800eaec:	4680      	mov	r8, r0
 800eaee:	460c      	mov	r4, r1
 800eaf0:	4616      	mov	r6, r2
 800eaf2:	d50f      	bpl.n	800eb14 <_svfiprintf_r+0x34>
 800eaf4:	690b      	ldr	r3, [r1, #16]
 800eaf6:	b96b      	cbnz	r3, 800eb14 <_svfiprintf_r+0x34>
 800eaf8:	2140      	movs	r1, #64	; 0x40
 800eafa:	f7ff ff3d 	bl	800e978 <_malloc_r>
 800eafe:	6020      	str	r0, [r4, #0]
 800eb00:	6120      	str	r0, [r4, #16]
 800eb02:	b928      	cbnz	r0, 800eb10 <_svfiprintf_r+0x30>
 800eb04:	230c      	movs	r3, #12
 800eb06:	f8c8 3000 	str.w	r3, [r8]
 800eb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0e:	e0c8      	b.n	800eca2 <_svfiprintf_r+0x1c2>
 800eb10:	2340      	movs	r3, #64	; 0x40
 800eb12:	6163      	str	r3, [r4, #20]
 800eb14:	2300      	movs	r3, #0
 800eb16:	9309      	str	r3, [sp, #36]	; 0x24
 800eb18:	2320      	movs	r3, #32
 800eb1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb1e:	2330      	movs	r3, #48	; 0x30
 800eb20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb24:	9503      	str	r5, [sp, #12]
 800eb26:	f04f 0b01 	mov.w	fp, #1
 800eb2a:	4637      	mov	r7, r6
 800eb2c:	463d      	mov	r5, r7
 800eb2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eb32:	b10b      	cbz	r3, 800eb38 <_svfiprintf_r+0x58>
 800eb34:	2b25      	cmp	r3, #37	; 0x25
 800eb36:	d13e      	bne.n	800ebb6 <_svfiprintf_r+0xd6>
 800eb38:	ebb7 0a06 	subs.w	sl, r7, r6
 800eb3c:	d00b      	beq.n	800eb56 <_svfiprintf_r+0x76>
 800eb3e:	4653      	mov	r3, sl
 800eb40:	4632      	mov	r2, r6
 800eb42:	4621      	mov	r1, r4
 800eb44:	4640      	mov	r0, r8
 800eb46:	f7ff ff71 	bl	800ea2c <__ssputs_r>
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	f000 80a4 	beq.w	800ec98 <_svfiprintf_r+0x1b8>
 800eb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb52:	4453      	add	r3, sl
 800eb54:	9309      	str	r3, [sp, #36]	; 0x24
 800eb56:	783b      	ldrb	r3, [r7, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f000 809d 	beq.w	800ec98 <_svfiprintf_r+0x1b8>
 800eb5e:	2300      	movs	r3, #0
 800eb60:	f04f 32ff 	mov.w	r2, #4294967295
 800eb64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb68:	9304      	str	r3, [sp, #16]
 800eb6a:	9307      	str	r3, [sp, #28]
 800eb6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb70:	931a      	str	r3, [sp, #104]	; 0x68
 800eb72:	462f      	mov	r7, r5
 800eb74:	2205      	movs	r2, #5
 800eb76:	f817 1b01 	ldrb.w	r1, [r7], #1
 800eb7a:	4850      	ldr	r0, [pc, #320]	; (800ecbc <_svfiprintf_r+0x1dc>)
 800eb7c:	f7f1 fb68 	bl	8000250 <memchr>
 800eb80:	9b04      	ldr	r3, [sp, #16]
 800eb82:	b9d0      	cbnz	r0, 800ebba <_svfiprintf_r+0xda>
 800eb84:	06d9      	lsls	r1, r3, #27
 800eb86:	bf44      	itt	mi
 800eb88:	2220      	movmi	r2, #32
 800eb8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb8e:	071a      	lsls	r2, r3, #28
 800eb90:	bf44      	itt	mi
 800eb92:	222b      	movmi	r2, #43	; 0x2b
 800eb94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb98:	782a      	ldrb	r2, [r5, #0]
 800eb9a:	2a2a      	cmp	r2, #42	; 0x2a
 800eb9c:	d015      	beq.n	800ebca <_svfiprintf_r+0xea>
 800eb9e:	9a07      	ldr	r2, [sp, #28]
 800eba0:	462f      	mov	r7, r5
 800eba2:	2000      	movs	r0, #0
 800eba4:	250a      	movs	r5, #10
 800eba6:	4639      	mov	r1, r7
 800eba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebac:	3b30      	subs	r3, #48	; 0x30
 800ebae:	2b09      	cmp	r3, #9
 800ebb0:	d94d      	bls.n	800ec4e <_svfiprintf_r+0x16e>
 800ebb2:	b1b8      	cbz	r0, 800ebe4 <_svfiprintf_r+0x104>
 800ebb4:	e00f      	b.n	800ebd6 <_svfiprintf_r+0xf6>
 800ebb6:	462f      	mov	r7, r5
 800ebb8:	e7b8      	b.n	800eb2c <_svfiprintf_r+0x4c>
 800ebba:	4a40      	ldr	r2, [pc, #256]	; (800ecbc <_svfiprintf_r+0x1dc>)
 800ebbc:	1a80      	subs	r0, r0, r2
 800ebbe:	fa0b f000 	lsl.w	r0, fp, r0
 800ebc2:	4318      	orrs	r0, r3
 800ebc4:	9004      	str	r0, [sp, #16]
 800ebc6:	463d      	mov	r5, r7
 800ebc8:	e7d3      	b.n	800eb72 <_svfiprintf_r+0x92>
 800ebca:	9a03      	ldr	r2, [sp, #12]
 800ebcc:	1d11      	adds	r1, r2, #4
 800ebce:	6812      	ldr	r2, [r2, #0]
 800ebd0:	9103      	str	r1, [sp, #12]
 800ebd2:	2a00      	cmp	r2, #0
 800ebd4:	db01      	blt.n	800ebda <_svfiprintf_r+0xfa>
 800ebd6:	9207      	str	r2, [sp, #28]
 800ebd8:	e004      	b.n	800ebe4 <_svfiprintf_r+0x104>
 800ebda:	4252      	negs	r2, r2
 800ebdc:	f043 0302 	orr.w	r3, r3, #2
 800ebe0:	9207      	str	r2, [sp, #28]
 800ebe2:	9304      	str	r3, [sp, #16]
 800ebe4:	783b      	ldrb	r3, [r7, #0]
 800ebe6:	2b2e      	cmp	r3, #46	; 0x2e
 800ebe8:	d10c      	bne.n	800ec04 <_svfiprintf_r+0x124>
 800ebea:	787b      	ldrb	r3, [r7, #1]
 800ebec:	2b2a      	cmp	r3, #42	; 0x2a
 800ebee:	d133      	bne.n	800ec58 <_svfiprintf_r+0x178>
 800ebf0:	9b03      	ldr	r3, [sp, #12]
 800ebf2:	1d1a      	adds	r2, r3, #4
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	9203      	str	r2, [sp, #12]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	bfb8      	it	lt
 800ebfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec00:	3702      	adds	r7, #2
 800ec02:	9305      	str	r3, [sp, #20]
 800ec04:	4d2e      	ldr	r5, [pc, #184]	; (800ecc0 <_svfiprintf_r+0x1e0>)
 800ec06:	7839      	ldrb	r1, [r7, #0]
 800ec08:	2203      	movs	r2, #3
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f7f1 fb20 	bl	8000250 <memchr>
 800ec10:	b138      	cbz	r0, 800ec22 <_svfiprintf_r+0x142>
 800ec12:	2340      	movs	r3, #64	; 0x40
 800ec14:	1b40      	subs	r0, r0, r5
 800ec16:	fa03 f000 	lsl.w	r0, r3, r0
 800ec1a:	9b04      	ldr	r3, [sp, #16]
 800ec1c:	4303      	orrs	r3, r0
 800ec1e:	3701      	adds	r7, #1
 800ec20:	9304      	str	r3, [sp, #16]
 800ec22:	7839      	ldrb	r1, [r7, #0]
 800ec24:	4827      	ldr	r0, [pc, #156]	; (800ecc4 <_svfiprintf_r+0x1e4>)
 800ec26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec2a:	2206      	movs	r2, #6
 800ec2c:	1c7e      	adds	r6, r7, #1
 800ec2e:	f7f1 fb0f 	bl	8000250 <memchr>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d038      	beq.n	800eca8 <_svfiprintf_r+0x1c8>
 800ec36:	4b24      	ldr	r3, [pc, #144]	; (800ecc8 <_svfiprintf_r+0x1e8>)
 800ec38:	bb13      	cbnz	r3, 800ec80 <_svfiprintf_r+0x1a0>
 800ec3a:	9b03      	ldr	r3, [sp, #12]
 800ec3c:	3307      	adds	r3, #7
 800ec3e:	f023 0307 	bic.w	r3, r3, #7
 800ec42:	3308      	adds	r3, #8
 800ec44:	9303      	str	r3, [sp, #12]
 800ec46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec48:	444b      	add	r3, r9
 800ec4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec4c:	e76d      	b.n	800eb2a <_svfiprintf_r+0x4a>
 800ec4e:	fb05 3202 	mla	r2, r5, r2, r3
 800ec52:	2001      	movs	r0, #1
 800ec54:	460f      	mov	r7, r1
 800ec56:	e7a6      	b.n	800eba6 <_svfiprintf_r+0xc6>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	3701      	adds	r7, #1
 800ec5c:	9305      	str	r3, [sp, #20]
 800ec5e:	4619      	mov	r1, r3
 800ec60:	250a      	movs	r5, #10
 800ec62:	4638      	mov	r0, r7
 800ec64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec68:	3a30      	subs	r2, #48	; 0x30
 800ec6a:	2a09      	cmp	r2, #9
 800ec6c:	d903      	bls.n	800ec76 <_svfiprintf_r+0x196>
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d0c8      	beq.n	800ec04 <_svfiprintf_r+0x124>
 800ec72:	9105      	str	r1, [sp, #20]
 800ec74:	e7c6      	b.n	800ec04 <_svfiprintf_r+0x124>
 800ec76:	fb05 2101 	mla	r1, r5, r1, r2
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	4607      	mov	r7, r0
 800ec7e:	e7f0      	b.n	800ec62 <_svfiprintf_r+0x182>
 800ec80:	ab03      	add	r3, sp, #12
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	4622      	mov	r2, r4
 800ec86:	4b11      	ldr	r3, [pc, #68]	; (800eccc <_svfiprintf_r+0x1ec>)
 800ec88:	a904      	add	r1, sp, #16
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	f3af 8000 	nop.w
 800ec90:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ec94:	4681      	mov	r9, r0
 800ec96:	d1d6      	bne.n	800ec46 <_svfiprintf_r+0x166>
 800ec98:	89a3      	ldrh	r3, [r4, #12]
 800ec9a:	065b      	lsls	r3, r3, #25
 800ec9c:	f53f af35 	bmi.w	800eb0a <_svfiprintf_r+0x2a>
 800eca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eca2:	b01d      	add	sp, #116	; 0x74
 800eca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca8:	ab03      	add	r3, sp, #12
 800ecaa:	9300      	str	r3, [sp, #0]
 800ecac:	4622      	mov	r2, r4
 800ecae:	4b07      	ldr	r3, [pc, #28]	; (800eccc <_svfiprintf_r+0x1ec>)
 800ecb0:	a904      	add	r1, sp, #16
 800ecb2:	4640      	mov	r0, r8
 800ecb4:	f000 f882 	bl	800edbc <_printf_i>
 800ecb8:	e7ea      	b.n	800ec90 <_svfiprintf_r+0x1b0>
 800ecba:	bf00      	nop
 800ecbc:	08011b88 	.word	0x08011b88
 800ecc0:	08011b8e 	.word	0x08011b8e
 800ecc4:	08011b92 	.word	0x08011b92
 800ecc8:	00000000 	.word	0x00000000
 800eccc:	0800ea2d 	.word	0x0800ea2d

0800ecd0 <_printf_common>:
 800ecd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd4:	4691      	mov	r9, r2
 800ecd6:	461f      	mov	r7, r3
 800ecd8:	688a      	ldr	r2, [r1, #8]
 800ecda:	690b      	ldr	r3, [r1, #16]
 800ecdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ece0:	4293      	cmp	r3, r2
 800ece2:	bfb8      	it	lt
 800ece4:	4613      	movlt	r3, r2
 800ece6:	f8c9 3000 	str.w	r3, [r9]
 800ecea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecee:	4606      	mov	r6, r0
 800ecf0:	460c      	mov	r4, r1
 800ecf2:	b112      	cbz	r2, 800ecfa <_printf_common+0x2a>
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	f8c9 3000 	str.w	r3, [r9]
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	0699      	lsls	r1, r3, #26
 800ecfe:	bf42      	ittt	mi
 800ed00:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ed04:	3302      	addmi	r3, #2
 800ed06:	f8c9 3000 	strmi.w	r3, [r9]
 800ed0a:	6825      	ldr	r5, [r4, #0]
 800ed0c:	f015 0506 	ands.w	r5, r5, #6
 800ed10:	d107      	bne.n	800ed22 <_printf_common+0x52>
 800ed12:	f104 0a19 	add.w	sl, r4, #25
 800ed16:	68e3      	ldr	r3, [r4, #12]
 800ed18:	f8d9 2000 	ldr.w	r2, [r9]
 800ed1c:	1a9b      	subs	r3, r3, r2
 800ed1e:	42ab      	cmp	r3, r5
 800ed20:	dc28      	bgt.n	800ed74 <_printf_common+0xa4>
 800ed22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ed26:	6822      	ldr	r2, [r4, #0]
 800ed28:	3300      	adds	r3, #0
 800ed2a:	bf18      	it	ne
 800ed2c:	2301      	movne	r3, #1
 800ed2e:	0692      	lsls	r2, r2, #26
 800ed30:	d42d      	bmi.n	800ed8e <_printf_common+0xbe>
 800ed32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed36:	4639      	mov	r1, r7
 800ed38:	4630      	mov	r0, r6
 800ed3a:	47c0      	blx	r8
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	d020      	beq.n	800ed82 <_printf_common+0xb2>
 800ed40:	6823      	ldr	r3, [r4, #0]
 800ed42:	68e5      	ldr	r5, [r4, #12]
 800ed44:	f8d9 2000 	ldr.w	r2, [r9]
 800ed48:	f003 0306 	and.w	r3, r3, #6
 800ed4c:	2b04      	cmp	r3, #4
 800ed4e:	bf08      	it	eq
 800ed50:	1aad      	subeq	r5, r5, r2
 800ed52:	68a3      	ldr	r3, [r4, #8]
 800ed54:	6922      	ldr	r2, [r4, #16]
 800ed56:	bf0c      	ite	eq
 800ed58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed5c:	2500      	movne	r5, #0
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	bfc4      	itt	gt
 800ed62:	1a9b      	subgt	r3, r3, r2
 800ed64:	18ed      	addgt	r5, r5, r3
 800ed66:	f04f 0900 	mov.w	r9, #0
 800ed6a:	341a      	adds	r4, #26
 800ed6c:	454d      	cmp	r5, r9
 800ed6e:	d11a      	bne.n	800eda6 <_printf_common+0xd6>
 800ed70:	2000      	movs	r0, #0
 800ed72:	e008      	b.n	800ed86 <_printf_common+0xb6>
 800ed74:	2301      	movs	r3, #1
 800ed76:	4652      	mov	r2, sl
 800ed78:	4639      	mov	r1, r7
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	47c0      	blx	r8
 800ed7e:	3001      	adds	r0, #1
 800ed80:	d103      	bne.n	800ed8a <_printf_common+0xba>
 800ed82:	f04f 30ff 	mov.w	r0, #4294967295
 800ed86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed8a:	3501      	adds	r5, #1
 800ed8c:	e7c3      	b.n	800ed16 <_printf_common+0x46>
 800ed8e:	18e1      	adds	r1, r4, r3
 800ed90:	1c5a      	adds	r2, r3, #1
 800ed92:	2030      	movs	r0, #48	; 0x30
 800ed94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed98:	4422      	add	r2, r4
 800ed9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eda2:	3302      	adds	r3, #2
 800eda4:	e7c5      	b.n	800ed32 <_printf_common+0x62>
 800eda6:	2301      	movs	r3, #1
 800eda8:	4622      	mov	r2, r4
 800edaa:	4639      	mov	r1, r7
 800edac:	4630      	mov	r0, r6
 800edae:	47c0      	blx	r8
 800edb0:	3001      	adds	r0, #1
 800edb2:	d0e6      	beq.n	800ed82 <_printf_common+0xb2>
 800edb4:	f109 0901 	add.w	r9, r9, #1
 800edb8:	e7d8      	b.n	800ed6c <_printf_common+0x9c>
	...

0800edbc <_printf_i>:
 800edbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800edc4:	460c      	mov	r4, r1
 800edc6:	7e09      	ldrb	r1, [r1, #24]
 800edc8:	b085      	sub	sp, #20
 800edca:	296e      	cmp	r1, #110	; 0x6e
 800edcc:	4617      	mov	r7, r2
 800edce:	4606      	mov	r6, r0
 800edd0:	4698      	mov	r8, r3
 800edd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edd4:	f000 80b3 	beq.w	800ef3e <_printf_i+0x182>
 800edd8:	d822      	bhi.n	800ee20 <_printf_i+0x64>
 800edda:	2963      	cmp	r1, #99	; 0x63
 800eddc:	d036      	beq.n	800ee4c <_printf_i+0x90>
 800edde:	d80a      	bhi.n	800edf6 <_printf_i+0x3a>
 800ede0:	2900      	cmp	r1, #0
 800ede2:	f000 80b9 	beq.w	800ef58 <_printf_i+0x19c>
 800ede6:	2958      	cmp	r1, #88	; 0x58
 800ede8:	f000 8083 	beq.w	800eef2 <_printf_i+0x136>
 800edec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edf0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800edf4:	e032      	b.n	800ee5c <_printf_i+0xa0>
 800edf6:	2964      	cmp	r1, #100	; 0x64
 800edf8:	d001      	beq.n	800edfe <_printf_i+0x42>
 800edfa:	2969      	cmp	r1, #105	; 0x69
 800edfc:	d1f6      	bne.n	800edec <_printf_i+0x30>
 800edfe:	6820      	ldr	r0, [r4, #0]
 800ee00:	6813      	ldr	r3, [r2, #0]
 800ee02:	0605      	lsls	r5, r0, #24
 800ee04:	f103 0104 	add.w	r1, r3, #4
 800ee08:	d52a      	bpl.n	800ee60 <_printf_i+0xa4>
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	6011      	str	r1, [r2, #0]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	da03      	bge.n	800ee1a <_printf_i+0x5e>
 800ee12:	222d      	movs	r2, #45	; 0x2d
 800ee14:	425b      	negs	r3, r3
 800ee16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ee1a:	486f      	ldr	r0, [pc, #444]	; (800efd8 <_printf_i+0x21c>)
 800ee1c:	220a      	movs	r2, #10
 800ee1e:	e039      	b.n	800ee94 <_printf_i+0xd8>
 800ee20:	2973      	cmp	r1, #115	; 0x73
 800ee22:	f000 809d 	beq.w	800ef60 <_printf_i+0x1a4>
 800ee26:	d808      	bhi.n	800ee3a <_printf_i+0x7e>
 800ee28:	296f      	cmp	r1, #111	; 0x6f
 800ee2a:	d020      	beq.n	800ee6e <_printf_i+0xb2>
 800ee2c:	2970      	cmp	r1, #112	; 0x70
 800ee2e:	d1dd      	bne.n	800edec <_printf_i+0x30>
 800ee30:	6823      	ldr	r3, [r4, #0]
 800ee32:	f043 0320 	orr.w	r3, r3, #32
 800ee36:	6023      	str	r3, [r4, #0]
 800ee38:	e003      	b.n	800ee42 <_printf_i+0x86>
 800ee3a:	2975      	cmp	r1, #117	; 0x75
 800ee3c:	d017      	beq.n	800ee6e <_printf_i+0xb2>
 800ee3e:	2978      	cmp	r1, #120	; 0x78
 800ee40:	d1d4      	bne.n	800edec <_printf_i+0x30>
 800ee42:	2378      	movs	r3, #120	; 0x78
 800ee44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee48:	4864      	ldr	r0, [pc, #400]	; (800efdc <_printf_i+0x220>)
 800ee4a:	e055      	b.n	800eef8 <_printf_i+0x13c>
 800ee4c:	6813      	ldr	r3, [r2, #0]
 800ee4e:	1d19      	adds	r1, r3, #4
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	6011      	str	r1, [r2, #0]
 800ee54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e08c      	b.n	800ef7a <_printf_i+0x1be>
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	6011      	str	r1, [r2, #0]
 800ee64:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee68:	bf18      	it	ne
 800ee6a:	b21b      	sxthne	r3, r3
 800ee6c:	e7cf      	b.n	800ee0e <_printf_i+0x52>
 800ee6e:	6813      	ldr	r3, [r2, #0]
 800ee70:	6825      	ldr	r5, [r4, #0]
 800ee72:	1d18      	adds	r0, r3, #4
 800ee74:	6010      	str	r0, [r2, #0]
 800ee76:	0628      	lsls	r0, r5, #24
 800ee78:	d501      	bpl.n	800ee7e <_printf_i+0xc2>
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	e002      	b.n	800ee84 <_printf_i+0xc8>
 800ee7e:	0668      	lsls	r0, r5, #25
 800ee80:	d5fb      	bpl.n	800ee7a <_printf_i+0xbe>
 800ee82:	881b      	ldrh	r3, [r3, #0]
 800ee84:	4854      	ldr	r0, [pc, #336]	; (800efd8 <_printf_i+0x21c>)
 800ee86:	296f      	cmp	r1, #111	; 0x6f
 800ee88:	bf14      	ite	ne
 800ee8a:	220a      	movne	r2, #10
 800ee8c:	2208      	moveq	r2, #8
 800ee8e:	2100      	movs	r1, #0
 800ee90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee94:	6865      	ldr	r5, [r4, #4]
 800ee96:	60a5      	str	r5, [r4, #8]
 800ee98:	2d00      	cmp	r5, #0
 800ee9a:	f2c0 8095 	blt.w	800efc8 <_printf_i+0x20c>
 800ee9e:	6821      	ldr	r1, [r4, #0]
 800eea0:	f021 0104 	bic.w	r1, r1, #4
 800eea4:	6021      	str	r1, [r4, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d13d      	bne.n	800ef26 <_printf_i+0x16a>
 800eeaa:	2d00      	cmp	r5, #0
 800eeac:	f040 808e 	bne.w	800efcc <_printf_i+0x210>
 800eeb0:	4665      	mov	r5, ip
 800eeb2:	2a08      	cmp	r2, #8
 800eeb4:	d10b      	bne.n	800eece <_printf_i+0x112>
 800eeb6:	6823      	ldr	r3, [r4, #0]
 800eeb8:	07db      	lsls	r3, r3, #31
 800eeba:	d508      	bpl.n	800eece <_printf_i+0x112>
 800eebc:	6923      	ldr	r3, [r4, #16]
 800eebe:	6862      	ldr	r2, [r4, #4]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	bfde      	ittt	le
 800eec4:	2330      	movle	r3, #48	; 0x30
 800eec6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eeca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eece:	ebac 0305 	sub.w	r3, ip, r5
 800eed2:	6123      	str	r3, [r4, #16]
 800eed4:	f8cd 8000 	str.w	r8, [sp]
 800eed8:	463b      	mov	r3, r7
 800eeda:	aa03      	add	r2, sp, #12
 800eedc:	4621      	mov	r1, r4
 800eede:	4630      	mov	r0, r6
 800eee0:	f7ff fef6 	bl	800ecd0 <_printf_common>
 800eee4:	3001      	adds	r0, #1
 800eee6:	d14d      	bne.n	800ef84 <_printf_i+0x1c8>
 800eee8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeec:	b005      	add	sp, #20
 800eeee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eef2:	4839      	ldr	r0, [pc, #228]	; (800efd8 <_printf_i+0x21c>)
 800eef4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800eef8:	6813      	ldr	r3, [r2, #0]
 800eefa:	6821      	ldr	r1, [r4, #0]
 800eefc:	1d1d      	adds	r5, r3, #4
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6015      	str	r5, [r2, #0]
 800ef02:	060a      	lsls	r2, r1, #24
 800ef04:	d50b      	bpl.n	800ef1e <_printf_i+0x162>
 800ef06:	07ca      	lsls	r2, r1, #31
 800ef08:	bf44      	itt	mi
 800ef0a:	f041 0120 	orrmi.w	r1, r1, #32
 800ef0e:	6021      	strmi	r1, [r4, #0]
 800ef10:	b91b      	cbnz	r3, 800ef1a <_printf_i+0x15e>
 800ef12:	6822      	ldr	r2, [r4, #0]
 800ef14:	f022 0220 	bic.w	r2, r2, #32
 800ef18:	6022      	str	r2, [r4, #0]
 800ef1a:	2210      	movs	r2, #16
 800ef1c:	e7b7      	b.n	800ee8e <_printf_i+0xd2>
 800ef1e:	064d      	lsls	r5, r1, #25
 800ef20:	bf48      	it	mi
 800ef22:	b29b      	uxthmi	r3, r3
 800ef24:	e7ef      	b.n	800ef06 <_printf_i+0x14a>
 800ef26:	4665      	mov	r5, ip
 800ef28:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef2c:	fb02 3311 	mls	r3, r2, r1, r3
 800ef30:	5cc3      	ldrb	r3, [r0, r3]
 800ef32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ef36:	460b      	mov	r3, r1
 800ef38:	2900      	cmp	r1, #0
 800ef3a:	d1f5      	bne.n	800ef28 <_printf_i+0x16c>
 800ef3c:	e7b9      	b.n	800eeb2 <_printf_i+0xf6>
 800ef3e:	6813      	ldr	r3, [r2, #0]
 800ef40:	6825      	ldr	r5, [r4, #0]
 800ef42:	6961      	ldr	r1, [r4, #20]
 800ef44:	1d18      	adds	r0, r3, #4
 800ef46:	6010      	str	r0, [r2, #0]
 800ef48:	0628      	lsls	r0, r5, #24
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	d501      	bpl.n	800ef52 <_printf_i+0x196>
 800ef4e:	6019      	str	r1, [r3, #0]
 800ef50:	e002      	b.n	800ef58 <_printf_i+0x19c>
 800ef52:	066a      	lsls	r2, r5, #25
 800ef54:	d5fb      	bpl.n	800ef4e <_printf_i+0x192>
 800ef56:	8019      	strh	r1, [r3, #0]
 800ef58:	2300      	movs	r3, #0
 800ef5a:	6123      	str	r3, [r4, #16]
 800ef5c:	4665      	mov	r5, ip
 800ef5e:	e7b9      	b.n	800eed4 <_printf_i+0x118>
 800ef60:	6813      	ldr	r3, [r2, #0]
 800ef62:	1d19      	adds	r1, r3, #4
 800ef64:	6011      	str	r1, [r2, #0]
 800ef66:	681d      	ldr	r5, [r3, #0]
 800ef68:	6862      	ldr	r2, [r4, #4]
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f7f1 f96f 	bl	8000250 <memchr>
 800ef72:	b108      	cbz	r0, 800ef78 <_printf_i+0x1bc>
 800ef74:	1b40      	subs	r0, r0, r5
 800ef76:	6060      	str	r0, [r4, #4]
 800ef78:	6863      	ldr	r3, [r4, #4]
 800ef7a:	6123      	str	r3, [r4, #16]
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef82:	e7a7      	b.n	800eed4 <_printf_i+0x118>
 800ef84:	6923      	ldr	r3, [r4, #16]
 800ef86:	462a      	mov	r2, r5
 800ef88:	4639      	mov	r1, r7
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	47c0      	blx	r8
 800ef8e:	3001      	adds	r0, #1
 800ef90:	d0aa      	beq.n	800eee8 <_printf_i+0x12c>
 800ef92:	6823      	ldr	r3, [r4, #0]
 800ef94:	079b      	lsls	r3, r3, #30
 800ef96:	d413      	bmi.n	800efc0 <_printf_i+0x204>
 800ef98:	68e0      	ldr	r0, [r4, #12]
 800ef9a:	9b03      	ldr	r3, [sp, #12]
 800ef9c:	4298      	cmp	r0, r3
 800ef9e:	bfb8      	it	lt
 800efa0:	4618      	movlt	r0, r3
 800efa2:	e7a3      	b.n	800eeec <_printf_i+0x130>
 800efa4:	2301      	movs	r3, #1
 800efa6:	464a      	mov	r2, r9
 800efa8:	4639      	mov	r1, r7
 800efaa:	4630      	mov	r0, r6
 800efac:	47c0      	blx	r8
 800efae:	3001      	adds	r0, #1
 800efb0:	d09a      	beq.n	800eee8 <_printf_i+0x12c>
 800efb2:	3501      	adds	r5, #1
 800efb4:	68e3      	ldr	r3, [r4, #12]
 800efb6:	9a03      	ldr	r2, [sp, #12]
 800efb8:	1a9b      	subs	r3, r3, r2
 800efba:	42ab      	cmp	r3, r5
 800efbc:	dcf2      	bgt.n	800efa4 <_printf_i+0x1e8>
 800efbe:	e7eb      	b.n	800ef98 <_printf_i+0x1dc>
 800efc0:	2500      	movs	r5, #0
 800efc2:	f104 0919 	add.w	r9, r4, #25
 800efc6:	e7f5      	b.n	800efb4 <_printf_i+0x1f8>
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1ac      	bne.n	800ef26 <_printf_i+0x16a>
 800efcc:	7803      	ldrb	r3, [r0, #0]
 800efce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efd6:	e76c      	b.n	800eeb2 <_printf_i+0xf6>
 800efd8:	08011b99 	.word	0x08011b99
 800efdc:	08011baa 	.word	0x08011baa

0800efe0 <_sbrk_r>:
 800efe0:	b538      	push	{r3, r4, r5, lr}
 800efe2:	4c06      	ldr	r4, [pc, #24]	; (800effc <_sbrk_r+0x1c>)
 800efe4:	2300      	movs	r3, #0
 800efe6:	4605      	mov	r5, r0
 800efe8:	4608      	mov	r0, r1
 800efea:	6023      	str	r3, [r4, #0]
 800efec:	f7ff fb0c 	bl	800e608 <_sbrk>
 800eff0:	1c43      	adds	r3, r0, #1
 800eff2:	d102      	bne.n	800effa <_sbrk_r+0x1a>
 800eff4:	6823      	ldr	r3, [r4, #0]
 800eff6:	b103      	cbz	r3, 800effa <_sbrk_r+0x1a>
 800eff8:	602b      	str	r3, [r5, #0]
 800effa:	bd38      	pop	{r3, r4, r5, pc}
 800effc:	20000d8c 	.word	0x20000d8c

0800f000 <memcpy>:
 800f000:	b510      	push	{r4, lr}
 800f002:	1e43      	subs	r3, r0, #1
 800f004:	440a      	add	r2, r1
 800f006:	4291      	cmp	r1, r2
 800f008:	d100      	bne.n	800f00c <memcpy+0xc>
 800f00a:	bd10      	pop	{r4, pc}
 800f00c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f010:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f014:	e7f7      	b.n	800f006 <memcpy+0x6>

0800f016 <memmove>:
 800f016:	4288      	cmp	r0, r1
 800f018:	b510      	push	{r4, lr}
 800f01a:	eb01 0302 	add.w	r3, r1, r2
 800f01e:	d807      	bhi.n	800f030 <memmove+0x1a>
 800f020:	1e42      	subs	r2, r0, #1
 800f022:	4299      	cmp	r1, r3
 800f024:	d00a      	beq.n	800f03c <memmove+0x26>
 800f026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f02a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f02e:	e7f8      	b.n	800f022 <memmove+0xc>
 800f030:	4283      	cmp	r3, r0
 800f032:	d9f5      	bls.n	800f020 <memmove+0xa>
 800f034:	1881      	adds	r1, r0, r2
 800f036:	1ad2      	subs	r2, r2, r3
 800f038:	42d3      	cmn	r3, r2
 800f03a:	d100      	bne.n	800f03e <memmove+0x28>
 800f03c:	bd10      	pop	{r4, pc}
 800f03e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f042:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f046:	e7f7      	b.n	800f038 <memmove+0x22>

0800f048 <__malloc_lock>:
 800f048:	4770      	bx	lr

0800f04a <__malloc_unlock>:
 800f04a:	4770      	bx	lr

0800f04c <_realloc_r>:
 800f04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04e:	4607      	mov	r7, r0
 800f050:	4614      	mov	r4, r2
 800f052:	460e      	mov	r6, r1
 800f054:	b921      	cbnz	r1, 800f060 <_realloc_r+0x14>
 800f056:	4611      	mov	r1, r2
 800f058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f05c:	f7ff bc8c 	b.w	800e978 <_malloc_r>
 800f060:	b922      	cbnz	r2, 800f06c <_realloc_r+0x20>
 800f062:	f7ff fc3b 	bl	800e8dc <_free_r>
 800f066:	4625      	mov	r5, r4
 800f068:	4628      	mov	r0, r5
 800f06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f06c:	f000 f814 	bl	800f098 <_malloc_usable_size_r>
 800f070:	42a0      	cmp	r0, r4
 800f072:	d20f      	bcs.n	800f094 <_realloc_r+0x48>
 800f074:	4621      	mov	r1, r4
 800f076:	4638      	mov	r0, r7
 800f078:	f7ff fc7e 	bl	800e978 <_malloc_r>
 800f07c:	4605      	mov	r5, r0
 800f07e:	2800      	cmp	r0, #0
 800f080:	d0f2      	beq.n	800f068 <_realloc_r+0x1c>
 800f082:	4631      	mov	r1, r6
 800f084:	4622      	mov	r2, r4
 800f086:	f7ff ffbb 	bl	800f000 <memcpy>
 800f08a:	4631      	mov	r1, r6
 800f08c:	4638      	mov	r0, r7
 800f08e:	f7ff fc25 	bl	800e8dc <_free_r>
 800f092:	e7e9      	b.n	800f068 <_realloc_r+0x1c>
 800f094:	4635      	mov	r5, r6
 800f096:	e7e7      	b.n	800f068 <_realloc_r+0x1c>

0800f098 <_malloc_usable_size_r>:
 800f098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f09c:	1f18      	subs	r0, r3, #4
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	bfbc      	itt	lt
 800f0a2:	580b      	ldrlt	r3, [r1, r0]
 800f0a4:	18c0      	addlt	r0, r0, r3
 800f0a6:	4770      	bx	lr

0800f0a8 <_gettimeofday>:
 800f0a8:	4b02      	ldr	r3, [pc, #8]	; (800f0b4 <_gettimeofday+0xc>)
 800f0aa:	2258      	movs	r2, #88	; 0x58
 800f0ac:	601a      	str	r2, [r3, #0]
 800f0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b2:	4770      	bx	lr
 800f0b4:	20000d8c 	.word	0x20000d8c

0800f0b8 <_init>:
 800f0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ba:	bf00      	nop
 800f0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0be:	bc08      	pop	{r3}
 800f0c0:	469e      	mov	lr, r3
 800f0c2:	4770      	bx	lr

0800f0c4 <_fini>:
 800f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c6:	bf00      	nop
 800f0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ca:	bc08      	pop	{r3}
 800f0cc:	469e      	mov	lr, r3
 800f0ce:	4770      	bx	lr
